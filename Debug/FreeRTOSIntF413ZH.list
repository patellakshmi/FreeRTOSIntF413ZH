
FreeRTOSIntF413ZH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  080081cc  080081cc  000181cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008364  08008364  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008364  08008364  00018364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800836c  0800836c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800836c  0800836c  0001836c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008370  08008370  00018370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000149e8  20000078  080083ec  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014a60  080083ec  00024a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e519  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f6d  00000000  00000000  0003e5c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a0  00000000  00000000  00042530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e8  00000000  00000000  00043ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025643  00000000  00000000  000456b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d9dd  00000000  00000000  0006acfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e107d  00000000  00000000  000886d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169755  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007330  00000000  00000000  001697a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	080081b4 	.word	0x080081b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	080081b4 	.word	0x080081b4

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	20013478 	.word	0x20013478

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c8:	f000 b974 	b.w	80005b4 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e8:	9d08      	ldr	r5, [sp, #32]
 80002ea:	4604      	mov	r4, r0
 80002ec:	468e      	mov	lr, r1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d14d      	bne.n	800038e <__udivmoddi4+0xaa>
 80002f2:	428a      	cmp	r2, r1
 80002f4:	4694      	mov	ip, r2
 80002f6:	d969      	bls.n	80003cc <__udivmoddi4+0xe8>
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	b152      	cbz	r2, 8000314 <__udivmoddi4+0x30>
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	f1c2 0120 	rsb	r1, r2, #32
 8000306:	fa20 f101 	lsr.w	r1, r0, r1
 800030a:	fa0c fc02 	lsl.w	ip, ip, r2
 800030e:	ea41 0e03 	orr.w	lr, r1, r3
 8000312:	4094      	lsls	r4, r2
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	0c21      	lsrs	r1, r4, #16
 800031a:	fbbe f6f8 	udiv	r6, lr, r8
 800031e:	fa1f f78c 	uxth.w	r7, ip
 8000322:	fb08 e316 	mls	r3, r8, r6, lr
 8000326:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800032a:	fb06 f107 	mul.w	r1, r6, r7
 800032e:	4299      	cmp	r1, r3
 8000330:	d90a      	bls.n	8000348 <__udivmoddi4+0x64>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800033a:	f080 811f 	bcs.w	800057c <__udivmoddi4+0x298>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 811c 	bls.w	800057c <__udivmoddi4+0x298>
 8000344:	3e02      	subs	r6, #2
 8000346:	4463      	add	r3, ip
 8000348:	1a5b      	subs	r3, r3, r1
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000350:	fb08 3310 	mls	r3, r8, r0, r3
 8000354:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000358:	fb00 f707 	mul.w	r7, r0, r7
 800035c:	42a7      	cmp	r7, r4
 800035e:	d90a      	bls.n	8000376 <__udivmoddi4+0x92>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000368:	f080 810a 	bcs.w	8000580 <__udivmoddi4+0x29c>
 800036c:	42a7      	cmp	r7, r4
 800036e:	f240 8107 	bls.w	8000580 <__udivmoddi4+0x29c>
 8000372:	4464      	add	r4, ip
 8000374:	3802      	subs	r0, #2
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	1be4      	subs	r4, r4, r7
 800037c:	2600      	movs	r6, #0
 800037e:	b11d      	cbz	r5, 8000388 <__udivmoddi4+0xa4>
 8000380:	40d4      	lsrs	r4, r2
 8000382:	2300      	movs	r3, #0
 8000384:	e9c5 4300 	strd	r4, r3, [r5]
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0xc2>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80ef 	beq.w	8000576 <__udivmoddi4+0x292>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x160>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xd4>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80f9 	bhi.w	80005aa <__udivmoddi4+0x2c6>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0303 	sbc.w	r3, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	469e      	mov	lr, r3
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e0      	beq.n	8000388 <__udivmoddi4+0xa4>
 80003c6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ca:	e7dd      	b.n	8000388 <__udivmoddi4+0xa4>
 80003cc:	b902      	cbnz	r2, 80003d0 <__udivmoddi4+0xec>
 80003ce:	deff      	udf	#255	; 0xff
 80003d0:	fab2 f282 	clz	r2, r2
 80003d4:	2a00      	cmp	r2, #0
 80003d6:	f040 8092 	bne.w	80004fe <__udivmoddi4+0x21a>
 80003da:	eba1 010c 	sub.w	r1, r1, ip
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	2601      	movs	r6, #1
 80003e8:	0c20      	lsrs	r0, r4, #16
 80003ea:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ee:	fb07 1113 	mls	r1, r7, r3, r1
 80003f2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f6:	fb0e f003 	mul.w	r0, lr, r3
 80003fa:	4288      	cmp	r0, r1
 80003fc:	d908      	bls.n	8000410 <__udivmoddi4+0x12c>
 80003fe:	eb1c 0101 	adds.w	r1, ip, r1
 8000402:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000406:	d202      	bcs.n	800040e <__udivmoddi4+0x12a>
 8000408:	4288      	cmp	r0, r1
 800040a:	f200 80cb 	bhi.w	80005a4 <__udivmoddi4+0x2c0>
 800040e:	4643      	mov	r3, r8
 8000410:	1a09      	subs	r1, r1, r0
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb1 f0f7 	udiv	r0, r1, r7
 8000418:	fb07 1110 	mls	r1, r7, r0, r1
 800041c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000420:	fb0e fe00 	mul.w	lr, lr, r0
 8000424:	45a6      	cmp	lr, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x156>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000430:	d202      	bcs.n	8000438 <__udivmoddi4+0x154>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f200 80bb 	bhi.w	80005ae <__udivmoddi4+0x2ca>
 8000438:	4608      	mov	r0, r1
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000442:	e79c      	b.n	800037e <__udivmoddi4+0x9a>
 8000444:	f1c6 0720 	rsb	r7, r6, #32
 8000448:	40b3      	lsls	r3, r6
 800044a:	fa22 fc07 	lsr.w	ip, r2, r7
 800044e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000452:	fa20 f407 	lsr.w	r4, r0, r7
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	431c      	orrs	r4, r3
 800045c:	40f9      	lsrs	r1, r7
 800045e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000462:	fa00 f306 	lsl.w	r3, r0, r6
 8000466:	fbb1 f8f9 	udiv	r8, r1, r9
 800046a:	0c20      	lsrs	r0, r4, #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fb09 1118 	mls	r1, r9, r8, r1
 8000474:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000478:	fb08 f00e 	mul.w	r0, r8, lr
 800047c:	4288      	cmp	r0, r1
 800047e:	fa02 f206 	lsl.w	r2, r2, r6
 8000482:	d90b      	bls.n	800049c <__udivmoddi4+0x1b8>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800048c:	f080 8088 	bcs.w	80005a0 <__udivmoddi4+0x2bc>
 8000490:	4288      	cmp	r0, r1
 8000492:	f240 8085 	bls.w	80005a0 <__udivmoddi4+0x2bc>
 8000496:	f1a8 0802 	sub.w	r8, r8, #2
 800049a:	4461      	add	r1, ip
 800049c:	1a09      	subs	r1, r1, r0
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a4:	fb09 1110 	mls	r1, r9, r0, r1
 80004a8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80004b0:	458e      	cmp	lr, r1
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x1e2>
 80004b4:	eb1c 0101 	adds.w	r1, ip, r1
 80004b8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004bc:	d26c      	bcs.n	8000598 <__udivmoddi4+0x2b4>
 80004be:	458e      	cmp	lr, r1
 80004c0:	d96a      	bls.n	8000598 <__udivmoddi4+0x2b4>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4461      	add	r1, ip
 80004c6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ca:	fba0 9402 	umull	r9, r4, r0, r2
 80004ce:	eba1 010e 	sub.w	r1, r1, lr
 80004d2:	42a1      	cmp	r1, r4
 80004d4:	46c8      	mov	r8, r9
 80004d6:	46a6      	mov	lr, r4
 80004d8:	d356      	bcc.n	8000588 <__udivmoddi4+0x2a4>
 80004da:	d053      	beq.n	8000584 <__udivmoddi4+0x2a0>
 80004dc:	b15d      	cbz	r5, 80004f6 <__udivmoddi4+0x212>
 80004de:	ebb3 0208 	subs.w	r2, r3, r8
 80004e2:	eb61 010e 	sbc.w	r1, r1, lr
 80004e6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ea:	fa22 f306 	lsr.w	r3, r2, r6
 80004ee:	40f1      	lsrs	r1, r6
 80004f0:	431f      	orrs	r7, r3
 80004f2:	e9c5 7100 	strd	r7, r1, [r5]
 80004f6:	2600      	movs	r6, #0
 80004f8:	4631      	mov	r1, r6
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	40d8      	lsrs	r0, r3
 8000504:	fa0c fc02 	lsl.w	ip, ip, r2
 8000508:	fa21 f303 	lsr.w	r3, r1, r3
 800050c:	4091      	lsls	r1, r2
 800050e:	4301      	orrs	r1, r0
 8000510:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000514:	fa1f fe8c 	uxth.w	lr, ip
 8000518:	fbb3 f0f7 	udiv	r0, r3, r7
 800051c:	fb07 3610 	mls	r6, r7, r0, r3
 8000520:	0c0b      	lsrs	r3, r1, #16
 8000522:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000526:	fb00 f60e 	mul.w	r6, r0, lr
 800052a:	429e      	cmp	r6, r3
 800052c:	fa04 f402 	lsl.w	r4, r4, r2
 8000530:	d908      	bls.n	8000544 <__udivmoddi4+0x260>
 8000532:	eb1c 0303 	adds.w	r3, ip, r3
 8000536:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053a:	d22f      	bcs.n	800059c <__udivmoddi4+0x2b8>
 800053c:	429e      	cmp	r6, r3
 800053e:	d92d      	bls.n	800059c <__udivmoddi4+0x2b8>
 8000540:	3802      	subs	r0, #2
 8000542:	4463      	add	r3, ip
 8000544:	1b9b      	subs	r3, r3, r6
 8000546:	b289      	uxth	r1, r1
 8000548:	fbb3 f6f7 	udiv	r6, r3, r7
 800054c:	fb07 3316 	mls	r3, r7, r6, r3
 8000550:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000554:	fb06 f30e 	mul.w	r3, r6, lr
 8000558:	428b      	cmp	r3, r1
 800055a:	d908      	bls.n	800056e <__udivmoddi4+0x28a>
 800055c:	eb1c 0101 	adds.w	r1, ip, r1
 8000560:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000564:	d216      	bcs.n	8000594 <__udivmoddi4+0x2b0>
 8000566:	428b      	cmp	r3, r1
 8000568:	d914      	bls.n	8000594 <__udivmoddi4+0x2b0>
 800056a:	3e02      	subs	r6, #2
 800056c:	4461      	add	r1, ip
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000574:	e738      	b.n	80003e8 <__udivmoddi4+0x104>
 8000576:	462e      	mov	r6, r5
 8000578:	4628      	mov	r0, r5
 800057a:	e705      	b.n	8000388 <__udivmoddi4+0xa4>
 800057c:	4606      	mov	r6, r0
 800057e:	e6e3      	b.n	8000348 <__udivmoddi4+0x64>
 8000580:	4618      	mov	r0, r3
 8000582:	e6f8      	b.n	8000376 <__udivmoddi4+0x92>
 8000584:	454b      	cmp	r3, r9
 8000586:	d2a9      	bcs.n	80004dc <__udivmoddi4+0x1f8>
 8000588:	ebb9 0802 	subs.w	r8, r9, r2
 800058c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000590:	3801      	subs	r0, #1
 8000592:	e7a3      	b.n	80004dc <__udivmoddi4+0x1f8>
 8000594:	4646      	mov	r6, r8
 8000596:	e7ea      	b.n	800056e <__udivmoddi4+0x28a>
 8000598:	4620      	mov	r0, r4
 800059a:	e794      	b.n	80004c6 <__udivmoddi4+0x1e2>
 800059c:	4640      	mov	r0, r8
 800059e:	e7d1      	b.n	8000544 <__udivmoddi4+0x260>
 80005a0:	46d0      	mov	r8, sl
 80005a2:	e77b      	b.n	800049c <__udivmoddi4+0x1b8>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	e732      	b.n	8000410 <__udivmoddi4+0x12c>
 80005aa:	4630      	mov	r0, r6
 80005ac:	e709      	b.n	80003c2 <__udivmoddi4+0xde>
 80005ae:	4464      	add	r4, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e742      	b.n	800043a <__udivmoddi4+0x156>

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <canTaskFunction>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void canTaskFunction(void *pvParameters){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

	for(;;){
		printf("CAN-TASK\n");
 80005c0:	4801      	ldr	r0, [pc, #4]	; (80005c8 <canTaskFunction+0x10>)
 80005c2:	f007 f96b 	bl	800789c <puts>
 80005c6:	e7fb      	b.n	80005c0 <canTaskFunction+0x8>
 80005c8:	080081cc 	.word	0x080081cc

080005cc <spiTaskFunction>:
	}
}

void spiTaskFunction(void *pvParameters){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

	for(;;){
		printf("SPI-Task!\n");
 80005d4:	4801      	ldr	r0, [pc, #4]	; (80005dc <spiTaskFunction+0x10>)
 80005d6:	f007 f961 	bl	800789c <puts>
 80005da:	e7fb      	b.n	80005d4 <spiTaskFunction+0x8>
 80005dc:	080081d8 	.word	0x080081d8

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fbe9 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f853 	bl	8000694 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  *DWT_CTR |= ( 1 << 0 );
 80005ee:	4b23      	ldr	r3, [pc, #140]	; (800067c <main+0x9c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a22      	ldr	r2, [pc, #136]	; (800067c <main+0x9c>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 80005fa:	f005 faa9 	bl	8005b50 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005fe:	f006 fb17 	bl	8006c30 <SEGGER_SYSVIEW_Start>



  TaskHandle_t taskHandleT;
  BaseType_t status = xTaskCreate(canTaskFunction, "CAN_HANDLER", 100,"HI", 3, &taskHandleT);
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	2303      	movs	r3, #3
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <main+0xa0>)
 800060e:	2264      	movs	r2, #100	; 0x64
 8000610:	491c      	ldr	r1, [pc, #112]	; (8000684 <main+0xa4>)
 8000612:	481d      	ldr	r0, [pc, #116]	; (8000688 <main+0xa8>)
 8000614:	f003 fbae 	bl	8003d74 <xTaskCreate>
 8000618:	6178      	str	r0, [r7, #20]
  configASSERT( status == pdPASS);
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d00a      	beq.n	8000636 <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000624:	f383 8811 	msr	BASEPRI, r3
 8000628:	f3bf 8f6f 	isb	sy
 800062c:	f3bf 8f4f 	dsb	sy
 8000630:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000632:	bf00      	nop
 8000634:	e7fe      	b.n	8000634 <main+0x54>

  TaskHandle_t taskHandleM;
  status = xTaskCreate(spiTaskFunction, "SPI_HANDLER", 100,"HI", 3, &taskHandleM);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2303      	movs	r3, #3
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <main+0xa0>)
 8000640:	2264      	movs	r2, #100	; 0x64
 8000642:	4912      	ldr	r1, [pc, #72]	; (800068c <main+0xac>)
 8000644:	4812      	ldr	r0, [pc, #72]	; (8000690 <main+0xb0>)
 8000646:	f003 fb95 	bl	8003d74 <xTaskCreate>
 800064a:	6178      	str	r0, [r7, #20]
  configASSERT( status == pdPASS);
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d00a      	beq.n	8000668 <main+0x88>
        __asm volatile
 8000652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000656:	f383 8811 	msr	BASEPRI, r3
 800065a:	f3bf 8f6f 	isb	sy
 800065e:	f3bf 8f4f 	dsb	sy
 8000662:	60fb      	str	r3, [r7, #12]
    }
 8000664:	bf00      	nop
 8000666:	e7fe      	b.n	8000666 <main+0x86>
  vTaskStartScheduler();
 8000668:	f003 fd0c 	bl	8004084 <vTaskStartScheduler>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066c:	f000 f8d8 	bl	8000820 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000670:	f000 f87c 	bl	800076c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000674:	f000 f8a4 	bl	80007c0 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000678:	e7fe      	b.n	8000678 <main+0x98>
 800067a:	bf00      	nop
 800067c:	e0001000 	.word	0xe0001000
 8000680:	080081e4 	.word	0x080081e4
 8000684:	080081e8 	.word	0x080081e8
 8000688:	080005b9 	.word	0x080005b9
 800068c:	080081f4 	.word	0x080081f4
 8000690:	080005cd 	.word	0x080005cd

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2234      	movs	r2, #52	; 0x34
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 f884 	bl	80077b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <SystemClock_Config+0xd0>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a28      	ldr	r2, [pc, #160]	; (8000764 <SystemClock_Config+0xd0>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <SystemClock_Config+0xd0>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <SystemClock_Config+0xd4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a22      	ldr	r2, [pc, #136]	; (8000768 <SystemClock_Config+0xd4>)
 80006de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b20      	ldr	r3, [pc, #128]	; (8000768 <SystemClock_Config+0xd4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000704:	2308      	movs	r3, #8
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000708:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800070c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800070e:	2304      	movs	r3, #4
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000712:	2308      	movs	r3, #8
 8000714:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000716:	2302      	movs	r3, #2
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fc68 	bl	8001ff4 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800072a:	f000 f939 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2103      	movs	r1, #3
 800074a:	4618      	mov	r0, r3
 800074c:	f000 ff74 	bl	8001638 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000756:	f000 f923 	bl	80009a0 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <MX_USART3_UART_Init+0x50>)
 8000774:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_USART3_UART_Init+0x4c>)
 80007a4:	f002 f958 	bl	8002a58 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007ae:	f000 f8f7 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000094 	.word	0x20000094
 80007bc:	40004800 	.word	0x40004800

080007c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007ce:	2206      	movs	r2, #6
 80007d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007d8:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80007fe:	2201      	movs	r2, #1
 8000800:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000804:	2200      	movs	r2, #0
 8000806:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800080a:	f000 fdcc 	bl	80013a6 <HAL_PCD_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8000814:	f000 f8c4 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000d8 	.word	0x200000d8

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	4b4c      	ldr	r3, [pc, #304]	; (800096c <MX_GPIO_Init+0x14c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a4b      	ldr	r2, [pc, #300]	; (800096c <MX_GPIO_Init+0x14c>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b49      	ldr	r3, [pc, #292]	; (800096c <MX_GPIO_Init+0x14c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	61bb      	str	r3, [r7, #24]
 8000850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	4b45      	ldr	r3, [pc, #276]	; (800096c <MX_GPIO_Init+0x14c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a44      	ldr	r2, [pc, #272]	; (800096c <MX_GPIO_Init+0x14c>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b42      	ldr	r3, [pc, #264]	; (800096c <MX_GPIO_Init+0x14c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b3e      	ldr	r3, [pc, #248]	; (800096c <MX_GPIO_Init+0x14c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a3d      	ldr	r2, [pc, #244]	; (800096c <MX_GPIO_Init+0x14c>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b3b      	ldr	r3, [pc, #236]	; (800096c <MX_GPIO_Init+0x14c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b37      	ldr	r3, [pc, #220]	; (800096c <MX_GPIO_Init+0x14c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a36      	ldr	r2, [pc, #216]	; (800096c <MX_GPIO_Init+0x14c>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b34      	ldr	r3, [pc, #208]	; (800096c <MX_GPIO_Init+0x14c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b30      	ldr	r3, [pc, #192]	; (800096c <MX_GPIO_Init+0x14c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a2f      	ldr	r2, [pc, #188]	; (800096c <MX_GPIO_Init+0x14c>)
 80008b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <MX_GPIO_Init+0x14c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b29      	ldr	r3, [pc, #164]	; (800096c <MX_GPIO_Init+0x14c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a28      	ldr	r2, [pc, #160]	; (800096c <MX_GPIO_Init+0x14c>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b26      	ldr	r3, [pc, #152]	; (800096c <MX_GPIO_Init+0x14c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008e4:	4822      	ldr	r0, [pc, #136]	; (8000970 <MX_GPIO_Init+0x150>)
 80008e6:	f000 fd45 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2140      	movs	r1, #64	; 0x40
 80008ee:	4821      	ldr	r0, [pc, #132]	; (8000974 <MX_GPIO_Init+0x154>)
 80008f0:	f000 fd40 	bl	8001374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	481b      	ldr	r0, [pc, #108]	; (8000978 <MX_GPIO_Init+0x158>)
 800090c:	f000 fb9e 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000910:	f244 0381 	movw	r3, #16513	; 0x4081
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_GPIO_Init+0x150>)
 800092a:	f000 fb8f 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800092e:	2340      	movs	r3, #64	; 0x40
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	480b      	ldr	r0, [pc, #44]	; (8000974 <MX_GPIO_Init+0x154>)
 8000946:	f000 fb81 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_GPIO_Init+0x154>)
 800095e:	f000 fb75 	bl	800104c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000962:	bf00      	nop
 8000964:	3730      	adds	r7, #48	; 0x30
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800
 8000970:	40020400 	.word	0x40020400
 8000974:	40021800 	.word	0x40021800
 8000978:	40020800 	.word	0x40020800

0800097c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d101      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800098e:	f000 fa37 	bl	8000e00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40001000 	.word	0x40001000

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a0f      	ldr	r2, [pc, #60]	; (80009f8 <HAL_MspInit+0x4c>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80009ea:	f004 fd2d 	bl	8005448 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <HAL_UART_MspInit+0x84>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d12c      	bne.n	8000a78 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_UART_MspInit+0x88>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a68:	2307      	movs	r3, #7
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <HAL_UART_MspInit+0x8c>)
 8000a74:	f000 faea 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40004800 	.word	0x40004800
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020c00 	.word	0x40020c00

08000a8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b0a0      	sub	sp, #128	; 0x80
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2258      	movs	r2, #88	; 0x58
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f006 fe7f 	bl	80077b0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000aba:	d14d      	bne.n	8000b58 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000abc:	2320      	movs	r3, #32
 8000abe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 f807 	bl	8001adc <HAL_RCCEx_PeriphCLKConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000ad4:	f7ff ff64 	bl	80009a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <HAL_PCD_MspInit+0xd4>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	4a1f      	ldr	r2, [pc, #124]	; (8000b60 <HAL_PCD_MspInit+0xd4>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <HAL_PCD_MspInit+0xd4>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000af4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000af8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b06:	230a      	movs	r3, #10
 8000b08:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4814      	ldr	r0, [pc, #80]	; (8000b64 <HAL_PCD_MspInit+0xd8>)
 8000b12:	f000 fa9b 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480e      	ldr	r0, [pc, #56]	; (8000b64 <HAL_PCD_MspInit+0xd8>)
 8000b2c:	f000 fa8e 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <HAL_PCD_MspInit+0xd4>)
 8000b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <HAL_PCD_MspInit+0xd4>)
 8000b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3a:	6353      	str	r3, [r2, #52]	; 0x34
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <HAL_PCD_MspInit+0xd4>)
 8000b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b44:	4a06      	ldr	r2, [pc, #24]	; (8000b60 <HAL_PCD_MspInit+0xd4>)
 8000b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <HAL_PCD_MspInit+0xd4>)
 8000b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b58:	bf00      	nop
 8000b5a:	3780      	adds	r7, #128	; 0x80
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020000 	.word	0x40020000

08000b68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	; 0x38
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	4b33      	ldr	r3, [pc, #204]	; (8000c4c <HAL_InitTick+0xe4>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	4a32      	ldr	r2, [pc, #200]	; (8000c4c <HAL_InitTick+0xe4>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6413      	str	r3, [r2, #64]	; 0x40
 8000b88:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <HAL_InitTick+0xe4>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f003 0310 	and.w	r3, r3, #16
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b94:	f107 0210 	add.w	r2, r7, #16
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 ff6a 	bl	8001a78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ba4:	6a3b      	ldr	r3, [r7, #32]
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d103      	bne.n	8000bb6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bae:	f000 ff3b 	bl	8001a28 <HAL_RCC_GetPCLK1Freq>
 8000bb2:	6378      	str	r0, [r7, #52]	; 0x34
 8000bb4:	e004      	b.n	8000bc0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bb6:	f000 ff37 	bl	8001a28 <HAL_RCC_GetPCLK1Freq>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc2:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <HAL_InitTick+0xe8>)
 8000bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc8:	0c9b      	lsrs	r3, r3, #18
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <HAL_InitTick+0xec>)
 8000bd0:	4a21      	ldr	r2, [pc, #132]	; (8000c58 <HAL_InitTick+0xf0>)
 8000bd2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <HAL_InitTick+0xec>)
 8000bd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bda:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bdc:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <HAL_InitTick+0xec>)
 8000bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_InitTick+0xec>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <HAL_InitTick+0xec>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <HAL_InitTick+0xec>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bf4:	4817      	ldr	r0, [pc, #92]	; (8000c54 <HAL_InitTick+0xec>)
 8000bf6:	f001 fc81 	bl	80024fc <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d11b      	bne.n	8000c40 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c08:	4812      	ldr	r0, [pc, #72]	; (8000c54 <HAL_InitTick+0xec>)
 8000c0a:	f001 fcd1 	bl	80025b0 <HAL_TIM_Base_Start_IT>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d111      	bne.n	8000c40 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c1c:	2036      	movs	r0, #54	; 0x36
 8000c1e:	f000 fa07 	bl	8001030 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b0f      	cmp	r3, #15
 8000c26:	d808      	bhi.n	8000c3a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	2036      	movs	r0, #54	; 0x36
 8000c2e:	f000 f9e3 	bl	8000ff8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <HAL_InitTick+0xf4>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	e002      	b.n	8000c40 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3738      	adds	r7, #56	; 0x38
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	431bde83 	.word	0x431bde83
 8000c54:	200005e4 	.word	0x200005e4
 8000c58:	40001000 	.word	0x40001000
 8000c5c:	20000004 	.word	0x20000004

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <TIM6_DAC_IRQHandler+0x10>)
 8000c92:	f001 fcfd 	bl	8002690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200005e4 	.word	0x200005e4

08000ca0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e00a      	b.n	8000cc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cb2:	f3af 8000 	nop.w
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60ba      	str	r2, [r7, #8]
 8000cbe:	b2ca      	uxtb	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbf0      	blt.n	8000cb2 <_read+0x12>
  }

  return len;
 8000cd0:	687b      	ldr	r3, [r7, #4]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d02:	605a      	str	r2, [r3, #4]
  return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <_isatty>:

int _isatty(int file)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <SystemInit+0x20>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4e:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <SystemInit+0x20>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	480d      	ldr	r0, [pc, #52]	; (8000da4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d6e:	490e      	ldr	r1, [pc, #56]	; (8000da8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d84:	4c0b      	ldr	r4, [pc, #44]	; (8000db4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d92:	f7ff ffd7 	bl	8000d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d96:	f006 fcc9 	bl	800772c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9a:	f7ff fc21 	bl	80005e0 <main>
  bx  lr    
 8000d9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000da0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000dac:	08008374 	.word	0x08008374
  ldr r2, =_sbss
 8000db0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000db4:	20014a60 	.word	0x20014a60

08000db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <HAL_Init+0x40>)
 8000dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <HAL_Init+0x40>)
 8000dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_Init+0x40>)
 8000dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f8fc 	bl	8000fe2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	200f      	movs	r0, #15
 8000dec:	f7ff febc 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fddc 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023c00 	.word	0x40023c00

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008
 8000e24:	2000062c 	.word	0x2000062c

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	2000062c 	.word	0x2000062c

08000e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff ffee 	bl	8000e28 <HAL_GetTick>
 8000e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e58:	d005      	beq.n	8000e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_Delay+0x44>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e66:	bf00      	nop
 8000e68:	f7ff ffde 	bl	8000e28 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d8f7      	bhi.n	8000e68 <HAL_Delay+0x28>
  {
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db0b      	blt.n	8000f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 021f 	and.w	r2, r3, #31
 8000f04:	4907      	ldr	r1, [pc, #28]	; (8000f24 <__NVIC_EnableIRQ+0x38>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	; (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ff4c 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100a:	f7ff ff61 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 800100e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	68b9      	ldr	r1, [r7, #8]
 8001014:	6978      	ldr	r0, [r7, #20]
 8001016:	f7ff ffb1 	bl	8000f7c <NVIC_EncodePriority>
 800101a:	4602      	mov	r2, r0
 800101c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001020:	4611      	mov	r1, r2
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff80 	bl	8000f28 <__NVIC_SetPriority>
}
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff54 	bl	8000eec <__NVIC_EnableIRQ>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
 8001066:	e165      	b.n	8001334 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	429a      	cmp	r2, r3
 8001082:	f040 8154 	bne.w	800132e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d005      	beq.n	800109e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109a:	2b02      	cmp	r3, #2
 800109c:	d130      	bne.n	8001100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	f003 0201 	and.w	r2, r3, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b03      	cmp	r3, #3
 800110a:	d017      	beq.n	800113c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d123      	bne.n	8001190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	69b9      	ldr	r1, [r7, #24]
 800118c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0203 	and.w	r2, r3, #3
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 80ae 	beq.w	800132e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b5d      	ldr	r3, [pc, #372]	; (800134c <HAL_GPIO_Init+0x300>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a5c      	ldr	r2, [pc, #368]	; (800134c <HAL_GPIO_Init+0x300>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b5a      	ldr	r3, [pc, #360]	; (800134c <HAL_GPIO_Init+0x300>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ee:	4a58      	ldr	r2, [pc, #352]	; (8001350 <HAL_GPIO_Init+0x304>)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4f      	ldr	r2, [pc, #316]	; (8001354 <HAL_GPIO_Init+0x308>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d025      	beq.n	8001266 <HAL_GPIO_Init+0x21a>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4e      	ldr	r2, [pc, #312]	; (8001358 <HAL_GPIO_Init+0x30c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d01f      	beq.n	8001262 <HAL_GPIO_Init+0x216>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4d      	ldr	r2, [pc, #308]	; (800135c <HAL_GPIO_Init+0x310>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d019      	beq.n	800125e <HAL_GPIO_Init+0x212>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4c      	ldr	r2, [pc, #304]	; (8001360 <HAL_GPIO_Init+0x314>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x20e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4b      	ldr	r2, [pc, #300]	; (8001364 <HAL_GPIO_Init+0x318>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x20a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4a      	ldr	r2, [pc, #296]	; (8001368 <HAL_GPIO_Init+0x31c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x206>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a49      	ldr	r2, [pc, #292]	; (800136c <HAL_GPIO_Init+0x320>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x202>
 800124a:	2306      	movs	r3, #6
 800124c:	e00c      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 800124e:	2307      	movs	r3, #7
 8001250:	e00a      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 8001252:	2305      	movs	r3, #5
 8001254:	e008      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 8001256:	2304      	movs	r3, #4
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 800125a:	2303      	movs	r3, #3
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x21c>
 8001266:	2300      	movs	r3, #0
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f002 0203 	and.w	r2, r2, #3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4093      	lsls	r3, r2
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001278:	4935      	ldr	r1, [pc, #212]	; (8001350 <HAL_GPIO_Init+0x304>)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001286:	4b3a      	ldr	r3, [pc, #232]	; (8001370 <HAL_GPIO_Init+0x324>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012aa:	4a31      	ldr	r2, [pc, #196]	; (8001370 <HAL_GPIO_Init+0x324>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_GPIO_Init+0x324>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d4:	4a26      	ldr	r2, [pc, #152]	; (8001370 <HAL_GPIO_Init+0x324>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012da:	4b25      	ldr	r3, [pc, #148]	; (8001370 <HAL_GPIO_Init+0x324>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <HAL_GPIO_Init+0x324>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_GPIO_Init+0x324>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001328:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_GPIO_Init+0x324>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	f67f ae96 	bls.w	8001068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40013800 	.word	0x40013800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020400 	.word	0x40020400
 800135c:	40020800 	.word	0x40020800
 8001360:	40020c00 	.word	0x40020c00
 8001364:	40021000 	.word	0x40021000
 8001368:	40021400 	.word	0x40021400
 800136c:	40021800 	.word	0x40021800
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001390:	e003      	b.n	800139a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	041a      	lsls	r2, r3, #16
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a8:	b08f      	sub	sp, #60	; 0x3c
 80013aa:	af0a      	add	r7, sp, #40	; 0x28
 80013ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e116      	b.n	80015e6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fb5a 	bl	8000a8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2203      	movs	r2, #3
 80013dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 fe61 	bl	80030be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	687e      	ldr	r6, [r7, #4]
 8001404:	466d      	mov	r5, sp
 8001406:	f106 0410 	add.w	r4, r6, #16
 800140a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001412:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001416:	e885 0003 	stmia.w	r5, {r0, r1}
 800141a:	1d33      	adds	r3, r6, #4
 800141c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f001 fdec 	bl	8002ffc <USB_CoreInit>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d005      	beq.n	8001436 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2202      	movs	r2, #2
 800142e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e0d7      	b.n	80015e6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f001 fe4f 	bl	80030e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001442:	2300      	movs	r3, #0
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	e04a      	b.n	80014de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001448:	7bfa      	ldrb	r2, [r7, #15]
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	333d      	adds	r3, #61	; 0x3d
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	333c      	adds	r3, #60	; 0x3c
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	b298      	uxth	r0, r3
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	3344      	adds	r3, #68	; 0x44
 8001484:	4602      	mov	r2, r0
 8001486:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	3340      	adds	r3, #64	; 0x40
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	3348      	adds	r3, #72	; 0x48
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	334c      	adds	r3, #76	; 0x4c
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	3354      	adds	r3, #84	; 0x54
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	3301      	adds	r3, #1
 80014dc:	73fb      	strb	r3, [r7, #15]
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d3af      	bcc.n	8001448 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	e044      	b.n	8001578 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001516:	7bfa      	ldrb	r2, [r7, #15]
 8001518:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	3301      	adds	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	429a      	cmp	r2, r3
 8001580:	d3b5      	bcc.n	80014ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	687e      	ldr	r6, [r7, #4]
 800158a:	466d      	mov	r5, sp
 800158c:	f106 0410 	add.w	r4, r6, #16
 8001590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001598:	e894 0003 	ldmia.w	r4, {r0, r1}
 800159c:	e885 0003 	stmia.w	r5, {r0, r1}
 80015a0:	1d33      	adds	r3, r6, #4
 80015a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f001 fde7 	bl	8003178 <USB_DevInit>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2202      	movs	r2, #2
 80015b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e014      	b.n	80015e6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d102      	bne.n	80015da <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f80a 	bl	80015ee <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 ffa5 	bl	800352e <USB_DevDisconnect>

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015ee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	f043 0303 	orr.w	r3, r3, #3
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0cc      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800164c:	4b68      	ldr	r3, [pc, #416]	; (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d90c      	bls.n	8001674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b65      	ldr	r3, [pc, #404]	; (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	4b63      	ldr	r3, [pc, #396]	; (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0b8      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d020      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800168c:	4b59      	ldr	r3, [pc, #356]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	4a58      	ldr	r2, [pc, #352]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a4:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4a52      	ldr	r2, [pc, #328]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b0:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	494d      	ldr	r1, [pc, #308]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d044      	beq.n	8001758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d119      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e07f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d003      	beq.n	80016f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	4b3f      	ldr	r3, [pc, #252]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e06f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001706:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e067      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001716:	4b37      	ldr	r3, [pc, #220]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f023 0203 	bic.w	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4934      	ldr	r1, [pc, #208]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	4313      	orrs	r3, r2
 8001726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001728:	f7ff fb7e 	bl	8000e28 <HAL_GetTick>
 800172c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	e00a      	b.n	8001746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001730:	f7ff fb7a 	bl	8000e28 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e04f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 020c 	and.w	r2, r3, #12
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	429a      	cmp	r2, r3
 8001756:	d1eb      	bne.n	8001730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001758:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d20c      	bcs.n	8001780 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e032      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4916      	ldr	r1, [pc, #88]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	4313      	orrs	r3, r2
 800179c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	490e      	ldr	r1, [pc, #56]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017be:	f000 f821 	bl	8001804 <HAL_RCC_GetSysClockFreq>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	490a      	ldr	r1, [pc, #40]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	5ccb      	ldrb	r3, [r1, r3]
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	4a09      	ldr	r2, [pc, #36]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f9c2 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023c00 	.word	0x40023c00
 80017f4:	40023800 	.word	0x40023800
 80017f8:	080082d4 	.word	0x080082d4
 80017fc:	20000000 	.word	0x20000000
 8001800:	20000004 	.word	0x20000004

08001804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001808:	b094      	sub	sp, #80	; 0x50
 800180a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	647b      	str	r3, [r7, #68]	; 0x44
 8001810:	2300      	movs	r3, #0
 8001812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001814:	2300      	movs	r3, #0
 8001816:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800181c:	4b79      	ldr	r3, [pc, #484]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x200>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d00d      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x40>
 8001828:	2b08      	cmp	r3, #8
 800182a:	f200 80e1 	bhi.w	80019f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <HAL_RCC_GetSysClockFreq+0x34>
 8001832:	2b04      	cmp	r3, #4
 8001834:	d003      	beq.n	800183e <HAL_RCC_GetSysClockFreq+0x3a>
 8001836:	e0db      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001838:	4b73      	ldr	r3, [pc, #460]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x204>)
 800183a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800183c:	e0db      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800183e:	4b73      	ldr	r3, [pc, #460]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x208>)
 8001840:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001842:	e0d8      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001844:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800184c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800184e:	4b6d      	ldr	r3, [pc, #436]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d063      	beq.n	8001922 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185a:	4b6a      	ldr	r3, [pc, #424]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x200>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	099b      	lsrs	r3, r3, #6
 8001860:	2200      	movs	r2, #0
 8001862:	63bb      	str	r3, [r7, #56]	; 0x38
 8001864:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
 800186e:	2300      	movs	r3, #0
 8001870:	637b      	str	r3, [r7, #52]	; 0x34
 8001872:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001876:	4622      	mov	r2, r4
 8001878:	462b      	mov	r3, r5
 800187a:	f04f 0000 	mov.w	r0, #0
 800187e:	f04f 0100 	mov.w	r1, #0
 8001882:	0159      	lsls	r1, r3, #5
 8001884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001888:	0150      	lsls	r0, r2, #5
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4621      	mov	r1, r4
 8001890:	1a51      	subs	r1, r2, r1
 8001892:	6139      	str	r1, [r7, #16]
 8001894:	4629      	mov	r1, r5
 8001896:	eb63 0301 	sbc.w	r3, r3, r1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018a8:	4659      	mov	r1, fp
 80018aa:	018b      	lsls	r3, r1, #6
 80018ac:	4651      	mov	r1, sl
 80018ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018b2:	4651      	mov	r1, sl
 80018b4:	018a      	lsls	r2, r1, #6
 80018b6:	4651      	mov	r1, sl
 80018b8:	ebb2 0801 	subs.w	r8, r2, r1
 80018bc:	4659      	mov	r1, fp
 80018be:	eb63 0901 	sbc.w	r9, r3, r1
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018d6:	4690      	mov	r8, r2
 80018d8:	4699      	mov	r9, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	eb18 0303 	adds.w	r3, r8, r3
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	462b      	mov	r3, r5
 80018e4:	eb49 0303 	adc.w	r3, r9, r3
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018f6:	4629      	mov	r1, r5
 80018f8:	024b      	lsls	r3, r1, #9
 80018fa:	4621      	mov	r1, r4
 80018fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001900:	4621      	mov	r1, r4
 8001902:	024a      	lsls	r2, r1, #9
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800190a:	2200      	movs	r2, #0
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
 800190e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001910:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001914:	f7fe fcce 	bl	80002b4 <__aeabi_uldivmod>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4613      	mov	r3, r2
 800191e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001920:	e058      	b.n	80019d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	099b      	lsrs	r3, r3, #6
 8001928:	2200      	movs	r2, #0
 800192a:	4618      	mov	r0, r3
 800192c:	4611      	mov	r1, r2
 800192e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001932:	623b      	str	r3, [r7, #32]
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
 8001938:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800193c:	4642      	mov	r2, r8
 800193e:	464b      	mov	r3, r9
 8001940:	f04f 0000 	mov.w	r0, #0
 8001944:	f04f 0100 	mov.w	r1, #0
 8001948:	0159      	lsls	r1, r3, #5
 800194a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800194e:	0150      	lsls	r0, r2, #5
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4641      	mov	r1, r8
 8001956:	ebb2 0a01 	subs.w	sl, r2, r1
 800195a:	4649      	mov	r1, r9
 800195c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800196c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001970:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001974:	ebb2 040a 	subs.w	r4, r2, sl
 8001978:	eb63 050b 	sbc.w	r5, r3, fp
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	00eb      	lsls	r3, r5, #3
 8001986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800198a:	00e2      	lsls	r2, r4, #3
 800198c:	4614      	mov	r4, r2
 800198e:	461d      	mov	r5, r3
 8001990:	4643      	mov	r3, r8
 8001992:	18e3      	adds	r3, r4, r3
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	464b      	mov	r3, r9
 8001998:	eb45 0303 	adc.w	r3, r5, r3
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019aa:	4629      	mov	r1, r5
 80019ac:	028b      	lsls	r3, r1, #10
 80019ae:	4621      	mov	r1, r4
 80019b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019b4:	4621      	mov	r1, r4
 80019b6:	028a      	lsls	r2, r1, #10
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019be:	2200      	movs	r2, #0
 80019c0:	61bb      	str	r3, [r7, #24]
 80019c2:	61fa      	str	r2, [r7, #28]
 80019c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019c8:	f7fe fc74 	bl	80002b4 <__aeabi_uldivmod>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4613      	mov	r3, r2
 80019d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	0c1b      	lsrs	r3, r3, #16
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	3301      	adds	r3, #1
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ee:	e002      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x204>)
 80019f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3750      	adds	r7, #80	; 0x50
 80019fc:	46bd      	mov	sp, r7
 80019fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	00f42400 	.word	0x00f42400
 8001a0c:	007a1200 	.word	0x007a1200

08001a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000000 	.word	0x20000000

08001a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a2c:	f7ff fff0 	bl	8001a10 <HAL_RCC_GetHCLKFreq>
 8001a30:	4602      	mov	r2, r0
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	0a9b      	lsrs	r3, r3, #10
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	4903      	ldr	r1, [pc, #12]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a3e:	5ccb      	ldrb	r3, [r1, r3]
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	080082e4 	.word	0x080082e4

08001a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a54:	f7ff ffdc 	bl	8001a10 <HAL_RCC_GetHCLKFreq>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	0b5b      	lsrs	r3, r3, #13
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	4903      	ldr	r1, [pc, #12]	; (8001a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a66:	5ccb      	ldrb	r3, [r1, r3]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40023800 	.word	0x40023800
 8001a74:	080082e4 	.word	0x080082e4

08001a78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	220f      	movs	r2, #15
 8001a86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0203 	and.w	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	08db      	lsrs	r3, r3, #3
 8001ab2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_RCC_GetClockConfig+0x60>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0207 	and.w	r2, r3, #7
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	601a      	str	r2, [r3, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40023c00 	.word	0x40023c00

08001adc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d010      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001b00:	4b7a      	ldr	r3, [pc, #488]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b06:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	4977      	ldr	r1, [pc, #476]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d010      	beq.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001b2e:	4b6f      	ldr	r3, [pc, #444]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b34:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	496b      	ldr	r1, [pc, #428]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d022      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8001b5c:	4b63      	ldr	r3, [pc, #396]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b6a:	4960      	ldr	r1, [pc, #384]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b86:	d10c      	bne.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001b88:	4b58      	ldr	r3, [pc, #352]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b8e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	4954      	ldr	r1, [pc, #336]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d022      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8001bae:	4b4f      	ldr	r3, [pc, #316]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbc:	494b      	ldr	r1, [pc, #300]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8001bda:	4b44      	ldr	r3, [pc, #272]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001be0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	493f      	ldr	r1, [pc, #252]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 808a 	beq.w	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b39      	ldr	r3, [pc, #228]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a38      	ldr	r2, [pc, #224]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b36      	ldr	r3, [pc, #216]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001c1e:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a33      	ldr	r2, [pc, #204]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c28:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c2a:	f7ff f8fd 	bl	8000e28 <HAL_GetTick>
 8001c2e:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c32:	f7ff f8f9 	bl	8000e28 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e1d1      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c50:	4b26      	ldr	r3, [pc, #152]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c58:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d02f      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d028      	beq.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c76:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c78:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001c84:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d114      	bne.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff f8c7 	bl	8000e28 <HAL_GetTick>
 8001c9a:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c9e:	f7ff f8c3 	bl	8000e28 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e199      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0ee      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ccc:	d114      	bne.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ce2:	4902      	ldr	r1, [pc, #8]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
 8001ce8:	e00c      	b.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	42470e40 	.word	0x42470e40
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001cfe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d02:	6093      	str	r3, [r2, #8]
 8001d04:	4b86      	ldr	r3, [pc, #536]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d10:	4983      	ldr	r1, [pc, #524]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d004      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001d28:	4b7e      	ldr	r3, [pc, #504]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8001d2a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00a      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001d38:	4b79      	ldr	r3, [pc, #484]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	4976      	ldr	r1, [pc, #472]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d011      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d5a:	4b71      	ldr	r3, [pc, #452]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d60:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	496d      	ldr	r1, [pc, #436]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d78:	d101      	bne.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001d8a:	4b65      	ldr	r3, [pc, #404]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d90:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	4961      	ldr	r1, [pc, #388]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d004      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b80      	cmp	r3, #128	; 0x80
 8001dac:	f040 80c6 	bne.w	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001db0:	4b5d      	ldr	r3, [pc, #372]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001db6:	f7ff f837 	bl	8000e28 <HAL_GetTick>
 8001dba:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001dbe:	f7ff f833 	bl	8000e28 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e10b      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001dd0:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001ddc:	4a53      	ldr	r2, [pc, #332]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de2:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d023      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d019      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d004      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e20:	d00e      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d019      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d115      	bne.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e3e:	d110      	bne.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	019b      	lsls	r3, r3, #6
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	061b      	lsls	r3, r3, #24
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	071b      	lsls	r3, r3, #28
 8001e5a:	4931      	ldr	r1, [pc, #196]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d026      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d122      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e90:	0e1b      	lsrs	r3, r3, #24
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	019b      	lsls	r3, r3, #6
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	061b      	lsls	r3, r3, #24
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	071b      	lsls	r3, r3, #28
 8001eb0:	491b      	ldr	r1, [pc, #108]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ebe:	f023 021f 	bic.w	r2, r3, #31
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	4915      	ldr	r1, [pc, #84]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d010      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	019b      	lsls	r3, r3, #6
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	061b      	lsls	r3, r3, #24
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	071b      	lsls	r3, r3, #28
 8001ef6:	490a      	ldr	r1, [pc, #40]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f04:	f7fe ff90 	bl	8000e28 <HAL_GetTick>
 8001f08:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f0a:	e011      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f0c:	f7fe ff8c 	bl	8000e28 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d90a      	bls.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e064      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800
 8001f24:	424711e0 	.word	0x424711e0
 8001f28:	42470068 	.word	0x42470068
 8001f2c:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f30:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0e7      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f48:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f56:	4926      	ldr	r1, [pc, #152]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f70:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f78:	491d      	ldr	r1, [pc, #116]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8001f8c:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9a:	4915      	ldr	r1, [pc, #84]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00a      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	4904      	ldr	r1, [pc, #16]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3720      	adds	r7, #32
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40023800 	.word	0x40023800

08001ff4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e273      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d075      	beq.n	80020fe <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002012:	4b88      	ldr	r3, [pc, #544]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b04      	cmp	r3, #4
 800201c:	d00c      	beq.n	8002038 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201e:	4b85      	ldr	r3, [pc, #532]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002026:	2b08      	cmp	r3, #8
 8002028:	d112      	bne.n	8002050 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800202a:	4b82      	ldr	r3, [pc, #520]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002036:	d10b      	bne.n	8002050 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	4b7e      	ldr	r3, [pc, #504]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d05b      	beq.n	80020fc <HAL_RCC_OscConfig+0x108>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d157      	bne.n	80020fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e24e      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002058:	d106      	bne.n	8002068 <HAL_RCC_OscConfig+0x74>
 800205a:	4b76      	ldr	r3, [pc, #472]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a75      	ldr	r2, [pc, #468]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e01d      	b.n	80020a4 <HAL_RCC_OscConfig+0xb0>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0x98>
 8002072:	4b70      	ldr	r3, [pc, #448]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a6f      	ldr	r2, [pc, #444]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 8002078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b6d      	ldr	r3, [pc, #436]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6c      	ldr	r2, [pc, #432]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 8002084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e00b      	b.n	80020a4 <HAL_RCC_OscConfig+0xb0>
 800208c:	4b69      	ldr	r3, [pc, #420]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a68      	ldr	r2, [pc, #416]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 8002092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b66      	ldr	r3, [pc, #408]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a65      	ldr	r2, [pc, #404]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 800209e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d013      	beq.n	80020d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7fe febc 	bl	8000e28 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020b4:	f7fe feb8 	bl	8000e28 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	; 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e213      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b5b      	ldr	r3, [pc, #364]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0xc0>
 80020d2:	e014      	b.n	80020fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7fe fea8 	bl	8000e28 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020dc:	f7fe fea4 	bl	8000e28 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e1ff      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ee:	4b51      	ldr	r3, [pc, #324]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0xe8>
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d063      	beq.n	80021d2 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800210a:	4b4a      	ldr	r3, [pc, #296]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00b      	beq.n	800212e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002116:	4b47      	ldr	r3, [pc, #284]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800211e:	2b08      	cmp	r3, #8
 8002120:	d11c      	bne.n	800215c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002122:	4b44      	ldr	r3, [pc, #272]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d116      	bne.n	800215c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212e:	4b41      	ldr	r3, [pc, #260]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <HAL_RCC_OscConfig+0x152>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e1d3      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002146:	4b3b      	ldr	r3, [pc, #236]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4937      	ldr	r1, [pc, #220]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215a:	e03a      	b.n	80021d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d020      	beq.n	80021a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002164:	4b34      	ldr	r3, [pc, #208]	; (8002238 <HAL_RCC_OscConfig+0x244>)
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7fe fe5d 	bl	8000e28 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002172:	f7fe fe59 	bl	8000e28 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e1b4      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002184:	4b2b      	ldr	r3, [pc, #172]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	4b28      	ldr	r3, [pc, #160]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4925      	ldr	r1, [pc, #148]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
 80021a4:	e015      	b.n	80021d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a6:	4b24      	ldr	r3, [pc, #144]	; (8002238 <HAL_RCC_OscConfig+0x244>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe fe3c 	bl	8000e28 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b4:	f7fe fe38 	bl	8000e28 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e193      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c6:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d036      	beq.n	800224c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d016      	beq.n	8002214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <HAL_RCC_OscConfig+0x248>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ec:	f7fe fe1c 	bl	8000e28 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f4:	f7fe fe18 	bl	8000e28 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e173      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_OscConfig+0x240>)
 8002208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x200>
 8002212:	e01b      	b.n	800224c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_RCC_OscConfig+0x248>)
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221a:	f7fe fe05 	bl	8000e28 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	e00e      	b.n	8002240 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002222:	f7fe fe01 	bl	8000e28 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d907      	bls.n	8002240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e15c      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
 8002234:	40023800 	.word	0x40023800
 8002238:	42470000 	.word	0x42470000
 800223c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002240:	4b8a      	ldr	r3, [pc, #552]	; (800246c <HAL_RCC_OscConfig+0x478>)
 8002242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1ea      	bne.n	8002222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 8097 	beq.w	8002388 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225e:	4b83      	ldr	r3, [pc, #524]	; (800246c <HAL_RCC_OscConfig+0x478>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	4b7f      	ldr	r3, [pc, #508]	; (800246c <HAL_RCC_OscConfig+0x478>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a7e      	ldr	r2, [pc, #504]	; (800246c <HAL_RCC_OscConfig+0x478>)
 8002274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b7c      	ldr	r3, [pc, #496]	; (800246c <HAL_RCC_OscConfig+0x478>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	4b79      	ldr	r3, [pc, #484]	; (8002470 <HAL_RCC_OscConfig+0x47c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d118      	bne.n	80022c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002296:	4b76      	ldr	r3, [pc, #472]	; (8002470 <HAL_RCC_OscConfig+0x47c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a75      	ldr	r2, [pc, #468]	; (8002470 <HAL_RCC_OscConfig+0x47c>)
 800229c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a2:	f7fe fdc1 	bl	8000e28 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022aa:	f7fe fdbd 	bl	8000e28 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e118      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022bc:	4b6c      	ldr	r3, [pc, #432]	; (8002470 <HAL_RCC_OscConfig+0x47c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x2ea>
 80022d0:	4b66      	ldr	r3, [pc, #408]	; (800246c <HAL_RCC_OscConfig+0x478>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d4:	4a65      	ldr	r2, [pc, #404]	; (800246c <HAL_RCC_OscConfig+0x478>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6713      	str	r3, [r2, #112]	; 0x70
 80022dc:	e01c      	b.n	8002318 <HAL_RCC_OscConfig+0x324>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x30c>
 80022e6:	4b61      	ldr	r3, [pc, #388]	; (800246c <HAL_RCC_OscConfig+0x478>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	4a60      	ldr	r2, [pc, #384]	; (800246c <HAL_RCC_OscConfig+0x478>)
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	6713      	str	r3, [r2, #112]	; 0x70
 80022f2:	4b5e      	ldr	r3, [pc, #376]	; (800246c <HAL_RCC_OscConfig+0x478>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a5d      	ldr	r2, [pc, #372]	; (800246c <HAL_RCC_OscConfig+0x478>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0x324>
 8002300:	4b5a      	ldr	r3, [pc, #360]	; (800246c <HAL_RCC_OscConfig+0x478>)
 8002302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002304:	4a59      	ldr	r2, [pc, #356]	; (800246c <HAL_RCC_OscConfig+0x478>)
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	6713      	str	r3, [r2, #112]	; 0x70
 800230c:	4b57      	ldr	r3, [pc, #348]	; (800246c <HAL_RCC_OscConfig+0x478>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	4a56      	ldr	r2, [pc, #344]	; (800246c <HAL_RCC_OscConfig+0x478>)
 8002312:	f023 0304 	bic.w	r3, r3, #4
 8002316:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d015      	beq.n	800234c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002320:	f7fe fd82 	bl	8000e28 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002326:	e00a      	b.n	800233e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002328:	f7fe fd7e 	bl	8000e28 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	; 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e0d7      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233e:	4b4b      	ldr	r3, [pc, #300]	; (800246c <HAL_RCC_OscConfig+0x478>)
 8002340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0ee      	beq.n	8002328 <HAL_RCC_OscConfig+0x334>
 800234a:	e014      	b.n	8002376 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7fe fd6c 	bl	8000e28 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002352:	e00a      	b.n	800236a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f7fe fd68 	bl	8000e28 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e0c1      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236a:	4b40      	ldr	r3, [pc, #256]	; (800246c <HAL_RCC_OscConfig+0x478>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1ee      	bne.n	8002354 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002376:	7dfb      	ldrb	r3, [r7, #23]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d105      	bne.n	8002388 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237c:	4b3b      	ldr	r3, [pc, #236]	; (800246c <HAL_RCC_OscConfig+0x478>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	4a3a      	ldr	r2, [pc, #232]	; (800246c <HAL_RCC_OscConfig+0x478>)
 8002382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002386:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80ad 	beq.w	80024ec <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002392:	4b36      	ldr	r3, [pc, #216]	; (800246c <HAL_RCC_OscConfig+0x478>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b08      	cmp	r3, #8
 800239c:	d060      	beq.n	8002460 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d145      	bne.n	8002432 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a6:	4b33      	ldr	r3, [pc, #204]	; (8002474 <HAL_RCC_OscConfig+0x480>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7fe fd3c 	bl	8000e28 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b4:	f7fe fd38 	bl	8000e28 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e093      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	4b29      	ldr	r3, [pc, #164]	; (800246c <HAL_RCC_OscConfig+0x478>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69da      	ldr	r2, [r3, #28]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	019b      	lsls	r3, r3, #6
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	085b      	lsrs	r3, r3, #1
 80023ea:	3b01      	subs	r3, #1
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	061b      	lsls	r3, r3, #24
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	071b      	lsls	r3, r3, #28
 80023fe:	491b      	ldr	r1, [pc, #108]	; (800246c <HAL_RCC_OscConfig+0x478>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_RCC_OscConfig+0x480>)
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240a:	f7fe fd0d 	bl	8000e28 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002412:	f7fe fd09 	bl	8000e28 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e064      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_RCC_OscConfig+0x478>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x41e>
 8002430:	e05c      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <HAL_RCC_OscConfig+0x480>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe fcf6 	bl	8000e28 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002440:	f7fe fcf2 	bl	8000e28 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e04d      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_RCC_OscConfig+0x478>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x44c>
 800245e:	e045      	b.n	80024ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d107      	bne.n	8002478 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e040      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
 800246c:	40023800 	.word	0x40023800
 8002470:	40007000 	.word	0x40007000
 8002474:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002478:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d030      	beq.n	80024e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d129      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249e:	429a      	cmp	r2, r3
 80024a0:	d122      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024a8:	4013      	ands	r3, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d119      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	085b      	lsrs	r3, r3, #1
 80024c0:	3b01      	subs	r3, #1
 80024c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d10f      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800

080024fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e041      	b.n	8002592 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f839 	bl	800259a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3304      	adds	r3, #4
 8002538:	4619      	mov	r1, r3
 800253a:	4610      	mov	r0, r2
 800253c:	f000 f9d8 	bl	80028f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d001      	beq.n	80025c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e04e      	b.n	8002666 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a23      	ldr	r2, [pc, #140]	; (8002674 <HAL_TIM_Base_Start_IT+0xc4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d022      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x80>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f2:	d01d      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x80>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a1f      	ldr	r2, [pc, #124]	; (8002678 <HAL_TIM_Base_Start_IT+0xc8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d018      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x80>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a1e      	ldr	r2, [pc, #120]	; (800267c <HAL_TIM_Base_Start_IT+0xcc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d013      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x80>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <HAL_TIM_Base_Start_IT+0xd0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00e      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x80>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1b      	ldr	r2, [pc, #108]	; (8002684 <HAL_TIM_Base_Start_IT+0xd4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d009      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x80>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a19      	ldr	r2, [pc, #100]	; (8002688 <HAL_TIM_Base_Start_IT+0xd8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d004      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x80>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a18      	ldr	r2, [pc, #96]	; (800268c <HAL_TIM_Base_Start_IT+0xdc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d111      	bne.n	8002654 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2b06      	cmp	r3, #6
 8002640:	d010      	beq.n	8002664 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002652:	e007      	b.n	8002664 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40010000 	.word	0x40010000
 8002678:	40000400 	.word	0x40000400
 800267c:	40000800 	.word	0x40000800
 8002680:	40000c00 	.word	0x40000c00
 8002684:	40010400 	.word	0x40010400
 8002688:	40014000 	.word	0x40014000
 800268c:	40001800 	.word	0x40001800

08002690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d122      	bne.n	80026ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d11b      	bne.n	80026ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0202 	mvn.w	r2, #2
 80026bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f8ee 	bl	80028b4 <HAL_TIM_IC_CaptureCallback>
 80026d8:	e005      	b.n	80026e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f8e0 	bl	80028a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f8f1 	bl	80028c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d122      	bne.n	8002740 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b04      	cmp	r3, #4
 8002706:	d11b      	bne.n	8002740 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0204 	mvn.w	r2, #4
 8002710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2202      	movs	r2, #2
 8002716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f8c4 	bl	80028b4 <HAL_TIM_IC_CaptureCallback>
 800272c:	e005      	b.n	800273a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8b6 	bl	80028a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f8c7 	bl	80028c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b08      	cmp	r3, #8
 800274c:	d122      	bne.n	8002794 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b08      	cmp	r3, #8
 800275a:	d11b      	bne.n	8002794 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0208 	mvn.w	r2, #8
 8002764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2204      	movs	r2, #4
 800276a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f89a 	bl	80028b4 <HAL_TIM_IC_CaptureCallback>
 8002780:	e005      	b.n	800278e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f88c 	bl	80028a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f89d 	bl	80028c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b10      	cmp	r3, #16
 80027a0:	d122      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d11b      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0210 	mvn.w	r2, #16
 80027b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2208      	movs	r2, #8
 80027be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f870 	bl	80028b4 <HAL_TIM_IC_CaptureCallback>
 80027d4:	e005      	b.n	80027e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f862 	bl	80028a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f873 	bl	80028c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d10e      	bne.n	8002814 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b01      	cmp	r3, #1
 8002802:	d107      	bne.n	8002814 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0201 	mvn.w	r2, #1
 800280c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe f8b4 	bl	800097c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281e:	2b80      	cmp	r3, #128	; 0x80
 8002820:	d10e      	bne.n	8002840 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282c:	2b80      	cmp	r3, #128	; 0x80
 800282e:	d107      	bne.n	8002840 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f902 	bl	8002a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284a:	2b40      	cmp	r3, #64	; 0x40
 800284c:	d10e      	bne.n	800286c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d107      	bne.n	800286c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f838 	bl	80028dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b20      	cmp	r3, #32
 8002878:	d10e      	bne.n	8002898 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b20      	cmp	r3, #32
 8002886:	d107      	bne.n	8002898 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0220 	mvn.w	r2, #32
 8002890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f8cc 	bl	8002a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a40      	ldr	r2, [pc, #256]	; (8002a04 <TIM_Base_SetConfig+0x114>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d013      	beq.n	8002930 <TIM_Base_SetConfig+0x40>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290e:	d00f      	beq.n	8002930 <TIM_Base_SetConfig+0x40>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a3d      	ldr	r2, [pc, #244]	; (8002a08 <TIM_Base_SetConfig+0x118>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00b      	beq.n	8002930 <TIM_Base_SetConfig+0x40>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a3c      	ldr	r2, [pc, #240]	; (8002a0c <TIM_Base_SetConfig+0x11c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d007      	beq.n	8002930 <TIM_Base_SetConfig+0x40>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a3b      	ldr	r2, [pc, #236]	; (8002a10 <TIM_Base_SetConfig+0x120>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d003      	beq.n	8002930 <TIM_Base_SetConfig+0x40>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a3a      	ldr	r2, [pc, #232]	; (8002a14 <TIM_Base_SetConfig+0x124>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d108      	bne.n	8002942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a2f      	ldr	r2, [pc, #188]	; (8002a04 <TIM_Base_SetConfig+0x114>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d02b      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002950:	d027      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a2c      	ldr	r2, [pc, #176]	; (8002a08 <TIM_Base_SetConfig+0x118>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d023      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a2b      	ldr	r2, [pc, #172]	; (8002a0c <TIM_Base_SetConfig+0x11c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d01f      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a2a      	ldr	r2, [pc, #168]	; (8002a10 <TIM_Base_SetConfig+0x120>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01b      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a29      	ldr	r2, [pc, #164]	; (8002a14 <TIM_Base_SetConfig+0x124>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d017      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a28      	ldr	r2, [pc, #160]	; (8002a18 <TIM_Base_SetConfig+0x128>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a27      	ldr	r2, [pc, #156]	; (8002a1c <TIM_Base_SetConfig+0x12c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00f      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a26      	ldr	r2, [pc, #152]	; (8002a20 <TIM_Base_SetConfig+0x130>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00b      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a25      	ldr	r2, [pc, #148]	; (8002a24 <TIM_Base_SetConfig+0x134>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d007      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a24      	ldr	r2, [pc, #144]	; (8002a28 <TIM_Base_SetConfig+0x138>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d003      	beq.n	80029a2 <TIM_Base_SetConfig+0xb2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a23      	ldr	r2, [pc, #140]	; (8002a2c <TIM_Base_SetConfig+0x13c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d108      	bne.n	80029b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <TIM_Base_SetConfig+0x114>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d003      	beq.n	80029e8 <TIM_Base_SetConfig+0xf8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a0c      	ldr	r2, [pc, #48]	; (8002a14 <TIM_Base_SetConfig+0x124>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d103      	bne.n	80029f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	615a      	str	r2, [r3, #20]
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40010000 	.word	0x40010000
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	40000800 	.word	0x40000800
 8002a10:	40000c00 	.word	0x40000c00
 8002a14:	40010400 	.word	0x40010400
 8002a18:	40014000 	.word	0x40014000
 8002a1c:	40014400 	.word	0x40014400
 8002a20:	40014800 	.word	0x40014800
 8002a24:	40001800 	.word	0x40001800
 8002a28:	40001c00 	.word	0x40001c00
 8002a2c:	40002000 	.word	0x40002000

08002a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e03f      	b.n	8002aea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fd ffbc 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2224      	movs	r2, #36	; 0x24
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f829 	bl	8002af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695a      	ldr	r2, [r3, #20]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af8:	b0c0      	sub	sp, #256	; 0x100
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b10:	68d9      	ldr	r1, [r3, #12]
 8002b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	ea40 0301 	orr.w	r3, r0, r1
 8002b1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b4c:	f021 010c 	bic.w	r1, r1, #12
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6e:	6999      	ldr	r1, [r3, #24]
 8002b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	ea40 0301 	orr.w	r3, r0, r1
 8002b7a:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4b95      	ldr	r3, [pc, #596]	; (8002dd8 <UART_SetConfig+0x2e4>)
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d011      	beq.n	8002bac <UART_SetConfig+0xb8>
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4b93      	ldr	r3, [pc, #588]	; (8002ddc <UART_SetConfig+0x2e8>)
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d00b      	beq.n	8002bac <UART_SetConfig+0xb8>
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4b91      	ldr	r3, [pc, #580]	; (8002de0 <UART_SetConfig+0x2ec>)
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d005      	beq.n	8002bac <UART_SetConfig+0xb8>
 8002ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	4b8f      	ldr	r3, [pc, #572]	; (8002de4 <UART_SetConfig+0x2f0>)
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d104      	bne.n	8002bb6 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bac:	f7fe ff50 	bl	8001a50 <HAL_RCC_GetPCLK2Freq>
 8002bb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bb4:	e003      	b.n	8002bbe <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bb6:	f7fe ff37 	bl	8001a28 <HAL_RCC_GetPCLK1Freq>
 8002bba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc8:	f040 8110 	bne.w	8002dec <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002bda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bde:	4622      	mov	r2, r4
 8002be0:	462b      	mov	r3, r5
 8002be2:	1891      	adds	r1, r2, r2
 8002be4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002be6:	415b      	adcs	r3, r3
 8002be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bee:	4621      	mov	r1, r4
 8002bf0:	eb12 0801 	adds.w	r8, r2, r1
 8002bf4:	4629      	mov	r1, r5
 8002bf6:	eb43 0901 	adc.w	r9, r3, r1
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c0e:	4690      	mov	r8, r2
 8002c10:	4699      	mov	r9, r3
 8002c12:	4623      	mov	r3, r4
 8002c14:	eb18 0303 	adds.w	r3, r8, r3
 8002c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c1c:	462b      	mov	r3, r5
 8002c1e:	eb49 0303 	adc.w	r3, r9, r3
 8002c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	18db      	adds	r3, r3, r3
 8002c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8002c40:	4613      	mov	r3, r2
 8002c42:	eb42 0303 	adc.w	r3, r2, r3
 8002c46:	657b      	str	r3, [r7, #84]	; 0x54
 8002c48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c50:	f7fd fb30 	bl	80002b4 <__aeabi_uldivmod>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4b63      	ldr	r3, [pc, #396]	; (8002de8 <UART_SetConfig+0x2f4>)
 8002c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	011c      	lsls	r4, r3, #4
 8002c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c74:	4642      	mov	r2, r8
 8002c76:	464b      	mov	r3, r9
 8002c78:	1891      	adds	r1, r2, r2
 8002c7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c7c:	415b      	adcs	r3, r3
 8002c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c84:	4641      	mov	r1, r8
 8002c86:	eb12 0a01 	adds.w	sl, r2, r1
 8002c8a:	4649      	mov	r1, r9
 8002c8c:	eb43 0b01 	adc.w	fp, r3, r1
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ca4:	4692      	mov	sl, r2
 8002ca6:	469b      	mov	fp, r3
 8002ca8:	4643      	mov	r3, r8
 8002caa:	eb1a 0303 	adds.w	r3, sl, r3
 8002cae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cb2:	464b      	mov	r3, r9
 8002cb4:	eb4b 0303 	adc.w	r3, fp, r3
 8002cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ccc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	18db      	adds	r3, r3, r3
 8002cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	eb42 0303 	adc.w	r3, r2, r3
 8002cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8002cde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ce2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ce6:	f7fd fae5 	bl	80002b4 <__aeabi_uldivmod>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4b3d      	ldr	r3, [pc, #244]	; (8002de8 <UART_SetConfig+0x2f4>)
 8002cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	2264      	movs	r2, #100	; 0x64
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	1acb      	subs	r3, r1, r3
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d06:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <UART_SetConfig+0x2f4>)
 8002d08:	fba3 2302 	umull	r2, r3, r3, r2
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d14:	441c      	add	r4, r3
 8002d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d28:	4642      	mov	r2, r8
 8002d2a:	464b      	mov	r3, r9
 8002d2c:	1891      	adds	r1, r2, r2
 8002d2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d30:	415b      	adcs	r3, r3
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d38:	4641      	mov	r1, r8
 8002d3a:	1851      	adds	r1, r2, r1
 8002d3c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d3e:	4649      	mov	r1, r9
 8002d40:	414b      	adcs	r3, r1
 8002d42:	637b      	str	r3, [r7, #52]	; 0x34
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d50:	4659      	mov	r1, fp
 8002d52:	00cb      	lsls	r3, r1, #3
 8002d54:	4651      	mov	r1, sl
 8002d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d5a:	4651      	mov	r1, sl
 8002d5c:	00ca      	lsls	r2, r1, #3
 8002d5e:	4610      	mov	r0, r2
 8002d60:	4619      	mov	r1, r3
 8002d62:	4603      	mov	r3, r0
 8002d64:	4642      	mov	r2, r8
 8002d66:	189b      	adds	r3, r3, r2
 8002d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d6c:	464b      	mov	r3, r9
 8002d6e:	460a      	mov	r2, r1
 8002d70:	eb42 0303 	adc.w	r3, r2, r3
 8002d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	18db      	adds	r3, r3, r3
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d92:	4613      	mov	r3, r2
 8002d94:	eb42 0303 	adc.w	r3, r2, r3
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002da2:	f7fd fa87 	bl	80002b4 <__aeabi_uldivmod>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <UART_SetConfig+0x2f4>)
 8002dac:	fba3 1302 	umull	r1, r3, r3, r2
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	2164      	movs	r1, #100	; 0x64
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	3332      	adds	r3, #50	; 0x32
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <UART_SetConfig+0x2f4>)
 8002dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	f003 0207 	and.w	r2, r3, #7
 8002dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4422      	add	r2, r4
 8002dd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dd4:	e109      	b.n	8002fea <UART_SetConfig+0x4f6>
 8002dd6:	bf00      	nop
 8002dd8:	40011000 	.word	0x40011000
 8002ddc:	40011400 	.word	0x40011400
 8002de0:	40011800 	.word	0x40011800
 8002de4:	40011c00 	.word	0x40011c00
 8002de8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002df0:	2200      	movs	r2, #0
 8002df2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002df6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002dfe:	4642      	mov	r2, r8
 8002e00:	464b      	mov	r3, r9
 8002e02:	1891      	adds	r1, r2, r2
 8002e04:	6239      	str	r1, [r7, #32]
 8002e06:	415b      	adcs	r3, r3
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e0e:	4641      	mov	r1, r8
 8002e10:	1854      	adds	r4, r2, r1
 8002e12:	4649      	mov	r1, r9
 8002e14:	eb43 0501 	adc.w	r5, r3, r1
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	00eb      	lsls	r3, r5, #3
 8002e22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e26:	00e2      	lsls	r2, r4, #3
 8002e28:	4614      	mov	r4, r2
 8002e2a:	461d      	mov	r5, r3
 8002e2c:	4643      	mov	r3, r8
 8002e2e:	18e3      	adds	r3, r4, r3
 8002e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e34:	464b      	mov	r3, r9
 8002e36:	eb45 0303 	adc.w	r3, r5, r3
 8002e3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	008b      	lsls	r3, r1, #2
 8002e5e:	4621      	mov	r1, r4
 8002e60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e64:	4621      	mov	r1, r4
 8002e66:	008a      	lsls	r2, r1, #2
 8002e68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e6c:	f7fd fa22 	bl	80002b4 <__aeabi_uldivmod>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4b60      	ldr	r3, [pc, #384]	; (8002ff8 <UART_SetConfig+0x504>)
 8002e76:	fba3 2302 	umull	r2, r3, r3, r2
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	011c      	lsls	r4, r3, #4
 8002e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e82:	2200      	movs	r2, #0
 8002e84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e90:	4642      	mov	r2, r8
 8002e92:	464b      	mov	r3, r9
 8002e94:	1891      	adds	r1, r2, r2
 8002e96:	61b9      	str	r1, [r7, #24]
 8002e98:	415b      	adcs	r3, r3
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ea0:	4641      	mov	r1, r8
 8002ea2:	1851      	adds	r1, r2, r1
 8002ea4:	6139      	str	r1, [r7, #16]
 8002ea6:	4649      	mov	r1, r9
 8002ea8:	414b      	adcs	r3, r1
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eb8:	4659      	mov	r1, fp
 8002eba:	00cb      	lsls	r3, r1, #3
 8002ebc:	4651      	mov	r1, sl
 8002ebe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ec2:	4651      	mov	r1, sl
 8002ec4:	00ca      	lsls	r2, r1, #3
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4603      	mov	r3, r0
 8002ecc:	4642      	mov	r2, r8
 8002ece:	189b      	adds	r3, r3, r2
 8002ed0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ed4:	464b      	mov	r3, r9
 8002ed6:	460a      	mov	r2, r1
 8002ed8:	eb42 0303 	adc.w	r3, r2, r3
 8002edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ef8:	4649      	mov	r1, r9
 8002efa:	008b      	lsls	r3, r1, #2
 8002efc:	4641      	mov	r1, r8
 8002efe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f02:	4641      	mov	r1, r8
 8002f04:	008a      	lsls	r2, r1, #2
 8002f06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f0a:	f7fd f9d3 	bl	80002b4 <__aeabi_uldivmod>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <UART_SetConfig+0x504>)
 8002f14:	fba3 1302 	umull	r1, r3, r3, r2
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	2164      	movs	r1, #100	; 0x64
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	3332      	adds	r3, #50	; 0x32
 8002f26:	4a34      	ldr	r2, [pc, #208]	; (8002ff8 <UART_SetConfig+0x504>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	095b      	lsrs	r3, r3, #5
 8002f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f32:	441c      	add	r4, r3
 8002f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f38:	2200      	movs	r2, #0
 8002f3a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f3c:	677a      	str	r2, [r7, #116]	; 0x74
 8002f3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f42:	4642      	mov	r2, r8
 8002f44:	464b      	mov	r3, r9
 8002f46:	1891      	adds	r1, r2, r2
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	415b      	adcs	r3, r3
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f52:	4641      	mov	r1, r8
 8002f54:	1851      	adds	r1, r2, r1
 8002f56:	6039      	str	r1, [r7, #0]
 8002f58:	4649      	mov	r1, r9
 8002f5a:	414b      	adcs	r3, r1
 8002f5c:	607b      	str	r3, [r7, #4]
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f6a:	4659      	mov	r1, fp
 8002f6c:	00cb      	lsls	r3, r1, #3
 8002f6e:	4651      	mov	r1, sl
 8002f70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f74:	4651      	mov	r1, sl
 8002f76:	00ca      	lsls	r2, r1, #3
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4642      	mov	r2, r8
 8002f80:	189b      	adds	r3, r3, r2
 8002f82:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f84:	464b      	mov	r3, r9
 8002f86:	460a      	mov	r2, r1
 8002f88:	eb42 0303 	adc.w	r3, r2, r3
 8002f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	663b      	str	r3, [r7, #96]	; 0x60
 8002f98:	667a      	str	r2, [r7, #100]	; 0x64
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fa6:	4649      	mov	r1, r9
 8002fa8:	008b      	lsls	r3, r1, #2
 8002faa:	4641      	mov	r1, r8
 8002fac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fb0:	4641      	mov	r1, r8
 8002fb2:	008a      	lsls	r2, r1, #2
 8002fb4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fb8:	f7fd f97c 	bl	80002b4 <__aeabi_uldivmod>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <UART_SetConfig+0x504>)
 8002fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2164      	movs	r1, #100	; 0x64
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	3332      	adds	r3, #50	; 0x32
 8002fd4:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <UART_SetConfig+0x504>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	f003 020f 	and.w	r2, r3, #15
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4422      	add	r2, r4
 8002fe8:	609a      	str	r2, [r3, #8]
}
 8002fea:	bf00      	nop
 8002fec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ff6:	bf00      	nop
 8002ff8:	51eb851f 	.word	0x51eb851f

08002ffc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	f107 001c 	add.w	r0, r7, #28
 800300a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	2b01      	cmp	r3, #1
 8003012:	d122      	bne.n	800305a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800303c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303e:	2b01      	cmp	r3, #1
 8003040:	d105      	bne.n	800304e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fa9c 	bl	800358c <USB_CoreReset>
 8003054:	4603      	mov	r3, r0
 8003056:	73fb      	strb	r3, [r7, #15]
 8003058:	e01a      	b.n	8003090 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fa90 	bl	800358c <USB_CoreReset>
 800306c:	4603      	mov	r3, r0
 800306e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	639a      	str	r2, [r3, #56]	; 0x38
 8003082:	e005      	b.n	8003090 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	2b01      	cmp	r3, #1
 8003094:	d10b      	bne.n	80030ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f043 0206 	orr.w	r2, r3, #6
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f043 0220 	orr.w	r2, r3, #32
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030ba:	b004      	add	sp, #16
 80030bc:	4770      	bx	lr

080030be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 0201 	bic.w	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d115      	bne.n	800312e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800310e:	2001      	movs	r0, #1
 8003110:	f7fd fe96 	bl	8000e40 <HAL_Delay>
      ms++;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	3301      	adds	r3, #1
 8003118:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fa28 	bl	8003570 <USB_GetMode>
 8003120:	4603      	mov	r3, r0
 8003122:	2b01      	cmp	r3, #1
 8003124:	d01e      	beq.n	8003164 <USB_SetCurrentMode+0x84>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b31      	cmp	r3, #49	; 0x31
 800312a:	d9f0      	bls.n	800310e <USB_SetCurrentMode+0x2e>
 800312c:	e01a      	b.n	8003164 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d115      	bne.n	8003160 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003140:	2001      	movs	r0, #1
 8003142:	f7fd fe7d 	bl	8000e40 <HAL_Delay>
      ms++;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	3301      	adds	r3, #1
 800314a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 fa0f 	bl	8003570 <USB_GetMode>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <USB_SetCurrentMode+0x84>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b31      	cmp	r3, #49	; 0x31
 800315c:	d9f0      	bls.n	8003140 <USB_SetCurrentMode+0x60>
 800315e:	e001      	b.n	8003164 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e005      	b.n	8003170 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b32      	cmp	r3, #50	; 0x32
 8003168:	d101      	bne.n	800316e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003178:	b084      	sub	sp, #16
 800317a:	b580      	push	{r7, lr}
 800317c:	b086      	sub	sp, #24
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	e009      	b.n	80031ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	3340      	adds	r3, #64	; 0x40
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	2200      	movs	r2, #0
 80031a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	3301      	adds	r3, #1
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b0e      	cmp	r3, #14
 80031b0:	d9f2      	bls.n	8003198 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80031b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d11c      	bne.n	80031f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c6:	f043 0302 	orr.w	r3, r3, #2
 80031ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e005      	b.n	80031fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003204:	461a      	mov	r2, r3
 8003206:	2300      	movs	r3, #0
 8003208:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003210:	4619      	mov	r1, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003218:	461a      	mov	r2, r3
 800321a:	680b      	ldr	r3, [r1, #0]
 800321c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003220:	2b01      	cmp	r3, #1
 8003222:	d10c      	bne.n	800323e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d104      	bne.n	8003234 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800322a:	2100      	movs	r1, #0
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f965 	bl	80034fc <USB_SetDevSpeed>
 8003232:	e008      	b.n	8003246 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003234:	2101      	movs	r1, #1
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f960 	bl	80034fc <USB_SetDevSpeed>
 800323c:	e003      	b.n	8003246 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800323e:	2103      	movs	r1, #3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f95b 	bl	80034fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003246:	2110      	movs	r1, #16
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f8f3 	bl	8003434 <USB_FlushTxFifo>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f91f 	bl	800349c <USB_FlushRxFifo>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800326e:	461a      	mov	r2, r3
 8003270:	2300      	movs	r3, #0
 8003272:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327a:	461a      	mov	r2, r3
 800327c:	2300      	movs	r3, #0
 800327e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003286:	461a      	mov	r2, r3
 8003288:	2300      	movs	r3, #0
 800328a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	e043      	b.n	800331a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4413      	add	r3, r2
 800329a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032a8:	d118      	bne.n	80032dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032bc:	461a      	mov	r2, r3
 80032be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	e013      	b.n	80032ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d2:	461a      	mov	r2, r3
 80032d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e008      	b.n	80032ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e8:	461a      	mov	r2, r3
 80032ea:	2300      	movs	r3, #0
 80032ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032fa:	461a      	mov	r2, r3
 80032fc:	2300      	movs	r3, #0
 80032fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800330c:	461a      	mov	r2, r3
 800330e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003312:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	3301      	adds	r3, #1
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	429a      	cmp	r2, r3
 8003320:	d3b7      	bcc.n	8003292 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	e043      	b.n	80033b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800333a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800333e:	d118      	bne.n	8003372 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4413      	add	r3, r2
 800334e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003352:	461a      	mov	r2, r3
 8003354:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e013      	b.n	8003384 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003368:	461a      	mov	r2, r3
 800336a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	e008      	b.n	8003384 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4413      	add	r3, r2
 800337a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337e:	461a      	mov	r2, r3
 8003380:	2300      	movs	r3, #0
 8003382:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003390:	461a      	mov	r2, r3
 8003392:	2300      	movs	r3, #0
 8003394:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a2:	461a      	mov	r2, r3
 80033a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	3301      	adds	r3, #1
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d3b7      	bcc.n	8003328 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80033d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f043 0210 	orr.w	r2, r3, #16
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699a      	ldr	r2, [r3, #24]
 80033f0:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <USB_DevInit+0x2b8>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f043 0208 	orr.w	r2, r3, #8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800340a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340c:	2b01      	cmp	r3, #1
 800340e:	d107      	bne.n	8003420 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003418:	f043 0304 	orr.w	r3, r3, #4
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003420:	7dfb      	ldrb	r3, [r7, #23]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800342c:	b004      	add	sp, #16
 800342e:	4770      	bx	lr
 8003430:	803c3800 	.word	0x803c3800

08003434 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3301      	adds	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4a13      	ldr	r2, [pc, #76]	; (8003498 <USB_FlushTxFifo+0x64>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d901      	bls.n	8003454 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e01b      	b.n	800348c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	daf2      	bge.n	8003442 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	019b      	lsls	r3, r3, #6
 8003464:	f043 0220 	orr.w	r2, r3, #32
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3301      	adds	r3, #1
 8003470:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4a08      	ldr	r2, [pc, #32]	; (8003498 <USB_FlushTxFifo+0x64>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e006      	b.n	800348c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b20      	cmp	r3, #32
 8003488:	d0f0      	beq.n	800346c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	00030d40 	.word	0x00030d40

0800349c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3301      	adds	r3, #1
 80034ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4a11      	ldr	r2, [pc, #68]	; (80034f8 <USB_FlushRxFifo+0x5c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e018      	b.n	80034ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	daf2      	bge.n	80034a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2210      	movs	r2, #16
 80034ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3301      	adds	r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4a08      	ldr	r2, [pc, #32]	; (80034f8 <USB_FlushRxFifo+0x5c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e006      	b.n	80034ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d0f0      	beq.n	80034cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	00030d40 	.word	0x00030d40

080034fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	68f9      	ldr	r1, [r7, #12]
 8003518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800352e:	b480      	push	{r7}
 8003530:	b085      	sub	sp, #20
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003548:	f023 0303 	bic.w	r3, r3, #3
 800354c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800355c:	f043 0302 	orr.w	r3, r3, #2
 8003560:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f003 0301 	and.w	r3, r3, #1
}
 8003580:	4618      	mov	r0, r3
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3301      	adds	r3, #1
 800359c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4a13      	ldr	r2, [pc, #76]	; (80035f0 <USB_CoreReset+0x64>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e01b      	b.n	80035e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	daf2      	bge.n	8003598 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f043 0201 	orr.w	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3301      	adds	r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <USB_CoreReset+0x64>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d901      	bls.n	80035d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e006      	b.n	80035e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d0f0      	beq.n	80035c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	00030d40 	.word	0x00030d40

080035f4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f103 0208 	add.w	r2, r3, #8
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800360c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f103 0208 	add.w	r2, r3, #8
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f103 0208 	add.w	r2, r3, #8
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800364e:	b480      	push	{r7}
 8003650:	b085      	sub	sp, #20
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003664:	d103      	bne.n	800366e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e00c      	b.n	8003688 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3308      	adds	r3, #8
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	e002      	b.n	800367c <vListInsert+0x2e>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	429a      	cmp	r2, r3
 8003686:	d2f6      	bcs.n	8003676 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	601a      	str	r2, [r3, #0]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6892      	ldr	r2, [r2, #8]
 80036d6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6852      	ldr	r2, [r2, #4]
 80036e0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d103      	bne.n	80036f4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	1e5a      	subs	r2, r3, #1
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800371e:	2301      	movs	r3, #1
 8003720:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10a      	bne.n	8003742 <xQueueGenericReset+0x2e>
        __asm volatile
 800372c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	60fb      	str	r3, [r7, #12]
    }
 800373e:	bf00      	nop
 8003740:	e7fe      	b.n	8003740 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d05d      	beq.n	8003804 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800374c:	2b00      	cmp	r3, #0
 800374e:	d059      	beq.n	8003804 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	2100      	movs	r1, #0
 800375a:	fba3 2302 	umull	r2, r3, r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d000      	beq.n	8003764 <xQueueGenericReset+0x50>
 8003762:	2101      	movs	r1, #1
 8003764:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003766:	2b00      	cmp	r3, #0
 8003768:	d14c      	bne.n	8003804 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800376a:	f001 feeb 	bl	8005544 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003776:	6939      	ldr	r1, [r7, #16]
 8003778:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	441a      	add	r2, r3
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2200      	movs	r2, #0
 8003788:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	3b01      	subs	r3, #1
 800379c:	6939      	ldr	r1, [r7, #16]
 800379e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	441a      	add	r2, r3
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	22ff      	movs	r2, #255	; 0xff
 80037ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	22ff      	movs	r2, #255	; 0xff
 80037b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d114      	bne.n	80037ea <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01a      	beq.n	80037fe <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	3310      	adds	r3, #16
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 ffdb 	bl	8004788 <xTaskRemoveFromEventList>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d012      	beq.n	80037fe <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80037d8:	4b15      	ldr	r3, [pc, #84]	; (8003830 <xQueueGenericReset+0x11c>)
 80037da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	e009      	b.n	80037fe <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	3310      	adds	r3, #16
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff ff00 	bl	80035f4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	3324      	adds	r3, #36	; 0x24
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fefb 	bl	80035f4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80037fe:	f001 fed1 	bl	80055a4 <vPortExitCritical>
 8003802:	e001      	b.n	8003808 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10a      	bne.n	8003824 <xQueueGenericReset+0x110>
        __asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	60bb      	str	r3, [r7, #8]
    }
 8003820:	bf00      	nop
 8003822:	e7fe      	b.n	8003822 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003824:	697b      	ldr	r3, [r7, #20]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	e000ed04 	.word	0xe000ed04

08003834 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	; 0x28
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	4613      	mov	r3, r2
 8003840:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d02e      	beq.n	80038aa <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800384c:	2100      	movs	r1, #0
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	fba3 2302 	umull	r2, r3, r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d000      	beq.n	800385c <xQueueGenericCreate+0x28>
 800385a:	2101      	movs	r1, #1
 800385c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800385e:	2b00      	cmp	r3, #0
 8003860:	d123      	bne.n	80038aa <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800386a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800386e:	d81c      	bhi.n	80038aa <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	fb02 f303 	mul.w	r3, r2, r3
 8003878:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	3350      	adds	r3, #80	; 0x50
 800387e:	4618      	mov	r0, r3
 8003880:	f001 ff8c 	bl	800579c <pvPortMalloc>
 8003884:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01c      	beq.n	80038c6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	3350      	adds	r3, #80	; 0x50
 8003894:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003896:	79fa      	ldrb	r2, [r7, #7]
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	4613      	mov	r3, r2
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f814 	bl	80038d0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80038a8:	e00d      	b.n	80038c6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10a      	bne.n	80038c6 <xQueueGenericCreate+0x92>
        __asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	613b      	str	r3, [r7, #16]
    }
 80038c2:	bf00      	nop
 80038c4:	e7fe      	b.n	80038c4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80038c6:	69fb      	ldr	r3, [r7, #28]
    }
 80038c8:	4618      	mov	r0, r3
 80038ca:	3720      	adds	r7, #32
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d103      	bne.n	80038ec <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	e002      	b.n	80038f2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038fe:	2101      	movs	r1, #1
 8003900:	69b8      	ldr	r0, [r7, #24]
 8003902:	f7ff ff07 	bl	8003714 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	68f9      	ldr	r1, [r7, #12]
 8003914:	2073      	movs	r0, #115	; 0x73
 8003916:	f003 f883 	bl	8006a20 <SEGGER_SYSVIEW_RecordU32x3>
}
 800391a:	bf00      	nop
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003924:	b590      	push	{r4, r7, lr}
 8003926:	b08f      	sub	sp, #60	; 0x3c
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003930:	2300      	movs	r3, #0
 8003932:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10a      	bne.n	8003954 <xQueueReceive+0x30>
        __asm volatile
 800393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	623b      	str	r3, [r7, #32]
    }
 8003950:	bf00      	nop
 8003952:	e7fe      	b.n	8003952 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <xQueueReceive+0x3e>
 800395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <xQueueReceive+0x42>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <xQueueReceive+0x44>
 8003966:	2300      	movs	r3, #0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <xQueueReceive+0x5e>
        __asm volatile
 800396c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003970:	f383 8811 	msr	BASEPRI, r3
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	61fb      	str	r3, [r7, #28]
    }
 800397e:	bf00      	nop
 8003980:	e7fe      	b.n	8003980 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003982:	f001 f913 	bl	8004bac <xTaskGetSchedulerState>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d102      	bne.n	8003992 <xQueueReceive+0x6e>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <xQueueReceive+0x72>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <xQueueReceive+0x74>
 8003996:	2300      	movs	r3, #0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10a      	bne.n	80039b2 <xQueueReceive+0x8e>
        __asm volatile
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	61bb      	str	r3, [r7, #24]
    }
 80039ae:	bf00      	nop
 80039b0:	e7fe      	b.n	80039b0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80039b2:	f001 fdc7 	bl	8005544 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d02f      	beq.n	8003a22 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039c6:	f000 f8bd 	bl	8003b44 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	4618      	mov	r0, r3
 80039ce:	f003 fd53 	bl	8007478 <SEGGER_SYSVIEW_ShrinkId>
 80039d2:	4604      	mov	r4, r0
 80039d4:	2000      	movs	r0, #0
 80039d6:	f003 fd4f 	bl	8007478 <SEGGER_SYSVIEW_ShrinkId>
 80039da:	4602      	mov	r2, r0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2101      	movs	r1, #1
 80039e0:	9100      	str	r1, [sp, #0]
 80039e2:	4621      	mov	r1, r4
 80039e4:	205c      	movs	r0, #92	; 0x5c
 80039e6:	f003 f891 	bl	8006b0c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	1e5a      	subs	r2, r3, #1
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00f      	beq.n	8003a1a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	3310      	adds	r3, #16
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fec2 	bl	8004788 <xTaskRemoveFromEventList>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003a0a:	4b4d      	ldr	r3, [pc, #308]	; (8003b40 <xQueueReceive+0x21c>)
 8003a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003a1a:	f001 fdc3 	bl	80055a4 <vPortExitCritical>
                return pdPASS;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e08a      	b.n	8003b38 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d113      	bne.n	8003a50 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003a28:	f001 fdbc 	bl	80055a4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f003 fd22 	bl	8007478 <SEGGER_SYSVIEW_ShrinkId>
 8003a34:	4604      	mov	r4, r0
 8003a36:	2000      	movs	r0, #0
 8003a38:	f003 fd1e 	bl	8007478 <SEGGER_SYSVIEW_ShrinkId>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2101      	movs	r1, #1
 8003a42:	9100      	str	r1, [sp, #0]
 8003a44:	4621      	mov	r1, r4
 8003a46:	205c      	movs	r0, #92	; 0x5c
 8003a48:	f003 f860 	bl	8006b0c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e073      	b.n	8003b38 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003a56:	f107 0310 	add.w	r3, r7, #16
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 ff6c 	bl	8004938 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003a64:	f001 fd9e 	bl	80055a4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003a68:	f000 fb6e 	bl	8004148 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003a6c:	f001 fd6a 	bl	8005544 <vPortEnterCritical>
 8003a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a76:	b25b      	sxtb	r3, r3
 8003a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a7c:	d103      	bne.n	8003a86 <xQueueReceive+0x162>
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a8c:	b25b      	sxtb	r3, r3
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a92:	d103      	bne.n	8003a9c <xQueueReceive+0x178>
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a9c:	f001 fd82 	bl	80055a4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aa0:	1d3a      	adds	r2, r7, #4
 8003aa2:	f107 0310 	add.w	r3, r7, #16
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 ff5b 	bl	8004964 <xTaskCheckForTimeOut>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d124      	bne.n	8003afe <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ab6:	f000 f8bd 	bl	8003c34 <prvIsQueueEmpty>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d018      	beq.n	8003af2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac2:	3324      	adds	r3, #36	; 0x24
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fdf1 	bl	80046b0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ad0:	f000 f85e 	bl	8003b90 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003ad4:	f000 fb46 	bl	8004164 <xTaskResumeAll>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f47f af69 	bne.w	80039b2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003ae0:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <xQueueReceive+0x21c>)
 8003ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	e75f      	b.n	80039b2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003af4:	f000 f84c 	bl	8003b90 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003af8:	f000 fb34 	bl	8004164 <xTaskResumeAll>
 8003afc:	e759      	b.n	80039b2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b00:	f000 f846 	bl	8003b90 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003b04:	f000 fb2e 	bl	8004164 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b0a:	f000 f893 	bl	8003c34 <prvIsQueueEmpty>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f43f af4e 	beq.w	80039b2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f003 fcad 	bl	8007478 <SEGGER_SYSVIEW_ShrinkId>
 8003b1e:	4604      	mov	r4, r0
 8003b20:	2000      	movs	r0, #0
 8003b22:	f003 fca9 	bl	8007478 <SEGGER_SYSVIEW_ShrinkId>
 8003b26:	4602      	mov	r2, r0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	9100      	str	r1, [sp, #0]
 8003b2e:	4621      	mov	r1, r4
 8003b30:	205c      	movs	r0, #92	; 0x5c
 8003b32:	f002 ffeb 	bl	8006b0c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003b36:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3734      	adds	r7, #52	; 0x34
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd90      	pop	{r4, r7, pc}
 8003b40:	e000ed04 	.word	0xe000ed04

08003b44 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d018      	beq.n	8003b88 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	441a      	add	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d303      	bcc.n	8003b78 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68d9      	ldr	r1, [r3, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	461a      	mov	r2, r3
 8003b82:	6838      	ldr	r0, [r7, #0]
 8003b84:	f003 fe06 	bl	8007794 <memcpy>
    }
}
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003b98:	f001 fcd4 	bl	8005544 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ba2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ba4:	e011      	b.n	8003bca <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d012      	beq.n	8003bd4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3324      	adds	r3, #36	; 0x24
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fde8 	bl	8004788 <xTaskRemoveFromEventList>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003bbe:	f000 ff37 	bl	8004a30 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	dce9      	bgt.n	8003ba6 <prvUnlockQueue+0x16>
 8003bd2:	e000      	b.n	8003bd6 <prvUnlockQueue+0x46>
                    break;
 8003bd4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	22ff      	movs	r2, #255	; 0xff
 8003bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003bde:	f001 fce1 	bl	80055a4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003be2:	f001 fcaf 	bl	8005544 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bec:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bee:	e011      	b.n	8003c14 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d012      	beq.n	8003c1e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3310      	adds	r3, #16
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fdc3 	bl	8004788 <xTaskRemoveFromEventList>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003c08:	f000 ff12 	bl	8004a30 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003c0c:	7bbb      	ldrb	r3, [r7, #14]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	dce9      	bgt.n	8003bf0 <prvUnlockQueue+0x60>
 8003c1c:	e000      	b.n	8003c20 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003c1e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	22ff      	movs	r2, #255	; 0xff
 8003c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003c28:	f001 fcbc 	bl	80055a4 <vPortExitCritical>
}
 8003c2c:	bf00      	nop
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003c3c:	f001 fc82 	bl	8005544 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	e001      	b.n	8003c52 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003c52:	f001 fca7 	bl	80055a4 <vPortExitCritical>

    return xReturn;
 8003c56:	68fb      	ldr	r3, [r7, #12]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	60fb      	str	r3, [r7, #12]
    }
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d024      	beq.n	8003cda <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	e01e      	b.n	8003cd4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003c96:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <vQueueAddToRegistry+0xa8>)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d105      	bne.n	8003cb2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <vQueueAddToRegistry+0xa8>)
 8003cac:	4413      	add	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
                    break;
 8003cb0:	e013      	b.n	8003cda <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10a      	bne.n	8003cce <vQueueAddToRegistry+0x6e>
 8003cb8:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <vQueueAddToRegistry+0xa8>)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d104      	bne.n	8003cce <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4a0f      	ldr	r2, [pc, #60]	; (8003d08 <vQueueAddToRegistry+0xa8>)
 8003cca:	4413      	add	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2b07      	cmp	r3, #7
 8003cd8:	d9dd      	bls.n	8003c96 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00f      	beq.n	8003d00 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f003 fbc2 	bl	8007478 <SEGGER_SYSVIEW_ShrinkId>
 8003cf4:	4601      	mov	r1, r0
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2071      	movs	r0, #113	; 0x71
 8003cfc:	f002 fe36 	bl	800696c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8003d00:	bf00      	nop
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000630 	.word	0x20000630

08003d0c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003d1c:	f001 fc12 	bl	8005544 <vPortEnterCritical>
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d26:	b25b      	sxtb	r3, r3
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d2c:	d103      	bne.n	8003d36 <vQueueWaitForMessageRestricted+0x2a>
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d3c:	b25b      	sxtb	r3, r3
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d42:	d103      	bne.n	8003d4c <vQueueWaitForMessageRestricted+0x40>
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d4c:	f001 fc2a 	bl	80055a4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d106      	bne.n	8003d66 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	3324      	adds	r3, #36	; 0x24
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fcc9 	bl	80046f8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003d66:	6978      	ldr	r0, [r7, #20]
 8003d68:	f7ff ff12 	bl	8003b90 <prvUnlockQueue>
    }
 8003d6c:	bf00      	nop
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08c      	sub	sp, #48	; 0x30
 8003d78:	af04      	add	r7, sp, #16
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f001 fd07 	bl	800579c <pvPortMalloc>
 8003d8e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d013      	beq.n	8003dbe <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d96:	2058      	movs	r0, #88	; 0x58
 8003d98:	f001 fd00 	bl	800579c <pvPortMalloc>
 8003d9c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003da4:	2258      	movs	r2, #88	; 0x58
 8003da6:	2100      	movs	r1, #0
 8003da8:	69f8      	ldr	r0, [r7, #28]
 8003daa:	f003 fd01 	bl	80077b0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
 8003db4:	e005      	b.n	8003dc2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003db6:	6978      	ldr	r0, [r7, #20]
 8003db8:	f001 fdaa 	bl	8005910 <vPortFree>
 8003dbc:	e001      	b.n	8003dc2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d013      	beq.n	8003df0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003dc8:	88fa      	ldrh	r2, [r7, #6]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	9303      	str	r3, [sp, #12]
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	9302      	str	r3, [sp, #8]
 8003dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 f80e 	bl	8003e00 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003de4:	69f8      	ldr	r0, [r7, #28]
 8003de6:	f000 f899 	bl	8003f1c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003dea:	2301      	movs	r3, #1
 8003dec:	61bb      	str	r3, [r7, #24]
 8003dee:	e002      	b.n	8003df6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003df4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003df6:	69bb      	ldr	r3, [r7, #24]
    }
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3720      	adds	r7, #32
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	461a      	mov	r2, r3
 8003e18:	21a5      	movs	r1, #165	; 0xa5
 8003e1a:	f003 fcc9 	bl	80077b0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f023 0307 	bic.w	r3, r3, #7
 8003e36:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <prvInitialiseNewTask+0x58>
        __asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	617b      	str	r3, [r7, #20]
    }
 8003e54:	bf00      	nop
 8003e56:	e7fe      	b.n	8003e56 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d01e      	beq.n	8003e9c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	e012      	b.n	8003e8a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	7819      	ldrb	r1, [r3, #0]
 8003e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	4413      	add	r3, r2
 8003e72:	3334      	adds	r3, #52	; 0x34
 8003e74:	460a      	mov	r2, r1
 8003e76:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d006      	beq.n	8003e92 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	3301      	adds	r3, #1
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	2b09      	cmp	r3, #9
 8003e8e:	d9e9      	bls.n	8003e64 <prvInitialiseNewTask+0x64>
 8003e90:	e000      	b.n	8003e94 <prvInitialiseNewTask+0x94>
            {
                break;
 8003e92:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d90a      	bls.n	8003eb8 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	613b      	str	r3, [r7, #16]
    }
 8003eb4:	bf00      	nop
 8003eb6:	e7fe      	b.n	8003eb6 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d901      	bls.n	8003ec2 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ebe:	2304      	movs	r3, #4
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ecc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff fbae 	bl	8003634 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	3318      	adds	r3, #24
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fba9 	bl	8003634 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	f1c3 0205 	rsb	r2, r3, #5
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	69b8      	ldr	r0, [r7, #24]
 8003efe:	f001 f977 	bl	80051f0 <pxPortInitialiseStack>
 8003f02:	4602      	mov	r2, r0
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f12:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003f14:	bf00      	nop
 8003f16:	3720      	adds	r7, #32
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003f1c:	b5b0      	push	{r4, r5, r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003f24:	f001 fb0e 	bl	8005544 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003f28:	4b4f      	ldr	r3, [pc, #316]	; (8004068 <prvAddNewTaskToReadyList+0x14c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	4a4e      	ldr	r2, [pc, #312]	; (8004068 <prvAddNewTaskToReadyList+0x14c>)
 8003f30:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003f32:	4b4e      	ldr	r3, [pc, #312]	; (800406c <prvAddNewTaskToReadyList+0x150>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d109      	bne.n	8003f4e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003f3a:	4a4c      	ldr	r2, [pc, #304]	; (800406c <prvAddNewTaskToReadyList+0x150>)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f40:	4b49      	ldr	r3, [pc, #292]	; (8004068 <prvAddNewTaskToReadyList+0x14c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d110      	bne.n	8003f6a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003f48:	f000 fd96 	bl	8004a78 <prvInitialiseTaskLists>
 8003f4c:	e00d      	b.n	8003f6a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003f4e:	4b48      	ldr	r3, [pc, #288]	; (8004070 <prvAddNewTaskToReadyList+0x154>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f56:	4b45      	ldr	r3, [pc, #276]	; (800406c <prvAddNewTaskToReadyList+0x150>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d802      	bhi.n	8003f6a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003f64:	4a41      	ldr	r2, [pc, #260]	; (800406c <prvAddNewTaskToReadyList+0x150>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003f6a:	4b42      	ldr	r3, [pc, #264]	; (8004074 <prvAddNewTaskToReadyList+0x158>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	4a40      	ldr	r2, [pc, #256]	; (8004074 <prvAddNewTaskToReadyList+0x158>)
 8003f72:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f74:	4b3f      	ldr	r3, [pc, #252]	; (8004074 <prvAddNewTaskToReadyList+0x158>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d016      	beq.n	8003fb0 <prvAddNewTaskToReadyList+0x94>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f003 f9b1 	bl	80072ec <SEGGER_SYSVIEW_OnTaskCreate>
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	461d      	mov	r5, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	461c      	mov	r4, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	1ae3      	subs	r3, r4, r3
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	462b      	mov	r3, r5
 8003fac:	f001 fe72 	bl	8005c94 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f003 fa1e 	bl	80073f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	409a      	lsls	r2, r3
 8003fc0:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <prvAddNewTaskToReadyList+0x15c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	4a2c      	ldr	r2, [pc, #176]	; (8004078 <prvAddNewTaskToReadyList+0x15c>)
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fce:	492b      	ldr	r1, [pc, #172]	; (800407c <prvAddNewTaskToReadyList+0x160>)
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	3304      	adds	r3, #4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	609a      	str	r2, [r3, #8]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	60da      	str	r2, [r3, #12]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	3204      	adds	r2, #4
 8003ff6:	605a      	str	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	1d1a      	adds	r2, r3, #4
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4a1b      	ldr	r2, [pc, #108]	; (800407c <prvAddNewTaskToReadyList+0x160>)
 800400e:	441a      	add	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	615a      	str	r2, [r3, #20]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004018:	4918      	ldr	r1, [pc, #96]	; (800407c <prvAddNewTaskToReadyList+0x160>)
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	1c59      	adds	r1, r3, #1
 8004028:	4814      	ldr	r0, [pc, #80]	; (800407c <prvAddNewTaskToReadyList+0x160>)
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4403      	add	r3, r0
 8004034:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004036:	f001 fab5 	bl	80055a4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800403a:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <prvAddNewTaskToReadyList+0x154>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00e      	beq.n	8004060 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004042:	4b0a      	ldr	r3, [pc, #40]	; (800406c <prvAddNewTaskToReadyList+0x150>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	429a      	cmp	r2, r3
 800404e:	d207      	bcs.n	8004060 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <prvAddNewTaskToReadyList+0x164>)
 8004052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004060:	bf00      	nop
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bdb0      	pop	{r4, r5, r7, pc}
 8004068:	20000748 	.word	0x20000748
 800406c:	20000670 	.word	0x20000670
 8004070:	20000754 	.word	0x20000754
 8004074:	20000764 	.word	0x20000764
 8004078:	20000750 	.word	0x20000750
 800407c:	20000674 	.word	0x20000674
 8004080:	e000ed04 	.word	0xe000ed04

08004084 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800408a:	4b27      	ldr	r3, [pc, #156]	; (8004128 <vTaskStartScheduler+0xa4>)
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	2300      	movs	r3, #0
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	2300      	movs	r3, #0
 8004094:	2282      	movs	r2, #130	; 0x82
 8004096:	4925      	ldr	r1, [pc, #148]	; (800412c <vTaskStartScheduler+0xa8>)
 8004098:	4825      	ldr	r0, [pc, #148]	; (8004130 <vTaskStartScheduler+0xac>)
 800409a:	f7ff fe6b 	bl	8003d74 <xTaskCreate>
 800409e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d102      	bne.n	80040ac <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80040a6:	f000 fe1f 	bl	8004ce8 <xTimerCreateTimerTask>
 80040aa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d124      	bne.n	80040fc <vTaskStartScheduler+0x78>
        __asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	60bb      	str	r3, [r7, #8]
    }
 80040c4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80040c6:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <vTaskStartScheduler+0xb0>)
 80040c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040cc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80040ce:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <vTaskStartScheduler+0xb4>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040d4:	4b19      	ldr	r3, [pc, #100]	; (800413c <vTaskStartScheduler+0xb8>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80040da:	4b19      	ldr	r3, [pc, #100]	; (8004140 <vTaskStartScheduler+0xbc>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4b12      	ldr	r3, [pc, #72]	; (8004128 <vTaskStartScheduler+0xa4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d102      	bne.n	80040ec <vTaskStartScheduler+0x68>
 80040e6:	f003 f8e5 	bl	80072b4 <SEGGER_SYSVIEW_OnIdle>
 80040ea:	e004      	b.n	80040f6 <vTaskStartScheduler+0x72>
 80040ec:	4b14      	ldr	r3, [pc, #80]	; (8004140 <vTaskStartScheduler+0xbc>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f003 f93d 	bl	8007370 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80040f6:	f001 f905 	bl	8005304 <xPortStartScheduler>
 80040fa:	e00e      	b.n	800411a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004102:	d10a      	bne.n	800411a <vTaskStartScheduler+0x96>
        __asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	607b      	str	r3, [r7, #4]
    }
 8004116:	bf00      	nop
 8004118:	e7fe      	b.n	8004118 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <vTaskStartScheduler+0xc0>)
 800411c:	681b      	ldr	r3, [r3, #0]
}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	2000076c 	.word	0x2000076c
 800412c:	08008200 	.word	0x08008200
 8004130:	08004a49 	.word	0x08004a49
 8004134:	20000768 	.word	0x20000768
 8004138:	20000754 	.word	0x20000754
 800413c:	2000074c 	.word	0x2000074c
 8004140:	20000670 	.word	0x20000670
 8004144:	2000000c 	.word	0x2000000c

08004148 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <vTaskSuspendAll+0x18>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3301      	adds	r3, #1
 8004152:	4a03      	ldr	r2, [pc, #12]	; (8004160 <vTaskSuspendAll+0x18>)
 8004154:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004156:	bf00      	nop
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	20000770 	.word	0x20000770

08004164 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800416e:	2300      	movs	r3, #0
 8004170:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004172:	4b73      	ldr	r3, [pc, #460]	; (8004340 <xTaskResumeAll+0x1dc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <xTaskResumeAll+0x2c>
        __asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	607b      	str	r3, [r7, #4]
    }
 800418c:	bf00      	nop
 800418e:	e7fe      	b.n	800418e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004190:	f001 f9d8 	bl	8005544 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004194:	4b6a      	ldr	r3, [pc, #424]	; (8004340 <xTaskResumeAll+0x1dc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3b01      	subs	r3, #1
 800419a:	4a69      	ldr	r2, [pc, #420]	; (8004340 <xTaskResumeAll+0x1dc>)
 800419c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800419e:	4b68      	ldr	r3, [pc, #416]	; (8004340 <xTaskResumeAll+0x1dc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f040 80c4 	bne.w	8004330 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041a8:	4b66      	ldr	r3, [pc, #408]	; (8004344 <xTaskResumeAll+0x1e0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80bf 	beq.w	8004330 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041b2:	e08e      	b.n	80042d2 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b4:	4b64      	ldr	r3, [pc, #400]	; (8004348 <xTaskResumeAll+0x1e4>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	6a12      	ldr	r2, [r2, #32]
 80041ca:	609a      	str	r2, [r3, #8]
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	69d2      	ldr	r2, [r2, #28]
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	3318      	adds	r3, #24
 80041de:	429a      	cmp	r2, r3
 80041e0:	d103      	bne.n	80041ea <xTaskResumeAll+0x86>
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	6a1a      	ldr	r2, [r3, #32]
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	2200      	movs	r2, #0
 80041ee:	629a      	str	r2, [r3, #40]	; 0x28
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	1e5a      	subs	r2, r3, #1
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	68d2      	ldr	r2, [r2, #12]
 8004208:	609a      	str	r2, [r3, #8]
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	6892      	ldr	r2, [r2, #8]
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	3304      	adds	r3, #4
 800421c:	429a      	cmp	r2, r3
 800421e:	d103      	bne.n	8004228 <xTaskResumeAll+0xc4>
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	605a      	str	r2, [r3, #4]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2200      	movs	r2, #0
 800422c:	615a      	str	r2, [r3, #20]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	1e5a      	subs	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	4618      	mov	r0, r3
 800423c:	f003 f8da 	bl	80073f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	2201      	movs	r2, #1
 8004246:	409a      	lsls	r2, r3
 8004248:	4b40      	ldr	r3, [pc, #256]	; (800434c <xTaskResumeAll+0x1e8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4313      	orrs	r3, r2
 800424e:	4a3f      	ldr	r2, [pc, #252]	; (800434c <xTaskResumeAll+0x1e8>)
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004256:	493e      	ldr	r1, [pc, #248]	; (8004350 <xTaskResumeAll+0x1ec>)
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	3304      	adds	r3, #4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	609a      	str	r2, [r3, #8]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	60da      	str	r2, [r3, #12]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	3204      	adds	r2, #4
 800427e:	605a      	str	r2, [r3, #4]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	1d1a      	adds	r2, r3, #4
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	609a      	str	r2, [r3, #8]
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4a2e      	ldr	r2, [pc, #184]	; (8004350 <xTaskResumeAll+0x1ec>)
 8004296:	441a      	add	r2, r3
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	615a      	str	r2, [r3, #20]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a0:	492b      	ldr	r1, [pc, #172]	; (8004350 <xTaskResumeAll+0x1ec>)
 80042a2:	4613      	mov	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	1c59      	adds	r1, r3, #1
 80042b0:	4827      	ldr	r0, [pc, #156]	; (8004350 <xTaskResumeAll+0x1ec>)
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4403      	add	r3, r0
 80042bc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c2:	4b24      	ldr	r3, [pc, #144]	; (8004354 <xTaskResumeAll+0x1f0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d302      	bcc.n	80042d2 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80042cc:	4b22      	ldr	r3, [pc, #136]	; (8004358 <xTaskResumeAll+0x1f4>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042d2:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <xTaskResumeAll+0x1e4>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f47f af6c 	bne.w	80041b4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80042e2:	f000 fc47 	bl	8004b74 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80042e6:	4b1d      	ldr	r3, [pc, #116]	; (800435c <xTaskResumeAll+0x1f8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d010      	beq.n	8004314 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80042f2:	f000 f859 	bl	80043a8 <xTaskIncrementTick>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80042fc:	4b16      	ldr	r3, [pc, #88]	; (8004358 <xTaskResumeAll+0x1f4>)
 80042fe:	2201      	movs	r2, #1
 8004300:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	3b01      	subs	r3, #1
 8004306:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f1      	bne.n	80042f2 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800430e:	4b13      	ldr	r3, [pc, #76]	; (800435c <xTaskResumeAll+0x1f8>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004314:	4b10      	ldr	r3, [pc, #64]	; (8004358 <xTaskResumeAll+0x1f4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d009      	beq.n	8004330 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800431c:	2301      	movs	r3, #1
 800431e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <xTaskResumeAll+0x1fc>)
 8004322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004330:	f001 f938 	bl	80055a4 <vPortExitCritical>

    return xAlreadyYielded;
 8004334:	69bb      	ldr	r3, [r7, #24]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3720      	adds	r7, #32
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000770 	.word	0x20000770
 8004344:	20000748 	.word	0x20000748
 8004348:	20000708 	.word	0x20000708
 800434c:	20000750 	.word	0x20000750
 8004350:	20000674 	.word	0x20000674
 8004354:	20000670 	.word	0x20000670
 8004358:	2000075c 	.word	0x2000075c
 800435c:	20000758 	.word	0x20000758
 8004360:	e000ed04 	.word	0xe000ed04

08004364 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800436a:	4b05      	ldr	r3, [pc, #20]	; (8004380 <xTaskGetTickCount+0x1c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004370:	687b      	ldr	r3, [r7, #4]
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	2000074c 	.word	0x2000074c

08004384 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800438a:	f001 f9c7 	bl	800571c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800438e:	2300      	movs	r3, #0
 8004390:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8004392:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <xTaskGetTickCountFromISR+0x20>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004398:	683b      	ldr	r3, [r7, #0]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	2000074c 	.word	0x2000074c

080043a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08a      	sub	sp, #40	; 0x28
 80043ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80043ae:	2300      	movs	r3, #0
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043b2:	4b7f      	ldr	r3, [pc, #508]	; (80045b0 <xTaskIncrementTick+0x208>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f040 80f0 	bne.w	800459c <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043bc:	4b7d      	ldr	r3, [pc, #500]	; (80045b4 <xTaskIncrementTick+0x20c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3301      	adds	r3, #1
 80043c2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80043c4:	4a7b      	ldr	r2, [pc, #492]	; (80045b4 <xTaskIncrementTick+0x20c>)
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d120      	bne.n	8004412 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80043d0:	4b79      	ldr	r3, [pc, #484]	; (80045b8 <xTaskIncrementTick+0x210>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <xTaskIncrementTick+0x48>
        __asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	607b      	str	r3, [r7, #4]
    }
 80043ec:	bf00      	nop
 80043ee:	e7fe      	b.n	80043ee <xTaskIncrementTick+0x46>
 80043f0:	4b71      	ldr	r3, [pc, #452]	; (80045b8 <xTaskIncrementTick+0x210>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	61fb      	str	r3, [r7, #28]
 80043f6:	4b71      	ldr	r3, [pc, #452]	; (80045bc <xTaskIncrementTick+0x214>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a6f      	ldr	r2, [pc, #444]	; (80045b8 <xTaskIncrementTick+0x210>)
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	4a6f      	ldr	r2, [pc, #444]	; (80045bc <xTaskIncrementTick+0x214>)
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	4b6e      	ldr	r3, [pc, #440]	; (80045c0 <xTaskIncrementTick+0x218>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3301      	adds	r3, #1
 800440a:	4a6d      	ldr	r2, [pc, #436]	; (80045c0 <xTaskIncrementTick+0x218>)
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	f000 fbb1 	bl	8004b74 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004412:	4b6c      	ldr	r3, [pc, #432]	; (80045c4 <xTaskIncrementTick+0x21c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6a3a      	ldr	r2, [r7, #32]
 8004418:	429a      	cmp	r2, r3
 800441a:	f0c0 80aa 	bcc.w	8004572 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800441e:	4b66      	ldr	r3, [pc, #408]	; (80045b8 <xTaskIncrementTick+0x210>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d104      	bne.n	8004432 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004428:	4b66      	ldr	r3, [pc, #408]	; (80045c4 <xTaskIncrementTick+0x21c>)
 800442a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800442e:	601a      	str	r2, [r3, #0]
                    break;
 8004430:	e09f      	b.n	8004572 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004432:	4b61      	ldr	r3, [pc, #388]	; (80045b8 <xTaskIncrementTick+0x210>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004442:	6a3a      	ldr	r2, [r7, #32]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	429a      	cmp	r2, r3
 8004448:	d203      	bcs.n	8004452 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800444a:	4a5e      	ldr	r2, [pc, #376]	; (80045c4 <xTaskIncrementTick+0x21c>)
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004450:	e08f      	b.n	8004572 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	68d2      	ldr	r2, [r2, #12]
 8004460:	609a      	str	r2, [r3, #8]
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	6892      	ldr	r2, [r2, #8]
 800446a:	605a      	str	r2, [r3, #4]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	3304      	adds	r3, #4
 8004474:	429a      	cmp	r2, r3
 8004476:	d103      	bne.n	8004480 <xTaskIncrementTick+0xd8>
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	605a      	str	r2, [r3, #4]
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2200      	movs	r2, #0
 8004484:	615a      	str	r2, [r3, #20]
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	1e5a      	subs	r2, r3, #1
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01e      	beq.n	80044d6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	6a12      	ldr	r2, [r2, #32]
 80044a6:	609a      	str	r2, [r3, #8]
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	69d2      	ldr	r2, [r2, #28]
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	3318      	adds	r3, #24
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d103      	bne.n	80044c6 <xTaskIncrementTick+0x11e>
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	6a1a      	ldr	r2, [r3, #32]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	605a      	str	r2, [r3, #4]
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2200      	movs	r2, #0
 80044ca:	629a      	str	r2, [r3, #40]	; 0x28
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	1e5a      	subs	r2, r3, #1
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	4618      	mov	r0, r3
 80044da:	f002 ff8b 	bl	80073f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	2201      	movs	r2, #1
 80044e4:	409a      	lsls	r2, r3
 80044e6:	4b38      	ldr	r3, [pc, #224]	; (80045c8 <xTaskIncrementTick+0x220>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	4a36      	ldr	r2, [pc, #216]	; (80045c8 <xTaskIncrementTick+0x220>)
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	4935      	ldr	r1, [pc, #212]	; (80045cc <xTaskIncrementTick+0x224>)
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	3304      	adds	r3, #4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	60da      	str	r2, [r3, #12]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	3204      	adds	r2, #4
 800451c:	605a      	str	r2, [r3, #4]
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	1d1a      	adds	r2, r3, #4
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	609a      	str	r2, [r3, #8]
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4a26      	ldr	r2, [pc, #152]	; (80045cc <xTaskIncrementTick+0x224>)
 8004534:	441a      	add	r2, r3
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	615a      	str	r2, [r3, #20]
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453e:	4923      	ldr	r1, [pc, #140]	; (80045cc <xTaskIncrementTick+0x224>)
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	1c59      	adds	r1, r3, #1
 800454e:	481f      	ldr	r0, [pc, #124]	; (80045cc <xTaskIncrementTick+0x224>)
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4403      	add	r3, r0
 800455a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004560:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <xTaskIncrementTick+0x228>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	429a      	cmp	r2, r3
 8004568:	f67f af59 	bls.w	800441e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800456c:	2301      	movs	r3, #1
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004570:	e755      	b.n	800441e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004572:	4b17      	ldr	r3, [pc, #92]	; (80045d0 <xTaskIncrementTick+0x228>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004578:	4914      	ldr	r1, [pc, #80]	; (80045cc <xTaskIncrementTick+0x224>)
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d901      	bls.n	800458e <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800458a:	2301      	movs	r3, #1
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800458e:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <xTaskIncrementTick+0x22c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d007      	beq.n	80045a6 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8004596:	2301      	movs	r3, #1
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
 800459a:	e004      	b.n	80045a6 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800459c:	4b0e      	ldr	r3, [pc, #56]	; (80045d8 <xTaskIncrementTick+0x230>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3301      	adds	r3, #1
 80045a2:	4a0d      	ldr	r2, [pc, #52]	; (80045d8 <xTaskIncrementTick+0x230>)
 80045a4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3728      	adds	r7, #40	; 0x28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20000770 	.word	0x20000770
 80045b4:	2000074c 	.word	0x2000074c
 80045b8:	20000700 	.word	0x20000700
 80045bc:	20000704 	.word	0x20000704
 80045c0:	20000760 	.word	0x20000760
 80045c4:	20000768 	.word	0x20000768
 80045c8:	20000750 	.word	0x20000750
 80045cc:	20000674 	.word	0x20000674
 80045d0:	20000670 	.word	0x20000670
 80045d4:	2000075c 	.word	0x2000075c
 80045d8:	20000758 	.word	0x20000758

080045dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045e2:	4b2d      	ldr	r3, [pc, #180]	; (8004698 <vTaskSwitchContext+0xbc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80045ea:	4b2c      	ldr	r3, [pc, #176]	; (800469c <vTaskSwitchContext+0xc0>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80045f0:	e04d      	b.n	800468e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80045f2:	4b2a      	ldr	r3, [pc, #168]	; (800469c <vTaskSwitchContext+0xc0>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f8:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <vTaskSwitchContext+0xc4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	fab3 f383 	clz	r3, r3
 8004604:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004606:	7afb      	ldrb	r3, [r7, #11]
 8004608:	f1c3 031f 	rsb	r3, r3, #31
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	4925      	ldr	r1, [pc, #148]	; (80046a4 <vTaskSwitchContext+0xc8>)
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10a      	bne.n	8004638 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004626:	f383 8811 	msr	BASEPRI, r3
 800462a:	f3bf 8f6f 	isb	sy
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	607b      	str	r3, [r7, #4]
    }
 8004634:	bf00      	nop
 8004636:	e7fe      	b.n	8004636 <vTaskSwitchContext+0x5a>
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <vTaskSwitchContext+0xc8>)
 8004644:	4413      	add	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	3308      	adds	r3, #8
 800465a:	429a      	cmp	r2, r3
 800465c:	d104      	bne.n	8004668 <vTaskSwitchContext+0x8c>
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	605a      	str	r2, [r3, #4]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	4a0e      	ldr	r2, [pc, #56]	; (80046a8 <vTaskSwitchContext+0xcc>)
 8004670:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <vTaskSwitchContext+0xcc>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <vTaskSwitchContext+0xd0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d102      	bne.n	8004684 <vTaskSwitchContext+0xa8>
 800467e:	f002 fe19 	bl	80072b4 <SEGGER_SYSVIEW_OnIdle>
}
 8004682:	e004      	b.n	800468e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8004684:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <vTaskSwitchContext+0xcc>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f002 fe71 	bl	8007370 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800468e:	bf00      	nop
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20000770 	.word	0x20000770
 800469c:	2000075c 	.word	0x2000075c
 80046a0:	20000750 	.word	0x20000750
 80046a4:	20000674 	.word	0x20000674
 80046a8:	20000670 	.word	0x20000670
 80046ac:	2000076c 	.word	0x2000076c

080046b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	60fb      	str	r3, [r7, #12]
    }
 80046d2:	bf00      	nop
 80046d4:	e7fe      	b.n	80046d4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046d6:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <vTaskPlaceOnEventList+0x44>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3318      	adds	r3, #24
 80046dc:	4619      	mov	r1, r3
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fe ffb5 	bl	800364e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046e4:	2101      	movs	r1, #1
 80046e6:	6838      	ldr	r0, [r7, #0]
 80046e8:	f000 fa7e 	bl	8004be8 <prvAddCurrentTaskToDelayedList>
}
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000670 	.word	0x20000670

080046f8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	613b      	str	r3, [r7, #16]
    }
 800471c:	bf00      	nop
 800471e:	e7fe      	b.n	800471e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	4b17      	ldr	r3, [pc, #92]	; (8004784 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	61da      	str	r2, [r3, #28]
 800472e:	4b15      	ldr	r3, [pc, #84]	; (8004784 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	6892      	ldr	r2, [r2, #8]
 8004736:	621a      	str	r2, [r3, #32]
 8004738:	4b12      	ldr	r3, [pc, #72]	; (8004784 <vTaskPlaceOnEventListRestricted+0x8c>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	3218      	adds	r2, #24
 8004742:	605a      	str	r2, [r3, #4]
 8004744:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f103 0218 	add.w	r2, r3, #24
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	609a      	str	r2, [r3, #8]
 8004750:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	629a      	str	r2, [r3, #40]	; 0x28
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8004768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800476c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800476e:	2024      	movs	r0, #36	; 0x24
 8004770:	f002 f8a2 	bl	80068b8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	68b8      	ldr	r0, [r7, #8]
 8004778:	f000 fa36 	bl	8004be8 <prvAddCurrentTaskToDelayedList>
    }
 800477c:	bf00      	nop
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20000670 	.word	0x20000670

08004788 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	; 0x28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10a      	bne.n	80047b4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	60fb      	str	r3, [r7, #12]
    }
 80047b0:	bf00      	nop
 80047b2:	e7fe      	b.n	80047b2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	61fb      	str	r3, [r7, #28]
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	6a3a      	ldr	r2, [r7, #32]
 80047c0:	6a12      	ldr	r2, [r2, #32]
 80047c2:	609a      	str	r2, [r3, #8]
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	6a3a      	ldr	r2, [r7, #32]
 80047ca:	69d2      	ldr	r2, [r2, #28]
 80047cc:	605a      	str	r2, [r3, #4]
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	3318      	adds	r3, #24
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d103      	bne.n	80047e2 <xTaskRemoveFromEventList+0x5a>
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	6a1a      	ldr	r2, [r3, #32]
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	605a      	str	r2, [r3, #4]
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	2200      	movs	r2, #0
 80047e6:	629a      	str	r2, [r3, #40]	; 0x28
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	1e5a      	subs	r2, r3, #1
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047f2:	4b4b      	ldr	r3, [pc, #300]	; (8004920 <xTaskRemoveFromEventList+0x198>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d162      	bne.n	80048c0 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	6a3a      	ldr	r2, [r7, #32]
 8004806:	68d2      	ldr	r2, [r2, #12]
 8004808:	609a      	str	r2, [r3, #8]
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	6a3a      	ldr	r2, [r7, #32]
 8004810:	6892      	ldr	r2, [r2, #8]
 8004812:	605a      	str	r2, [r3, #4]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	3304      	adds	r3, #4
 800481c:	429a      	cmp	r2, r3
 800481e:	d103      	bne.n	8004828 <xTaskRemoveFromEventList+0xa0>
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	605a      	str	r2, [r3, #4]
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	2200      	movs	r2, #0
 800482c:	615a      	str	r2, [r3, #20]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	1e5a      	subs	r2, r3, #1
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	4618      	mov	r0, r3
 800483c:	f002 fdda 	bl	80073f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	2201      	movs	r2, #1
 8004846:	409a      	lsls	r2, r3
 8004848:	4b36      	ldr	r3, [pc, #216]	; (8004924 <xTaskRemoveFromEventList+0x19c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4313      	orrs	r3, r2
 800484e:	4a35      	ldr	r2, [pc, #212]	; (8004924 <xTaskRemoveFromEventList+0x19c>)
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004856:	4934      	ldr	r1, [pc, #208]	; (8004928 <xTaskRemoveFromEventList+0x1a0>)
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	3304      	adds	r3, #4
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	609a      	str	r2, [r3, #8]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	60da      	str	r2, [r3, #12]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	6a3a      	ldr	r2, [r7, #32]
 800487c:	3204      	adds	r2, #4
 800487e:	605a      	str	r2, [r3, #4]
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	1d1a      	adds	r2, r3, #4
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	609a      	str	r2, [r3, #8]
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4a24      	ldr	r2, [pc, #144]	; (8004928 <xTaskRemoveFromEventList+0x1a0>)
 8004896:	441a      	add	r2, r3
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	615a      	str	r2, [r3, #20]
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a0:	4921      	ldr	r1, [pc, #132]	; (8004928 <xTaskRemoveFromEventList+0x1a0>)
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	1c59      	adds	r1, r3, #1
 80048b0:	481d      	ldr	r0, [pc, #116]	; (8004928 <xTaskRemoveFromEventList+0x1a0>)
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4403      	add	r3, r0
 80048bc:	6019      	str	r1, [r3, #0]
 80048be:	e01b      	b.n	80048f8 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048c0:	4b1a      	ldr	r3, [pc, #104]	; (800492c <xTaskRemoveFromEventList+0x1a4>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	61bb      	str	r3, [r7, #24]
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	61da      	str	r2, [r3, #28]
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	621a      	str	r2, [r3, #32]
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	6a3a      	ldr	r2, [r7, #32]
 80048da:	3218      	adds	r2, #24
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	f103 0218 	add.w	r2, r3, #24
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	4a10      	ldr	r2, [pc, #64]	; (800492c <xTaskRemoveFromEventList+0x1a4>)
 80048ec:	629a      	str	r2, [r3, #40]	; 0x28
 80048ee:	4b0f      	ldr	r3, [pc, #60]	; (800492c <xTaskRemoveFromEventList+0x1a4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3301      	adds	r3, #1
 80048f4:	4a0d      	ldr	r2, [pc, #52]	; (800492c <xTaskRemoveFromEventList+0x1a4>)
 80048f6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <xTaskRemoveFromEventList+0x1a8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	429a      	cmp	r2, r3
 8004904:	d905      	bls.n	8004912 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004906:	2301      	movs	r3, #1
 8004908:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <xTaskRemoveFromEventList+0x1ac>)
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	e001      	b.n	8004916 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004918:	4618      	mov	r0, r3
 800491a:	3728      	adds	r7, #40	; 0x28
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000770 	.word	0x20000770
 8004924:	20000750 	.word	0x20000750
 8004928:	20000674 	.word	0x20000674
 800492c:	20000708 	.word	0x20000708
 8004930:	20000670 	.word	0x20000670
 8004934:	2000075c 	.word	0x2000075c

08004938 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004940:	4b06      	ldr	r3, [pc, #24]	; (800495c <vTaskInternalSetTimeOutState+0x24>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004948:	4b05      	ldr	r3, [pc, #20]	; (8004960 <vTaskInternalSetTimeOutState+0x28>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	605a      	str	r2, [r3, #4]
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	20000760 	.word	0x20000760
 8004960:	2000074c 	.word	0x2000074c

08004964 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	613b      	str	r3, [r7, #16]
    }
 8004986:	bf00      	nop
 8004988:	e7fe      	b.n	8004988 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	60fb      	str	r3, [r7, #12]
    }
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80049a6:	f000 fdcd 	bl	8005544 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80049aa:	4b1f      	ldr	r3, [pc, #124]	; (8004a28 <xTaskCheckForTimeOut+0xc4>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049c2:	d102      	bne.n	80049ca <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61fb      	str	r3, [r7, #28]
 80049c8:	e026      	b.n	8004a18 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4b17      	ldr	r3, [pc, #92]	; (8004a2c <xTaskCheckForTimeOut+0xc8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d00a      	beq.n	80049ec <xTaskCheckForTimeOut+0x88>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d305      	bcc.n	80049ec <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80049e0:	2301      	movs	r3, #1
 80049e2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e015      	b.n	8004a18 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d20b      	bcs.n	8004a0e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	1ad2      	subs	r2, r2, r3
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff ff98 	bl	8004938 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	e004      	b.n	8004a18 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004a14:	2301      	movs	r3, #1
 8004a16:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004a18:	f000 fdc4 	bl	80055a4 <vPortExitCritical>

    return xReturn;
 8004a1c:	69fb      	ldr	r3, [r7, #28]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	2000074c 	.word	0x2000074c
 8004a2c:	20000760 	.word	0x20000760

08004a30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004a34:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <vTaskMissedYield+0x14>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
}
 8004a3a:	bf00      	nop
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	2000075c 	.word	0x2000075c

08004a48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004a50:	f000 f852 	bl	8004af8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a54:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <prvIdleTask+0x28>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d9f9      	bls.n	8004a50 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <prvIdleTask+0x2c>)
 8004a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004a6c:	e7f0      	b.n	8004a50 <prvIdleTask+0x8>
 8004a6e:	bf00      	nop
 8004a70:	20000674 	.word	0x20000674
 8004a74:	e000ed04 	.word	0xe000ed04

08004a78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a7e:	2300      	movs	r3, #0
 8004a80:	607b      	str	r3, [r7, #4]
 8004a82:	e00c      	b.n	8004a9e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4a12      	ldr	r2, [pc, #72]	; (8004ad8 <prvInitialiseTaskLists+0x60>)
 8004a90:	4413      	add	r3, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fe fdae 	bl	80035f4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d9ef      	bls.n	8004a84 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004aa4:	480d      	ldr	r0, [pc, #52]	; (8004adc <prvInitialiseTaskLists+0x64>)
 8004aa6:	f7fe fda5 	bl	80035f4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004aaa:	480d      	ldr	r0, [pc, #52]	; (8004ae0 <prvInitialiseTaskLists+0x68>)
 8004aac:	f7fe fda2 	bl	80035f4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004ab0:	480c      	ldr	r0, [pc, #48]	; (8004ae4 <prvInitialiseTaskLists+0x6c>)
 8004ab2:	f7fe fd9f 	bl	80035f4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004ab6:	480c      	ldr	r0, [pc, #48]	; (8004ae8 <prvInitialiseTaskLists+0x70>)
 8004ab8:	f7fe fd9c 	bl	80035f4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004abc:	480b      	ldr	r0, [pc, #44]	; (8004aec <prvInitialiseTaskLists+0x74>)
 8004abe:	f7fe fd99 	bl	80035f4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004ac2:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <prvInitialiseTaskLists+0x78>)
 8004ac4:	4a05      	ldr	r2, [pc, #20]	; (8004adc <prvInitialiseTaskLists+0x64>)
 8004ac6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <prvInitialiseTaskLists+0x7c>)
 8004aca:	4a05      	ldr	r2, [pc, #20]	; (8004ae0 <prvInitialiseTaskLists+0x68>)
 8004acc:	601a      	str	r2, [r3, #0]
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000674 	.word	0x20000674
 8004adc:	200006d8 	.word	0x200006d8
 8004ae0:	200006ec 	.word	0x200006ec
 8004ae4:	20000708 	.word	0x20000708
 8004ae8:	2000071c 	.word	0x2000071c
 8004aec:	20000734 	.word	0x20000734
 8004af0:	20000700 	.word	0x20000700
 8004af4:	20000704 	.word	0x20000704

08004af8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004afe:	e019      	b.n	8004b34 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8004b00:	f000 fd20 	bl	8005544 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b04:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <prvCheckTasksWaitingTermination+0x50>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fe fdd5 	bl	80036c0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004b16:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <prvCheckTasksWaitingTermination+0x54>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	4a0b      	ldr	r2, [pc, #44]	; (8004b4c <prvCheckTasksWaitingTermination+0x54>)
 8004b1e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <prvCheckTasksWaitingTermination+0x58>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	4a0a      	ldr	r2, [pc, #40]	; (8004b50 <prvCheckTasksWaitingTermination+0x58>)
 8004b28:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8004b2a:	f000 fd3b 	bl	80055a4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f810 	bl	8004b54 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b34:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <prvCheckTasksWaitingTermination+0x58>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e1      	bne.n	8004b00 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	2000071c 	.word	0x2000071c
 8004b4c:	20000748 	.word	0x20000748
 8004b50:	20000730 	.word	0x20000730

08004b54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fed5 	bl	8005910 <vPortFree>
            vPortFree( pxTCB );
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fed2 	bl	8005910 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004b6c:	bf00      	nop
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <prvResetNextTaskUnblockTime+0x30>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d104      	bne.n	8004b8c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004b82:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <prvResetNextTaskUnblockTime+0x34>)
 8004b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b88:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004b8a:	e005      	b.n	8004b98 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b8c:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <prvResetNextTaskUnblockTime+0x30>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <prvResetNextTaskUnblockTime+0x34>)
 8004b96:	6013      	str	r3, [r2, #0]
}
 8004b98:	bf00      	nop
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20000700 	.word	0x20000700
 8004ba8:	20000768 	.word	0x20000768

08004bac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <xTaskGetSchedulerState+0x34>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d102      	bne.n	8004bc0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	607b      	str	r3, [r7, #4]
 8004bbe:	e008      	b.n	8004bd2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bc0:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <xTaskGetSchedulerState+0x38>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d102      	bne.n	8004bce <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	607b      	str	r3, [r7, #4]
 8004bcc:	e001      	b.n	8004bd2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004bd2:	687b      	ldr	r3, [r7, #4]
    }
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	20000754 	.word	0x20000754
 8004be4:	20000770 	.word	0x20000770

08004be8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004bf2:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xe4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bf8:	4b35      	ldr	r3, [pc, #212]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fe fd5e 	bl	80036c0 <uxListRemove>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10b      	bne.n	8004c22 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c0a:	4b31      	ldr	r3, [pc, #196]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	2201      	movs	r2, #1
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43da      	mvns	r2, r3
 8004c18:	4b2e      	ldr	r3, [pc, #184]	; (8004cd4 <prvAddCurrentTaskToDelayedList+0xec>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	4a2d      	ldr	r2, [pc, #180]	; (8004cd4 <prvAddCurrentTaskToDelayedList+0xec>)
 8004c20:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c28:	d124      	bne.n	8004c74 <prvAddCurrentTaskToDelayedList+0x8c>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d021      	beq.n	8004c74 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c30:	4b29      	ldr	r3, [pc, #164]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	4b26      	ldr	r3, [pc, #152]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	609a      	str	r2, [r3, #8]
 8004c3e:	4b24      	ldr	r3, [pc, #144]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	6892      	ldr	r2, [r2, #8]
 8004c46:	60da      	str	r2, [r3, #12]
 8004c48:	4b21      	ldr	r3, [pc, #132]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	3204      	adds	r2, #4
 8004c52:	605a      	str	r2, [r3, #4]
 8004c54:	4b1e      	ldr	r3, [pc, #120]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	1d1a      	adds	r2, r3, #4
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	609a      	str	r2, [r3, #8]
 8004c5e:	4b1c      	ldr	r3, [pc, #112]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004c64:	615a      	str	r2, [r3, #20]
 8004c66:	4b1c      	ldr	r3, [pc, #112]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	4a1a      	ldr	r2, [pc, #104]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004c72:	e026      	b.n	8004cc2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4413      	add	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c7c:	4b14      	ldr	r3, [pc, #80]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d209      	bcs.n	8004ca0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c8c:	4b13      	ldr	r3, [pc, #76]	; (8004cdc <prvAddCurrentTaskToDelayedList+0xf4>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f7fe fcd8 	bl	800364e <vListInsert>
}
 8004c9e:	e010      	b.n	8004cc2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ca0:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	4619      	mov	r1, r3
 8004cac:	4610      	mov	r0, r2
 8004cae:	f7fe fcce 	bl	800364e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004cb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d202      	bcs.n	8004cc2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004cbc:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6013      	str	r3, [r2, #0]
}
 8004cc2:	bf00      	nop
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	2000074c 	.word	0x2000074c
 8004cd0:	20000670 	.word	0x20000670
 8004cd4:	20000750 	.word	0x20000750
 8004cd8:	20000734 	.word	0x20000734
 8004cdc:	20000704 	.word	0x20000704
 8004ce0:	20000700 	.word	0x20000700
 8004ce4:	20000768 	.word	0x20000768

08004ce8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004cf2:	f000 fa47 	bl	8005184 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004cf6:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <xTimerCreateTimerTask+0x54>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00b      	beq.n	8004d16 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004cfe:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <xTimerCreateTimerTask+0x58>)
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	2302      	movs	r3, #2
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	2300      	movs	r3, #0
 8004d08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d0c:	490d      	ldr	r1, [pc, #52]	; (8004d44 <xTimerCreateTimerTask+0x5c>)
 8004d0e:	480e      	ldr	r0, [pc, #56]	; (8004d48 <xTimerCreateTimerTask+0x60>)
 8004d10:	f7ff f830 	bl	8003d74 <xTaskCreate>
 8004d14:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	603b      	str	r3, [r7, #0]
    }
 8004d2e:	bf00      	nop
 8004d30:	e7fe      	b.n	8004d30 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004d32:	687b      	ldr	r3, [r7, #4]
    }
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	200007a4 	.word	0x200007a4
 8004d40:	200007a8 	.word	0x200007a8
 8004d44:	08008208 	.word	0x08008208
 8004d48:	08004df1 	.word	0x08004df1

08004d4c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004d58:	e008      	b.n	8004d6c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	4413      	add	r3, r2
 8004d62:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	699a      	ldr	r2, [r3, #24]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	18d1      	adds	r1, r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f8dd 	bl	8004f38 <prvInsertTimerInActiveList>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1ea      	bne.n	8004d5a <prvReloadTimer+0xe>
        }
    }
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d9a:	4b14      	ldr	r3, [pc, #80]	; (8004dec <prvProcessExpiredTimer+0x5c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fe fc89 	bl	80036c0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d005      	beq.n	8004dc8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f7ff ffc3 	bl	8004d4c <prvReloadTimer>
 8004dc6:	e008      	b.n	8004dda <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dce:	f023 0301 	bic.w	r3, r3, #1
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	4798      	blx	r3
    }
 8004de2:	bf00      	nop
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	2000079c 	.word	0x2000079c

08004df0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004df8:	f107 0308 	add.w	r3, r7, #8
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 f857 	bl	8004eb0 <prvGetNextExpireTime>
 8004e02:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4619      	mov	r1, r3
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f803 	bl	8004e14 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004e0e:	f000 f8d5 	bl	8004fbc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e12:	e7f1      	b.n	8004df8 <prvTimerTask+0x8>

08004e14 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004e1e:	f7ff f993 	bl	8004148 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e22:	f107 0308 	add.w	r3, r7, #8
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 f866 	bl	8004ef8 <prvSampleTimeNow>
 8004e2c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d130      	bne.n	8004e96 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <prvProcessTimerOrBlockTask+0x3c>
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d806      	bhi.n	8004e50 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004e42:	f7ff f98f 	bl	8004164 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e46:	68f9      	ldr	r1, [r7, #12]
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7ff ffa1 	bl	8004d90 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004e4e:	e024      	b.n	8004e9a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d008      	beq.n	8004e68 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e56:	4b13      	ldr	r3, [pc, #76]	; (8004ea4 <prvProcessTimerOrBlockTask+0x90>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <prvProcessTimerOrBlockTask+0x50>
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <prvProcessTimerOrBlockTask+0x52>
 8004e64:	2300      	movs	r3, #0
 8004e66:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e68:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <prvProcessTimerOrBlockTask+0x94>)
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	4619      	mov	r1, r3
 8004e76:	f7fe ff49 	bl	8003d0c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004e7a:	f7ff f973 	bl	8004164 <xTaskResumeAll>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004e84:	4b09      	ldr	r3, [pc, #36]	; (8004eac <prvProcessTimerOrBlockTask+0x98>)
 8004e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	f3bf 8f6f 	isb	sy
    }
 8004e94:	e001      	b.n	8004e9a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004e96:	f7ff f965 	bl	8004164 <xTaskResumeAll>
    }
 8004e9a:	bf00      	nop
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	200007a0 	.word	0x200007a0
 8004ea8:	200007a4 	.word	0x200007a4
 8004eac:	e000ed04 	.word	0xe000ed04

08004eb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004eb8:	4b0e      	ldr	r3, [pc, #56]	; (8004ef4 <prvGetNextExpireTime+0x44>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <prvGetNextExpireTime+0x16>
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	e000      	b.n	8004ec8 <prvGetNextExpireTime+0x18>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d105      	bne.n	8004ee0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ed4:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <prvGetNextExpireTime+0x44>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	e001      	b.n	8004ee4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
    }
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	2000079c 	.word	0x2000079c

08004ef8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004f00:	f7ff fa30 	bl	8004364 <xTaskGetTickCount>
 8004f04:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004f06:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <prvSampleTimeNow+0x3c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d205      	bcs.n	8004f1c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004f10:	f000 f912 	bl	8005138 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e002      	b.n	8004f22 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004f22:	4a04      	ldr	r2, [pc, #16]	; (8004f34 <prvSampleTimeNow+0x3c>)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004f28:	68fb      	ldr	r3, [r7, #12]
    }
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	200007ac 	.word	0x200007ac

08004f38 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d812      	bhi.n	8004f84 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	1ad2      	subs	r2, r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d302      	bcc.n	8004f72 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e01b      	b.n	8004faa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f72:	4b10      	ldr	r3, [pc, #64]	; (8004fb4 <prvInsertTimerInActiveList+0x7c>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f7fe fb66 	bl	800364e <vListInsert>
 8004f82:	e012      	b.n	8004faa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d206      	bcs.n	8004f9a <prvInsertTimerInActiveList+0x62>
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d302      	bcc.n	8004f9a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004f94:	2301      	movs	r3, #1
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	e007      	b.n	8004faa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f9a:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <prvInsertTimerInActiveList+0x80>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	f7fe fb52 	bl	800364e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004faa:	697b      	ldr	r3, [r7, #20]
    }
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	200007a0 	.word	0x200007a0
 8004fb8:	2000079c 	.word	0x2000079c

08004fbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fc2:	e0a6      	b.n	8005112 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f2c0 80a2 	blt.w	8005110 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d004      	beq.n	8004fe2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	3304      	adds	r3, #4
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fe fb6f 	bl	80036c0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fe2:	1d3b      	adds	r3, r7, #4
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff ff87 	bl	8004ef8 <prvSampleTimeNow>
 8004fea:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	f200 808e 	bhi.w	8005112 <prvProcessReceivedCommands+0x156>
 8004ff6:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <prvProcessReceivedCommands+0x40>)
 8004ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffc:	08005021 	.word	0x08005021
 8005000:	08005021 	.word	0x08005021
 8005004:	08005089 	.word	0x08005089
 8005008:	0800509d 	.word	0x0800509d
 800500c:	080050e7 	.word	0x080050e7
 8005010:	08005021 	.word	0x08005021
 8005014:	08005021 	.word	0x08005021
 8005018:	08005089 	.word	0x08005089
 800501c:	0800509d 	.word	0x0800509d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005026:	f043 0301 	orr.w	r3, r3, #1
 800502a:	b2da      	uxtb	r2, r3
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	18d1      	adds	r1, r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	69f8      	ldr	r0, [r7, #28]
 8005040:	f7ff ff7a 	bl	8004f38 <prvInsertTimerInActiveList>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d063      	beq.n	8005112 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	4413      	add	r3, r2
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	4619      	mov	r1, r3
 8005064:	69f8      	ldr	r0, [r7, #28]
 8005066:	f7ff fe71 	bl	8004d4c <prvReloadTimer>
 800506a:	e008      	b.n	800507e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005072:	f023 0301 	bic.w	r3, r3, #1
 8005076:	b2da      	uxtb	r2, r3
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	69f8      	ldr	r0, [r7, #28]
 8005084:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005086:	e044      	b.n	8005112 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800508e:	f023 0301 	bic.w	r3, r3, #1
 8005092:	b2da      	uxtb	r2, r3
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800509a:	e03a      	b.n	8005112 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10a      	bne.n	80050d2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	617b      	str	r3, [r7, #20]
    }
 80050ce:	bf00      	nop
 80050d0:	e7fe      	b.n	80050d0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	18d1      	adds	r1, r2, r3
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	69f8      	ldr	r0, [r7, #28]
 80050e0:	f7ff ff2a 	bl	8004f38 <prvInsertTimerInActiveList>
                        break;
 80050e4:	e015      	b.n	8005112 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d103      	bne.n	80050fc <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80050f4:	69f8      	ldr	r0, [r7, #28]
 80050f6:	f000 fc0b 	bl	8005910 <vPortFree>
 80050fa:	e00a      	b.n	8005112 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	b2da      	uxtb	r2, r3
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800510e:	e000      	b.n	8005112 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005110:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005112:	4b08      	ldr	r3, [pc, #32]	; (8005134 <prvProcessReceivedCommands+0x178>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f107 0108 	add.w	r1, r7, #8
 800511a:	2200      	movs	r2, #0
 800511c:	4618      	mov	r0, r3
 800511e:	f7fe fc01 	bl	8003924 <xQueueReceive>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	f47f af4d 	bne.w	8004fc4 <prvProcessReceivedCommands+0x8>
        }
    }
 800512a:	bf00      	nop
 800512c:	bf00      	nop
 800512e:	3720      	adds	r7, #32
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	200007a4 	.word	0x200007a4

08005138 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800513e:	e009      	b.n	8005154 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005140:	4b0e      	ldr	r3, [pc, #56]	; (800517c <prvSwitchTimerLists+0x44>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800514a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800514e:	6838      	ldr	r0, [r7, #0]
 8005150:	f7ff fe1e 	bl	8004d90 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005154:	4b09      	ldr	r3, [pc, #36]	; (800517c <prvSwitchTimerLists+0x44>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f0      	bne.n	8005140 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800515e:	4b07      	ldr	r3, [pc, #28]	; (800517c <prvSwitchTimerLists+0x44>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005164:	4b06      	ldr	r3, [pc, #24]	; (8005180 <prvSwitchTimerLists+0x48>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a04      	ldr	r2, [pc, #16]	; (800517c <prvSwitchTimerLists+0x44>)
 800516a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800516c:	4a04      	ldr	r2, [pc, #16]	; (8005180 <prvSwitchTimerLists+0x48>)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6013      	str	r3, [r2, #0]
    }
 8005172:	bf00      	nop
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	2000079c 	.word	0x2000079c
 8005180:	200007a0 	.word	0x200007a0

08005184 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005188:	f000 f9dc 	bl	8005544 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800518c:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <prvCheckForValidListAndQueue+0x54>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d11d      	bne.n	80051d0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005194:	4811      	ldr	r0, [pc, #68]	; (80051dc <prvCheckForValidListAndQueue+0x58>)
 8005196:	f7fe fa2d 	bl	80035f4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800519a:	4811      	ldr	r0, [pc, #68]	; (80051e0 <prvCheckForValidListAndQueue+0x5c>)
 800519c:	f7fe fa2a 	bl	80035f4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80051a0:	4b10      	ldr	r3, [pc, #64]	; (80051e4 <prvCheckForValidListAndQueue+0x60>)
 80051a2:	4a0e      	ldr	r2, [pc, #56]	; (80051dc <prvCheckForValidListAndQueue+0x58>)
 80051a4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80051a6:	4b10      	ldr	r3, [pc, #64]	; (80051e8 <prvCheckForValidListAndQueue+0x64>)
 80051a8:	4a0d      	ldr	r2, [pc, #52]	; (80051e0 <prvCheckForValidListAndQueue+0x5c>)
 80051aa:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80051ac:	2200      	movs	r2, #0
 80051ae:	210c      	movs	r1, #12
 80051b0:	200a      	movs	r0, #10
 80051b2:	f7fe fb3f 	bl	8003834 <xQueueGenericCreate>
 80051b6:	4603      	mov	r3, r0
 80051b8:	4a07      	ldr	r2, [pc, #28]	; (80051d8 <prvCheckForValidListAndQueue+0x54>)
 80051ba:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80051bc:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <prvCheckForValidListAndQueue+0x54>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051c4:	4b04      	ldr	r3, [pc, #16]	; (80051d8 <prvCheckForValidListAndQueue+0x54>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4908      	ldr	r1, [pc, #32]	; (80051ec <prvCheckForValidListAndQueue+0x68>)
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe fd48 	bl	8003c60 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80051d0:	f000 f9e8 	bl	80055a4 <vPortExitCritical>
    }
 80051d4:	bf00      	nop
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	200007a4 	.word	0x200007a4
 80051dc:	20000774 	.word	0x20000774
 80051e0:	20000788 	.word	0x20000788
 80051e4:	2000079c 	.word	0x2000079c
 80051e8:	200007a0 	.word	0x200007a0
 80051ec:	08008210 	.word	0x08008210

080051f0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3b04      	subs	r3, #4
 8005200:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005208:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3b04      	subs	r3, #4
 800520e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f023 0201 	bic.w	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3b04      	subs	r3, #4
 800521e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005220:	4a0c      	ldr	r2, [pc, #48]	; (8005254 <pxPortInitialiseStack+0x64>)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3b14      	subs	r3, #20
 800522a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3b04      	subs	r3, #4
 8005236:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f06f 0202 	mvn.w	r2, #2
 800523e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3b20      	subs	r3, #32
 8005244:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005246:	68fb      	ldr	r3, [r7, #12]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	08005259 	.word	0x08005259

08005258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005262:	4b12      	ldr	r3, [pc, #72]	; (80052ac <prvTaskExitError+0x54>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800526a:	d00a      	beq.n	8005282 <prvTaskExitError+0x2a>
        __asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	60fb      	str	r3, [r7, #12]
    }
 800527e:	bf00      	nop
 8005280:	e7fe      	b.n	8005280 <prvTaskExitError+0x28>
        __asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	60bb      	str	r3, [r7, #8]
    }
 8005294:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005296:	bf00      	nop
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0fc      	beq.n	8005298 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800529e:	bf00      	nop
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	20000010 	.word	0x20000010

080052b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80052b0:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <pxCurrentTCBConst2>)
 80052b2:	6819      	ldr	r1, [r3, #0]
 80052b4:	6808      	ldr	r0, [r1, #0]
 80052b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ba:	f380 8809 	msr	PSP, r0
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f04f 0000 	mov.w	r0, #0
 80052c6:	f380 8811 	msr	BASEPRI, r0
 80052ca:	4770      	bx	lr
 80052cc:	f3af 8000 	nop.w

080052d0 <pxCurrentTCBConst2>:
 80052d0:	20000670 	.word	0x20000670
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop

080052d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80052d8:	4808      	ldr	r0, [pc, #32]	; (80052fc <prvPortStartFirstTask+0x24>)
 80052da:	6800      	ldr	r0, [r0, #0]
 80052dc:	6800      	ldr	r0, [r0, #0]
 80052de:	f380 8808 	msr	MSP, r0
 80052e2:	f04f 0000 	mov.w	r0, #0
 80052e6:	f380 8814 	msr	CONTROL, r0
 80052ea:	b662      	cpsie	i
 80052ec:	b661      	cpsie	f
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	df00      	svc	0
 80052f8:	bf00      	nop
 80052fa:	0000      	.short	0x0000
 80052fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005300:	bf00      	nop
 8005302:	bf00      	nop

08005304 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800530a:	4b46      	ldr	r3, [pc, #280]	; (8005424 <xPortStartScheduler+0x120>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a46      	ldr	r2, [pc, #280]	; (8005428 <xPortStartScheduler+0x124>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d10a      	bne.n	800532a <xPortStartScheduler+0x26>
        __asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	613b      	str	r3, [r7, #16]
    }
 8005326:	bf00      	nop
 8005328:	e7fe      	b.n	8005328 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800532a:	4b3e      	ldr	r3, [pc, #248]	; (8005424 <xPortStartScheduler+0x120>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a3f      	ldr	r2, [pc, #252]	; (800542c <xPortStartScheduler+0x128>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d10a      	bne.n	800534a <xPortStartScheduler+0x46>
        __asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	60fb      	str	r3, [r7, #12]
    }
 8005346:	bf00      	nop
 8005348:	e7fe      	b.n	8005348 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800534a:	4b39      	ldr	r3, [pc, #228]	; (8005430 <xPortStartScheduler+0x12c>)
 800534c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	22ff      	movs	r2, #255	; 0xff
 800535a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	b2db      	uxtb	r3, r3
 8005368:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800536c:	b2da      	uxtb	r2, r3
 800536e:	4b31      	ldr	r3, [pc, #196]	; (8005434 <xPortStartScheduler+0x130>)
 8005370:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005372:	4b31      	ldr	r3, [pc, #196]	; (8005438 <xPortStartScheduler+0x134>)
 8005374:	2207      	movs	r2, #7
 8005376:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005378:	e009      	b.n	800538e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800537a:	4b2f      	ldr	r3, [pc, #188]	; (8005438 <xPortStartScheduler+0x134>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3b01      	subs	r3, #1
 8005380:	4a2d      	ldr	r2, [pc, #180]	; (8005438 <xPortStartScheduler+0x134>)
 8005382:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	b2db      	uxtb	r3, r3
 800538c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800538e:	78fb      	ldrb	r3, [r7, #3]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005396:	2b80      	cmp	r3, #128	; 0x80
 8005398:	d0ef      	beq.n	800537a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800539a:	4b27      	ldr	r3, [pc, #156]	; (8005438 <xPortStartScheduler+0x134>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f1c3 0307 	rsb	r3, r3, #7
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d00a      	beq.n	80053bc <xPortStartScheduler+0xb8>
        __asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	60bb      	str	r3, [r7, #8]
    }
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053bc:	4b1e      	ldr	r3, [pc, #120]	; (8005438 <xPortStartScheduler+0x134>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	4a1d      	ldr	r2, [pc, #116]	; (8005438 <xPortStartScheduler+0x134>)
 80053c4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053c6:	4b1c      	ldr	r3, [pc, #112]	; (8005438 <xPortStartScheduler+0x134>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053ce:	4a1a      	ldr	r2, [pc, #104]	; (8005438 <xPortStartScheduler+0x134>)
 80053d0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80053da:	4b18      	ldr	r3, [pc, #96]	; (800543c <xPortStartScheduler+0x138>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a17      	ldr	r2, [pc, #92]	; (800543c <xPortStartScheduler+0x138>)
 80053e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80053e6:	4b15      	ldr	r3, [pc, #84]	; (800543c <xPortStartScheduler+0x138>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a14      	ldr	r2, [pc, #80]	; (800543c <xPortStartScheduler+0x138>)
 80053ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80053f2:	f000 f963 	bl	80056bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80053f6:	4b12      	ldr	r3, [pc, #72]	; (8005440 <xPortStartScheduler+0x13c>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80053fc:	f000 f982 	bl	8005704 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005400:	4b10      	ldr	r3, [pc, #64]	; (8005444 <xPortStartScheduler+0x140>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a0f      	ldr	r2, [pc, #60]	; (8005444 <xPortStartScheduler+0x140>)
 8005406:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800540a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800540c:	f7ff ff64 	bl	80052d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005410:	f7ff f8e4 	bl	80045dc <vTaskSwitchContext>
    prvTaskExitError();
 8005414:	f7ff ff20 	bl	8005258 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	e000ed00 	.word	0xe000ed00
 8005428:	410fc271 	.word	0x410fc271
 800542c:	410fc270 	.word	0x410fc270
 8005430:	e000e400 	.word	0xe000e400
 8005434:	200007b0 	.word	0x200007b0
 8005438:	200007b4 	.word	0x200007b4
 800543c:	e000ed20 	.word	0xe000ed20
 8005440:	20000010 	.word	0x20000010
 8005444:	e000ef34 	.word	0xe000ef34

08005448 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800544e:	4b37      	ldr	r3, [pc, #220]	; (800552c <vInitPrioGroupValue+0xe4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a37      	ldr	r2, [pc, #220]	; (8005530 <vInitPrioGroupValue+0xe8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d10a      	bne.n	800546e <vInitPrioGroupValue+0x26>
        __asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	613b      	str	r3, [r7, #16]
    }
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800546e:	4b2f      	ldr	r3, [pc, #188]	; (800552c <vInitPrioGroupValue+0xe4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a30      	ldr	r2, [pc, #192]	; (8005534 <vInitPrioGroupValue+0xec>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d10a      	bne.n	800548e <vInitPrioGroupValue+0x46>
        __asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	60fb      	str	r3, [r7, #12]
    }
 800548a:	bf00      	nop
 800548c:	e7fe      	b.n	800548c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800548e:	4b2a      	ldr	r3, [pc, #168]	; (8005538 <vInitPrioGroupValue+0xf0>)
 8005490:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	22ff      	movs	r2, #255	; 0xff
 800549e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	4b22      	ldr	r3, [pc, #136]	; (800553c <vInitPrioGroupValue+0xf4>)
 80054b4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054b6:	4b22      	ldr	r3, [pc, #136]	; (8005540 <vInitPrioGroupValue+0xf8>)
 80054b8:	2207      	movs	r2, #7
 80054ba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054bc:	e009      	b.n	80054d2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80054be:	4b20      	ldr	r3, [pc, #128]	; (8005540 <vInitPrioGroupValue+0xf8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	4a1e      	ldr	r2, [pc, #120]	; (8005540 <vInitPrioGroupValue+0xf8>)
 80054c6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054da:	2b80      	cmp	r3, #128	; 0x80
 80054dc:	d0ef      	beq.n	80054be <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054de:	4b18      	ldr	r3, [pc, #96]	; (8005540 <vInitPrioGroupValue+0xf8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f1c3 0307 	rsb	r3, r3, #7
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d00a      	beq.n	8005500 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	60bb      	str	r3, [r7, #8]
    }
 80054fc:	bf00      	nop
 80054fe:	e7fe      	b.n	80054fe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005500:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <vInitPrioGroupValue+0xf8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	4a0e      	ldr	r2, [pc, #56]	; (8005540 <vInitPrioGroupValue+0xf8>)
 8005508:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800550a:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <vInitPrioGroupValue+0xf8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005512:	4a0b      	ldr	r2, [pc, #44]	; (8005540 <vInitPrioGroupValue+0xf8>)
 8005514:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	b2da      	uxtb	r2, r3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	e000ed00 	.word	0xe000ed00
 8005530:	410fc271 	.word	0x410fc271
 8005534:	410fc270 	.word	0x410fc270
 8005538:	e000e400 	.word	0xe000e400
 800553c:	200007b0 	.word	0x200007b0
 8005540:	200007b4 	.word	0x200007b4

08005544 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
        __asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	607b      	str	r3, [r7, #4]
    }
 800555c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800555e:	4b0f      	ldr	r3, [pc, #60]	; (800559c <vPortEnterCritical+0x58>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3301      	adds	r3, #1
 8005564:	4a0d      	ldr	r2, [pc, #52]	; (800559c <vPortEnterCritical+0x58>)
 8005566:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005568:	4b0c      	ldr	r3, [pc, #48]	; (800559c <vPortEnterCritical+0x58>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d10f      	bne.n	8005590 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005570:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <vPortEnterCritical+0x5c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <vPortEnterCritical+0x4c>
        __asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	603b      	str	r3, [r7, #0]
    }
 800558c:	bf00      	nop
 800558e:	e7fe      	b.n	800558e <vPortEnterCritical+0x4a>
    }
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	20000010 	.word	0x20000010
 80055a0:	e000ed04 	.word	0xe000ed04

080055a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80055aa:	4b12      	ldr	r3, [pc, #72]	; (80055f4 <vPortExitCritical+0x50>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10a      	bne.n	80055c8 <vPortExitCritical+0x24>
        __asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	607b      	str	r3, [r7, #4]
    }
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <vPortExitCritical+0x50>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	4a09      	ldr	r2, [pc, #36]	; (80055f4 <vPortExitCritical+0x50>)
 80055d0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80055d2:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <vPortExitCritical+0x50>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d105      	bne.n	80055e6 <vPortExitCritical+0x42>
 80055da:	2300      	movs	r3, #0
 80055dc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80055e4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	20000010 	.word	0x20000010
	...

08005600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005600:	f3ef 8009 	mrs	r0, PSP
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	4b15      	ldr	r3, [pc, #84]	; (8005660 <pxCurrentTCBConst>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	f01e 0f10 	tst.w	lr, #16
 8005610:	bf08      	it	eq
 8005612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561a:	6010      	str	r0, [r2, #0]
 800561c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005624:	f380 8811 	msr	BASEPRI, r0
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f7fe ffd4 	bl	80045dc <vTaskSwitchContext>
 8005634:	f04f 0000 	mov.w	r0, #0
 8005638:	f380 8811 	msr	BASEPRI, r0
 800563c:	bc09      	pop	{r0, r3}
 800563e:	6819      	ldr	r1, [r3, #0]
 8005640:	6808      	ldr	r0, [r1, #0]
 8005642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005646:	f01e 0f10 	tst.w	lr, #16
 800564a:	bf08      	it	eq
 800564c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005650:	f380 8809 	msr	PSP, r0
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	f3af 8000 	nop.w

08005660 <pxCurrentTCBConst>:
 8005660:	20000670 	.word	0x20000670
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop

08005668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
        __asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	607b      	str	r3, [r7, #4]
    }
 8005680:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005682:	f001 fd9d 	bl	80071c0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005686:	f7fe fe8f 	bl	80043a8 <xTaskIncrementTick>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d006      	beq.n	800569e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8005690:	f001 fdf4 	bl	800727c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005694:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <SysTick_Handler+0x50>)
 8005696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	e001      	b.n	80056a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800569e:	f001 fdd1 	bl	8007244 <SEGGER_SYSVIEW_RecordExitISR>
 80056a2:	2300      	movs	r3, #0
 80056a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	f383 8811 	msr	BASEPRI, r3
    }
 80056ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <vPortSetupTimerInterrupt+0x34>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056c6:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <vPortSetupTimerInterrupt+0x38>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <vPortSetupTimerInterrupt+0x3c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a0a      	ldr	r2, [pc, #40]	; (80056fc <vPortSetupTimerInterrupt+0x40>)
 80056d2:	fba2 2303 	umull	r2, r3, r2, r3
 80056d6:	099b      	lsrs	r3, r3, #6
 80056d8:	4a09      	ldr	r2, [pc, #36]	; (8005700 <vPortSetupTimerInterrupt+0x44>)
 80056da:	3b01      	subs	r3, #1
 80056dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056de:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <vPortSetupTimerInterrupt+0x34>)
 80056e0:	2207      	movs	r2, #7
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	e000e010 	.word	0xe000e010
 80056f4:	e000e018 	.word	0xe000e018
 80056f8:	20000000 	.word	0x20000000
 80056fc:	10624dd3 	.word	0x10624dd3
 8005700:	e000e014 	.word	0xe000e014

08005704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005714 <vPortEnableVFP+0x10>
 8005708:	6801      	ldr	r1, [r0, #0]
 800570a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800570e:	6001      	str	r1, [r0, #0]
 8005710:	4770      	bx	lr
 8005712:	0000      	.short	0x0000
 8005714:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005718:	bf00      	nop
 800571a:	bf00      	nop

0800571c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005722:	f3ef 8305 	mrs	r3, IPSR
 8005726:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b0f      	cmp	r3, #15
 800572c:	d914      	bls.n	8005758 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800572e:	4a17      	ldr	r2, [pc, #92]	; (800578c <vPortValidateInterruptPriority+0x70>)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005738:	4b15      	ldr	r3, [pc, #84]	; (8005790 <vPortValidateInterruptPriority+0x74>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	7afa      	ldrb	r2, [r7, #11]
 800573e:	429a      	cmp	r2, r3
 8005740:	d20a      	bcs.n	8005758 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	607b      	str	r3, [r7, #4]
    }
 8005754:	bf00      	nop
 8005756:	e7fe      	b.n	8005756 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005758:	4b0e      	ldr	r3, [pc, #56]	; (8005794 <vPortValidateInterruptPriority+0x78>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005760:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <vPortValidateInterruptPriority+0x7c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d90a      	bls.n	800577e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	603b      	str	r3, [r7, #0]
    }
 800577a:	bf00      	nop
 800577c:	e7fe      	b.n	800577c <vPortValidateInterruptPriority+0x60>
    }
 800577e:	bf00      	nop
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	e000e3f0 	.word	0xe000e3f0
 8005790:	200007b0 	.word	0x200007b0
 8005794:	e000ed0c 	.word	0xe000ed0c
 8005798:	200007b4 	.word	0x200007b4

0800579c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	; 0x28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80057a8:	f7fe fcce 	bl	8004148 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80057ac:	4b53      	ldr	r3, [pc, #332]	; (80058fc <pvPortMalloc+0x160>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80057b4:	f000 f908 	bl	80059c8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d012      	beq.n	80057e4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80057be:	2208      	movs	r2, #8
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	3308      	adds	r3, #8
 80057ca:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	43db      	mvns	r3, r3
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d804      	bhi.n	80057e0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	4413      	add	r3, r2
 80057dc:	607b      	str	r3, [r7, #4]
 80057de:	e001      	b.n	80057e4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	db70      	blt.n	80058cc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d06d      	beq.n	80058cc <pvPortMalloc+0x130>
 80057f0:	4b43      	ldr	r3, [pc, #268]	; (8005900 <pvPortMalloc+0x164>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d868      	bhi.n	80058cc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80057fa:	4b42      	ldr	r3, [pc, #264]	; (8005904 <pvPortMalloc+0x168>)
 80057fc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80057fe:	4b41      	ldr	r3, [pc, #260]	; (8005904 <pvPortMalloc+0x168>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005804:	e004      	b.n	8005810 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	d903      	bls.n	8005822 <pvPortMalloc+0x86>
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f1      	bne.n	8005806 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005822:	4b36      	ldr	r3, [pc, #216]	; (80058fc <pvPortMalloc+0x160>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005828:	429a      	cmp	r2, r3
 800582a:	d04f      	beq.n	80058cc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2208      	movs	r2, #8
 8005832:	4413      	add	r3, r2
 8005834:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	1ad2      	subs	r2, r2, r3
 8005846:	2308      	movs	r3, #8
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	429a      	cmp	r2, r3
 800584c:	d91f      	bls.n	800588e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800584e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4413      	add	r3, r2
 8005854:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <pvPortMalloc+0xda>
        __asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	613b      	str	r3, [r7, #16]
    }
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	1ad2      	subs	r2, r2, r3
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005888:	6978      	ldr	r0, [r7, #20]
 800588a:	f000 f8f9 	bl	8005a80 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800588e:	4b1c      	ldr	r3, [pc, #112]	; (8005900 <pvPortMalloc+0x164>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	4a19      	ldr	r2, [pc, #100]	; (8005900 <pvPortMalloc+0x164>)
 800589a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800589c:	4b18      	ldr	r3, [pc, #96]	; (8005900 <pvPortMalloc+0x164>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	4b19      	ldr	r3, [pc, #100]	; (8005908 <pvPortMalloc+0x16c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d203      	bcs.n	80058b0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058a8:	4b15      	ldr	r3, [pc, #84]	; (8005900 <pvPortMalloc+0x164>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a16      	ldr	r2, [pc, #88]	; (8005908 <pvPortMalloc+0x16c>)
 80058ae:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80058c2:	4b12      	ldr	r3, [pc, #72]	; (800590c <pvPortMalloc+0x170>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3301      	adds	r3, #1
 80058c8:	4a10      	ldr	r2, [pc, #64]	; (800590c <pvPortMalloc+0x170>)
 80058ca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80058cc:	f7fe fc4a 	bl	8004164 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <pvPortMalloc+0x154>
        __asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	60fb      	str	r3, [r7, #12]
    }
 80058ec:	bf00      	nop
 80058ee:	e7fe      	b.n	80058ee <pvPortMalloc+0x152>
    return pvReturn;
 80058f0:	69fb      	ldr	r3, [r7, #28]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3728      	adds	r7, #40	; 0x28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	200133c0 	.word	0x200133c0
 8005900:	200133c4 	.word	0x200133c4
 8005904:	200133b8 	.word	0x200133b8
 8005908:	200133c8 	.word	0x200133c8
 800590c:	200133cc 	.word	0x200133cc

08005910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d049      	beq.n	80059b6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005922:	2308      	movs	r3, #8
 8005924:	425b      	negs	r3, r3
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4413      	add	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	db0a      	blt.n	800594e <vPortFree+0x3e>
        __asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	60fb      	str	r3, [r7, #12]
    }
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <vPortFree+0x5c>
        __asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	60bb      	str	r3, [r7, #8]
    }
 8005968:	bf00      	nop
 800596a:	e7fe      	b.n	800596a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	0fdb      	lsrs	r3, r3, #31
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01c      	beq.n	80059b6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d118      	bne.n	80059b6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8005990:	f7fe fbda 	bl	8004148 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <vPortFree+0xb0>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4413      	add	r3, r2
 800599e:	4a08      	ldr	r2, [pc, #32]	; (80059c0 <vPortFree+0xb0>)
 80059a0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059a2:	6938      	ldr	r0, [r7, #16]
 80059a4:	f000 f86c 	bl	8005a80 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80059a8:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <vPortFree+0xb4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3301      	adds	r3, #1
 80059ae:	4a05      	ldr	r2, [pc, #20]	; (80059c4 <vPortFree+0xb4>)
 80059b0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80059b2:	f7fe fbd7 	bl	8004164 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80059b6:	bf00      	nop
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	200133c4 	.word	0x200133c4
 80059c4:	200133d0 	.word	0x200133d0

080059c8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059ce:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80059d2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80059d4:	4b25      	ldr	r3, [pc, #148]	; (8005a6c <prvHeapInit+0xa4>)
 80059d6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00c      	beq.n	80059fc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3307      	adds	r3, #7
 80059e6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0307 	bic.w	r3, r3, #7
 80059ee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	4a1d      	ldr	r2, [pc, #116]	; (8005a6c <prvHeapInit+0xa4>)
 80059f8:	4413      	add	r3, r2
 80059fa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a00:	4a1b      	ldr	r2, [pc, #108]	; (8005a70 <prvHeapInit+0xa8>)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005a06:	4b1a      	ldr	r3, [pc, #104]	; (8005a70 <prvHeapInit+0xa8>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	4413      	add	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005a14:	2208      	movs	r2, #8
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1a9b      	subs	r3, r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0307 	bic.w	r3, r3, #7
 8005a22:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4a13      	ldr	r2, [pc, #76]	; (8005a74 <prvHeapInit+0xac>)
 8005a28:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005a2a:	4b12      	ldr	r3, [pc, #72]	; (8005a74 <prvHeapInit+0xac>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005a32:	4b10      	ldr	r3, [pc, #64]	; (8005a74 <prvHeapInit+0xac>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	1ad2      	subs	r2, r2, r3
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <prvHeapInit+0xac>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	4a08      	ldr	r2, [pc, #32]	; (8005a78 <prvHeapInit+0xb0>)
 8005a56:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	4a07      	ldr	r2, [pc, #28]	; (8005a7c <prvHeapInit+0xb4>)
 8005a5e:	6013      	str	r3, [r2, #0]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	200007b8 	.word	0x200007b8
 8005a70:	200133b8 	.word	0x200133b8
 8005a74:	200133c0 	.word	0x200133c0
 8005a78:	200133c8 	.word	0x200133c8
 8005a7c:	200133c4 	.word	0x200133c4

08005a80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a88:	4b28      	ldr	r3, [pc, #160]	; (8005b2c <prvInsertBlockIntoFreeList+0xac>)
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	e002      	b.n	8005a94 <prvInsertBlockIntoFreeList+0x14>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d8f7      	bhi.n	8005a8e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d108      	bne.n	8005ac2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	441a      	add	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	441a      	add	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d118      	bne.n	8005b08 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <prvInsertBlockIntoFreeList+0xb0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d00d      	beq.n	8005afe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	441a      	add	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	e008      	b.n	8005b10 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005afe:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <prvInsertBlockIntoFreeList+0xb0>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	e003      	b.n	8005b10 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d002      	beq.n	8005b1e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b1e:	bf00      	nop
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	200133b8 	.word	0x200133b8
 8005b30:	200133c0 	.word	0x200133c0

08005b34 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005b38:	4803      	ldr	r0, [pc, #12]	; (8005b48 <_cbSendSystemDesc+0x14>)
 8005b3a:	f001 faeb 	bl	8007114 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005b3e:	4803      	ldr	r0, [pc, #12]	; (8005b4c <_cbSendSystemDesc+0x18>)
 8005b40:	f001 fae8 	bl	8007114 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005b44:	bf00      	nop
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	08008218 	.word	0x08008218
 8005b4c:	0800824c 	.word	0x0800824c

08005b50 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005b54:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <SEGGER_SYSVIEW_Conf+0x20>)
 8005b56:	6818      	ldr	r0, [r3, #0]
 8005b58:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <SEGGER_SYSVIEW_Conf+0x20>)
 8005b5a:	6819      	ldr	r1, [r3, #0]
 8005b5c:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <SEGGER_SYSVIEW_Conf+0x24>)
 8005b5e:	4a06      	ldr	r2, [pc, #24]	; (8005b78 <SEGGER_SYSVIEW_Conf+0x28>)
 8005b60:	f000 fe56 	bl	8006810 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005b64:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005b68:	f000 fe96 	bl	8006898 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005b6c:	bf00      	nop
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20000000 	.word	0x20000000
 8005b74:	08005b35 	.word	0x08005b35
 8005b78:	080082ec 	.word	0x080082ec

08005b7c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005b82:	2300      	movs	r3, #0
 8005b84:	607b      	str	r3, [r7, #4]
 8005b86:	e033      	b.n	8005bf0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005b88:	491e      	ldr	r1, [pc, #120]	; (8005c04 <_cbSendTaskList+0x88>)
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	440b      	add	r3, r1
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	491a      	ldr	r1, [pc, #104]	; (8005c04 <_cbSendTaskList+0x88>)
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	6819      	ldr	r1, [r3, #0]
 8005baa:	4c16      	ldr	r4, [pc, #88]	; (8005c04 <_cbSendTaskList+0x88>)
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4423      	add	r3, r4
 8005bb8:	3308      	adds	r3, #8
 8005bba:	681c      	ldr	r4, [r3, #0]
 8005bbc:	4d11      	ldr	r5, [pc, #68]	; (8005c04 <_cbSendTaskList+0x88>)
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	442b      	add	r3, r5
 8005bca:	330c      	adds	r3, #12
 8005bcc:	681d      	ldr	r5, [r3, #0]
 8005bce:	4e0d      	ldr	r6, [pc, #52]	; (8005c04 <_cbSendTaskList+0x88>)
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4433      	add	r3, r6
 8005bdc:	3310      	adds	r3, #16
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	462b      	mov	r3, r5
 8005be4:	4622      	mov	r2, r4
 8005be6:	f000 f8bd 	bl	8005d64 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3301      	adds	r3, #1
 8005bee:	607b      	str	r3, [r7, #4]
 8005bf0:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <_cbSendTaskList+0x8c>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d3c6      	bcc.n	8005b88 <_cbSendTaskList+0xc>
  }
}
 8005bfa:	bf00      	nop
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c04:	200133d4 	.word	0x200133d4
 8005c08:	20013474 	.word	0x20013474

08005c0c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005c14:	f7fe fbb6 	bl	8004384 <xTaskGetTickCountFromISR>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	469a      	mov	sl, r3
 8005c1e:	4693      	mov	fp, r2
 8005c20:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005c24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	f04f 0a00 	mov.w	sl, #0
 8005c30:	f04f 0b00 	mov.w	fp, #0
 8005c34:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005c38:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005c3c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005c40:	4652      	mov	r2, sl
 8005c42:	465b      	mov	r3, fp
 8005c44:	1a14      	subs	r4, r2, r0
 8005c46:	eb63 0501 	sbc.w	r5, r3, r1
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	f04f 0300 	mov.w	r3, #0
 8005c52:	00ab      	lsls	r3, r5, #2
 8005c54:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005c58:	00a2      	lsls	r2, r4, #2
 8005c5a:	4614      	mov	r4, r2
 8005c5c:	461d      	mov	r5, r3
 8005c5e:	eb14 0800 	adds.w	r8, r4, r0
 8005c62:	eb45 0901 	adc.w	r9, r5, r1
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c7a:	4690      	mov	r8, r2
 8005c7c:	4699      	mov	r9, r3
 8005c7e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005c82:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005c86:	4610      	mov	r0, r2
 8005c88:	4619      	mov	r1, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005c94 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005ca2:	2205      	movs	r2, #5
 8005ca4:	492b      	ldr	r1, [pc, #172]	; (8005d54 <SYSVIEW_AddTask+0xc0>)
 8005ca6:	68b8      	ldr	r0, [r7, #8]
 8005ca8:	f001 fd64 	bl	8007774 <memcmp>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d04b      	beq.n	8005d4a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005cb2:	4b29      	ldr	r3, [pc, #164]	; (8005d58 <SYSVIEW_AddTask+0xc4>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b07      	cmp	r3, #7
 8005cb8:	d903      	bls.n	8005cc2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005cba:	4828      	ldr	r0, [pc, #160]	; (8005d5c <SYSVIEW_AddTask+0xc8>)
 8005cbc:	f001 fcc8 	bl	8007650 <SEGGER_SYSVIEW_Warn>
    return;
 8005cc0:	e044      	b.n	8005d4c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005cc2:	4b25      	ldr	r3, [pc, #148]	; (8005d58 <SYSVIEW_AddTask+0xc4>)
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	4926      	ldr	r1, [pc, #152]	; (8005d60 <SYSVIEW_AddTask+0xcc>)
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005cd6:	4b20      	ldr	r3, [pc, #128]	; (8005d58 <SYSVIEW_AddTask+0xc4>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4921      	ldr	r1, [pc, #132]	; (8005d60 <SYSVIEW_AddTask+0xcc>)
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005cec:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <SYSVIEW_AddTask+0xc4>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	491b      	ldr	r1, [pc, #108]	; (8005d60 <SYSVIEW_AddTask+0xcc>)
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005d02:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <SYSVIEW_AddTask+0xc4>)
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	4916      	ldr	r1, [pc, #88]	; (8005d60 <SYSVIEW_AddTask+0xcc>)
 8005d08:	4613      	mov	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	330c      	adds	r3, #12
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005d18:	4b0f      	ldr	r3, [pc, #60]	; (8005d58 <SYSVIEW_AddTask+0xc4>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4910      	ldr	r1, [pc, #64]	; (8005d60 <SYSVIEW_AddTask+0xcc>)
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	3310      	adds	r3, #16
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005d2e:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <SYSVIEW_AddTask+0xc4>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3301      	adds	r3, #1
 8005d34:	4a08      	ldr	r2, [pc, #32]	; (8005d58 <SYSVIEW_AddTask+0xc4>)
 8005d36:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 f80e 	bl	8005d64 <SYSVIEW_SendTaskInfo>
 8005d48:	e000      	b.n	8005d4c <SYSVIEW_AddTask+0xb8>
    return;
 8005d4a:	bf00      	nop

}
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	0800825c 	.word	0x0800825c
 8005d58:	20013474 	.word	0x20013474
 8005d5c:	08008264 	.word	0x08008264
 8005d60:	200133d4 	.word	0x200133d4

08005d64 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08a      	sub	sp, #40	; 0x28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005d72:	f107 0314 	add.w	r3, r7, #20
 8005d76:	2214      	movs	r2, #20
 8005d78:	2100      	movs	r1, #0
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 fd18 	bl	80077b0 <memset>
  TaskInfo.TaskID     = TaskID;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005d94:	f107 0314 	add.w	r3, r7, #20
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f001 f8c3 	bl	8006f24 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005d9e:	bf00      	nop
 8005da0:	3728      	adds	r7, #40	; 0x28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
	...

08005da8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005dae:	4b24      	ldr	r3, [pc, #144]	; (8005e40 <_DoInit+0x98>)
 8005db0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2203      	movs	r2, #3
 8005db6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2203      	movs	r2, #3
 8005dbc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a20      	ldr	r2, [pc, #128]	; (8005e44 <_DoInit+0x9c>)
 8005dc2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a20      	ldr	r2, [pc, #128]	; (8005e48 <_DoInit+0xa0>)
 8005dc8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dd0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a17      	ldr	r2, [pc, #92]	; (8005e44 <_DoInit+0x9c>)
 8005de8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a17      	ldr	r2, [pc, #92]	; (8005e4c <_DoInit+0xa4>)
 8005dee:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2210      	movs	r2, #16
 8005df4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3307      	adds	r3, #7
 8005e0c:	4a10      	ldr	r2, [pc, #64]	; (8005e50 <_DoInit+0xa8>)
 8005e0e:	6810      	ldr	r0, [r2, #0]
 8005e10:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005e12:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a0e      	ldr	r2, [pc, #56]	; (8005e54 <_DoInit+0xac>)
 8005e1a:	6810      	ldr	r0, [r2, #0]
 8005e1c:	6018      	str	r0, [r3, #0]
 8005e1e:	8891      	ldrh	r1, [r2, #4]
 8005e20:	7992      	ldrb	r2, [r2, #6]
 8005e22:	8099      	strh	r1, [r3, #4]
 8005e24:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005e26:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005e30:	f3bf 8f5f 	dmb	sy
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20013478 	.word	0x20013478
 8005e44:	080082b4 	.word	0x080082b4
 8005e48:	20013520 	.word	0x20013520
 8005e4c:	20013920 	.word	0x20013920
 8005e50:	080082c0 	.word	0x080082c0
 8005e54:	080082c4 	.word	0x080082c4

08005e58 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08a      	sub	sp, #40	; 0x28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005e64:	2300      	movs	r3, #0
 8005e66:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d905      	bls.n	8005e88 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	3b01      	subs	r3, #1
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
 8005e86:	e007      	b.n	8005e98 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	69b9      	ldr	r1, [r7, #24]
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	1acb      	subs	r3, r1, r3
 8005e92:	4413      	add	r3, r2
 8005e94:	3b01      	subs	r3, #1
 8005e96:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	bf28      	it	cs
 8005ea6:	4613      	movcs	r3, r2
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	bf28      	it	cs
 8005eb2:	4613      	movcs	r3, r2
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	6978      	ldr	r0, [r7, #20]
 8005ec6:	f001 fc65 	bl	8007794 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005eca:	6a3a      	ldr	r2, [r7, #32]
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	4413      	add	r3, r2
 8005ed0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	4413      	add	r3, r2
 8005ed8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	4413      	add	r3, r2
 8005ee8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d101      	bne.n	8005ef8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ef8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1b2      	bne.n	8005e6e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005f08:	6a3b      	ldr	r3, [r7, #32]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3728      	adds	r7, #40	; 0x28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b088      	sub	sp, #32
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d911      	bls.n	8005f5a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	6938      	ldr	r0, [r7, #16]
 8005f46:	f001 fc25 	bl	8007794 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f4a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005f4e:	69fa      	ldr	r2, [r7, #28]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	441a      	add	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005f58:	e01f      	b.n	8005f9a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	6938      	ldr	r0, [r7, #16]
 8005f6e:	f001 fc11 	bl	8007794 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	4413      	add	r3, r2
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6938      	ldr	r0, [r7, #16]
 8005f8c:	f001 fc02 	bl	8007794 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f90:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	60da      	str	r2, [r3, #12]
}
 8005f9a:	bf00      	nop
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005fa2:	b480      	push	{r7}
 8005fa4:	b087      	sub	sp, #28
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d808      	bhi.n	8005fd0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	1ad2      	subs	r2, r2, r3
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4413      	add	r3, r2
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	e004      	b.n	8005fda <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005fda:	697b      	ldr	r3, [r7, #20]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	371c      	adds	r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08c      	sub	sp, #48	; 0x30
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005ff4:	4b3e      	ldr	r3, [pc, #248]	; (80060f0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005ff6:	623b      	str	r3, [r7, #32]
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <SEGGER_RTT_ReadNoLock+0x1e>
 8006002:	f7ff fed1 	bl	8005da8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4613      	mov	r3, r2
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	4413      	add	r3, r2
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	3360      	adds	r3, #96	; 0x60
 8006012:	4a37      	ldr	r2, [pc, #220]	; (80060f0 <SEGGER_RTT_ReadNoLock+0x108>)
 8006014:	4413      	add	r3, r2
 8006016:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006028:	2300      	movs	r3, #0
 800602a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800602c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	429a      	cmp	r2, r3
 8006032:	d92b      	bls.n	800608c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4293      	cmp	r3, r2
 8006044:	bf28      	it	cs
 8006046:	4613      	movcs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	4413      	add	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	6939      	ldr	r1, [r7, #16]
 8006058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800605a:	f001 fb9b 	bl	8007794 <memcpy>
    NumBytesRead += NumBytesRem;
 800605e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	4413      	add	r3, r2
 8006064:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	4413      	add	r3, r2
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	4413      	add	r3, r2
 800607c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006084:	429a      	cmp	r2, r3
 8006086:	d101      	bne.n	800608c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006088:	2300      	movs	r3, #0
 800608a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4293      	cmp	r3, r2
 800609a:	bf28      	it	cs
 800609c:	4613      	movcs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d019      	beq.n	80060da <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	4413      	add	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	6939      	ldr	r1, [r7, #16]
 80060b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060b6:	f001 fb6d 	bl	8007794 <memcpy>
    NumBytesRead += NumBytesRem;
 80060ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	4413      	add	r3, r2
 80060c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80060c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	4413      	add	r3, r2
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80060d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	4413      	add	r3, r2
 80060d8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80060da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060e4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80060e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3730      	adds	r7, #48	; 0x30
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	20013478 	.word	0x20013478

080060f4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	4613      	mov	r3, r2
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	4413      	add	r3, r2
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	4a1f      	ldr	r2, [pc, #124]	; (8006190 <SEGGER_RTT_WriteNoLock+0x9c>)
 8006112:	4413      	add	r3, r2
 8006114:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d029      	beq.n	8006172 <SEGGER_RTT_WriteNoLock+0x7e>
 800611e:	2b02      	cmp	r3, #2
 8006120:	d82e      	bhi.n	8006180 <SEGGER_RTT_WriteNoLock+0x8c>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <SEGGER_RTT_WriteNoLock+0x38>
 8006126:	2b01      	cmp	r3, #1
 8006128:	d013      	beq.n	8006152 <SEGGER_RTT_WriteNoLock+0x5e>
 800612a:	e029      	b.n	8006180 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800612c:	6978      	ldr	r0, [r7, #20]
 800612e:	f7ff ff38 	bl	8005fa2 <_GetAvailWriteSpace>
 8006132:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	429a      	cmp	r2, r3
 800613a:	d202      	bcs.n	8006142 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800613c:	2300      	movs	r3, #0
 800613e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8006140:	e021      	b.n	8006186 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	69b9      	ldr	r1, [r7, #24]
 800614a:	6978      	ldr	r0, [r7, #20]
 800614c:	f7ff fee1 	bl	8005f12 <_WriteNoCheck>
    break;
 8006150:	e019      	b.n	8006186 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006152:	6978      	ldr	r0, [r7, #20]
 8006154:	f7ff ff25 	bl	8005fa2 <_GetAvailWriteSpace>
 8006158:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	4293      	cmp	r3, r2
 8006160:	bf28      	it	cs
 8006162:	4613      	movcs	r3, r2
 8006164:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8006166:	69fa      	ldr	r2, [r7, #28]
 8006168:	69b9      	ldr	r1, [r7, #24]
 800616a:	6978      	ldr	r0, [r7, #20]
 800616c:	f7ff fed1 	bl	8005f12 <_WriteNoCheck>
    break;
 8006170:	e009      	b.n	8006186 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	69b9      	ldr	r1, [r7, #24]
 8006176:	6978      	ldr	r0, [r7, #20]
 8006178:	f7ff fe6e 	bl	8005e58 <_WriteBlocking>
 800617c:	61f8      	str	r0, [r7, #28]
    break;
 800617e:	e002      	b.n	8006186 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8006180:	2300      	movs	r3, #0
 8006182:	61fb      	str	r3, [r7, #28]
    break;
 8006184:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8006186:	69fb      	ldr	r3, [r7, #28]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3720      	adds	r7, #32
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	20013478 	.word	0x20013478

08006194 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80061a0:	4b0e      	ldr	r3, [pc, #56]	; (80061dc <SEGGER_RTT_Write+0x48>)
 80061a2:	61fb      	str	r3, [r7, #28]
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <SEGGER_RTT_Write+0x1e>
 80061ae:	f7ff fdfb 	bl	8005da8 <_DoInit>
  SEGGER_RTT_LOCK();
 80061b2:	f3ef 8311 	mrs	r3, BASEPRI
 80061b6:	f04f 0120 	mov.w	r1, #32
 80061ba:	f381 8811 	msr	BASEPRI, r1
 80061be:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f7ff ff95 	bl	80060f4 <SEGGER_RTT_WriteNoLock>
 80061ca:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80061d2:	697b      	ldr	r3, [r7, #20]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3720      	adds	r7, #32
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	20013478 	.word	0x20013478

080061e0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80061ee:	4b3d      	ldr	r3, [pc, #244]	; (80062e4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80061f0:	61bb      	str	r3, [r7, #24]
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <SEGGER_RTT_AllocUpBuffer+0x20>
 80061fc:	f7ff fdd4 	bl	8005da8 <_DoInit>
  SEGGER_RTT_LOCK();
 8006200:	f3ef 8311 	mrs	r3, BASEPRI
 8006204:	f04f 0120 	mov.w	r1, #32
 8006208:	f381 8811 	msr	BASEPRI, r1
 800620c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800620e:	4b35      	ldr	r3, [pc, #212]	; (80062e4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006210:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8006216:	6939      	ldr	r1, [r7, #16]
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	4613      	mov	r3, r2
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	4413      	add	r3, r2
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	440b      	add	r3, r1
 8006226:	3304      	adds	r3, #4
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d008      	beq.n	8006240 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	3301      	adds	r3, #1
 8006232:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	69fa      	ldr	r2, [r7, #28]
 800623a:	429a      	cmp	r2, r3
 800623c:	dbeb      	blt.n	8006216 <SEGGER_RTT_AllocUpBuffer+0x36>
 800623e:	e000      	b.n	8006242 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8006240:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	429a      	cmp	r2, r3
 800624a:	da3f      	bge.n	80062cc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800624c:	6939      	ldr	r1, [r7, #16]
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	4613      	mov	r3, r2
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	4413      	add	r3, r2
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	440b      	add	r3, r1
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006260:	6939      	ldr	r1, [r7, #16]
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	1c5a      	adds	r2, r3, #1
 8006266:	4613      	mov	r3, r2
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	4413      	add	r3, r2
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	440b      	add	r3, r1
 8006270:	3304      	adds	r3, #4
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006276:	6939      	ldr	r1, [r7, #16]
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	4613      	mov	r3, r2
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	4413      	add	r3, r2
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	440b      	add	r3, r1
 8006284:	3320      	adds	r3, #32
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800628a:	6939      	ldr	r1, [r7, #16]
 800628c:	69fa      	ldr	r2, [r7, #28]
 800628e:	4613      	mov	r3, r2
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	4413      	add	r3, r2
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	440b      	add	r3, r1
 8006298:	3328      	adds	r3, #40	; 0x28
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800629e:	6939      	ldr	r1, [r7, #16]
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	4613      	mov	r3, r2
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	4413      	add	r3, r2
 80062a8:	00db      	lsls	r3, r3, #3
 80062aa:	440b      	add	r3, r1
 80062ac:	3324      	adds	r3, #36	; 0x24
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80062b2:	6939      	ldr	r1, [r7, #16]
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	4613      	mov	r3, r2
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	4413      	add	r3, r2
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	440b      	add	r3, r1
 80062c0:	332c      	adds	r3, #44	; 0x2c
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80062c6:	f3bf 8f5f 	dmb	sy
 80062ca:	e002      	b.n	80062d2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80062cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062d0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80062d8:	69fb      	ldr	r3, [r7, #28]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3720      	adds	r7, #32
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20013478 	.word	0x20013478

080062e8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80062f6:	4b33      	ldr	r3, [pc, #204]	; (80063c4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006304:	f7ff fd50 	bl	8005da8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006308:	4b2e      	ldr	r3, [pc, #184]	; (80063c4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800630a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	461a      	mov	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4293      	cmp	r3, r2
 8006316:	d24d      	bcs.n	80063b4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8006318:	f3ef 8311 	mrs	r3, BASEPRI
 800631c:	f04f 0120 	mov.w	r1, #32
 8006320:	f381 8811 	msr	BASEPRI, r1
 8006324:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d031      	beq.n	8006390 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800632c:	6979      	ldr	r1, [r7, #20]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4613      	mov	r3, r2
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	4413      	add	r3, r2
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	440b      	add	r3, r1
 800633a:	3360      	adds	r3, #96	; 0x60
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8006340:	6979      	ldr	r1, [r7, #20]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4613      	mov	r3, r2
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	4413      	add	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	440b      	add	r3, r1
 800634e:	3364      	adds	r3, #100	; 0x64
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8006354:	6979      	ldr	r1, [r7, #20]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4613      	mov	r3, r2
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	4413      	add	r3, r2
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	440b      	add	r3, r1
 8006362:	3368      	adds	r3, #104	; 0x68
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8006368:	6979      	ldr	r1, [r7, #20]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4613      	mov	r3, r2
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	4413      	add	r3, r2
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	440b      	add	r3, r1
 8006376:	3370      	adds	r3, #112	; 0x70
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800637c:	6979      	ldr	r1, [r7, #20]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4613      	mov	r3, r2
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	4413      	add	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	440b      	add	r3, r1
 800638a:	336c      	adds	r3, #108	; 0x6c
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8006390:	6979      	ldr	r1, [r7, #20]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4613      	mov	r3, r2
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	4413      	add	r3, r2
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	440b      	add	r3, r1
 800639e:	3374      	adds	r3, #116	; 0x74
 80063a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063a2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80063a4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	e002      	b.n	80063ba <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80063b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063b8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80063ba:	69fb      	ldr	r3, [r7, #28]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3720      	adds	r7, #32
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	20013478 	.word	0x20013478

080063c8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80063d8:	e002      	b.n	80063e0 <_EncodeStr+0x18>
    Len++;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	3301      	adds	r3, #1
 80063de:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	4413      	add	r3, r2
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1f6      	bne.n	80063da <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d901      	bls.n	80063f8 <_EncodeStr+0x30>
    Len = Limit;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	2bfe      	cmp	r3, #254	; 0xfe
 80063fc:	d806      	bhi.n	800640c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	60fa      	str	r2, [r7, #12]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	e011      	b.n	8006430 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	60fa      	str	r2, [r7, #12]
 8006412:	22ff      	movs	r2, #255	; 0xff
 8006414:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	60fa      	str	r2, [r7, #12]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	0a19      	lsrs	r1, r3, #8
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	60fa      	str	r2, [r7, #12]
 800642c:	b2ca      	uxtb	r2, r1
 800642e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006434:	e00a      	b.n	800644c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	1c53      	adds	r3, r2, #1
 800643a:	60bb      	str	r3, [r7, #8]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	1c59      	adds	r1, r3, #1
 8006440:	60f9      	str	r1, [r7, #12]
 8006442:	7812      	ldrb	r2, [r2, #0]
 8006444:	701a      	strb	r2, [r3, #0]
    n++;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	3301      	adds	r3, #1
 800644a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	429a      	cmp	r2, r3
 8006452:	d3f0      	bcc.n	8006436 <_EncodeStr+0x6e>
  }
  return pPayload;
 8006454:	68fb      	ldr	r3, [r7, #12]
}
 8006456:	4618      	mov	r0, r3
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	3304      	adds	r3, #4
}
 800646e:	4618      	mov	r0, r3
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
	...

0800647c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006482:	4b36      	ldr	r3, [pc, #216]	; (800655c <_HandleIncomingPacket+0xe0>)
 8006484:	7e1b      	ldrb	r3, [r3, #24]
 8006486:	4618      	mov	r0, r3
 8006488:	1cfb      	adds	r3, r7, #3
 800648a:	2201      	movs	r2, #1
 800648c:	4619      	mov	r1, r3
 800648e:	f7ff fdab 	bl	8005fe8 <SEGGER_RTT_ReadNoLock>
 8006492:	4603      	mov	r3, r0
 8006494:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	dd54      	ble.n	8006546 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	2b80      	cmp	r3, #128	; 0x80
 80064a0:	d032      	beq.n	8006508 <_HandleIncomingPacket+0x8c>
 80064a2:	2b80      	cmp	r3, #128	; 0x80
 80064a4:	dc42      	bgt.n	800652c <_HandleIncomingPacket+0xb0>
 80064a6:	2b07      	cmp	r3, #7
 80064a8:	dc16      	bgt.n	80064d8 <_HandleIncomingPacket+0x5c>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	dd3e      	ble.n	800652c <_HandleIncomingPacket+0xb0>
 80064ae:	3b01      	subs	r3, #1
 80064b0:	2b06      	cmp	r3, #6
 80064b2:	d83b      	bhi.n	800652c <_HandleIncomingPacket+0xb0>
 80064b4:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <_HandleIncomingPacket+0x40>)
 80064b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ba:	bf00      	nop
 80064bc:	080064df 	.word	0x080064df
 80064c0:	080064e5 	.word	0x080064e5
 80064c4:	080064eb 	.word	0x080064eb
 80064c8:	080064f1 	.word	0x080064f1
 80064cc:	080064f7 	.word	0x080064f7
 80064d0:	080064fd 	.word	0x080064fd
 80064d4:	08006503 	.word	0x08006503
 80064d8:	2b7f      	cmp	r3, #127	; 0x7f
 80064da:	d036      	beq.n	800654a <_HandleIncomingPacket+0xce>
 80064dc:	e026      	b.n	800652c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80064de:	f000 fba7 	bl	8006c30 <SEGGER_SYSVIEW_Start>
      break;
 80064e2:	e037      	b.n	8006554 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80064e4:	f000 fc5e 	bl	8006da4 <SEGGER_SYSVIEW_Stop>
      break;
 80064e8:	e034      	b.n	8006554 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80064ea:	f000 fe37 	bl	800715c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80064ee:	e031      	b.n	8006554 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80064f0:	f000 fdfc 	bl	80070ec <SEGGER_SYSVIEW_SendTaskList>
      break;
 80064f4:	e02e      	b.n	8006554 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80064f6:	f000 fc7b 	bl	8006df0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80064fa:	e02b      	b.n	8006554 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80064fc:	f001 f86a 	bl	80075d4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006500:	e028      	b.n	8006554 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006502:	f001 f849 	bl	8007598 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006506:	e025      	b.n	8006554 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006508:	4b14      	ldr	r3, [pc, #80]	; (800655c <_HandleIncomingPacket+0xe0>)
 800650a:	7e1b      	ldrb	r3, [r3, #24]
 800650c:	4618      	mov	r0, r3
 800650e:	1cfb      	adds	r3, r7, #3
 8006510:	2201      	movs	r2, #1
 8006512:	4619      	mov	r1, r3
 8006514:	f7ff fd68 	bl	8005fe8 <SEGGER_RTT_ReadNoLock>
 8006518:	4603      	mov	r3, r0
 800651a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	dd15      	ble.n	800654e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006522:	78fb      	ldrb	r3, [r7, #3]
 8006524:	4618      	mov	r0, r3
 8006526:	f000 ffb7 	bl	8007498 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800652a:	e010      	b.n	800654e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	b25b      	sxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	da0e      	bge.n	8006552 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006534:	4b09      	ldr	r3, [pc, #36]	; (800655c <_HandleIncomingPacket+0xe0>)
 8006536:	7e1b      	ldrb	r3, [r3, #24]
 8006538:	4618      	mov	r0, r3
 800653a:	1cfb      	adds	r3, r7, #3
 800653c:	2201      	movs	r2, #1
 800653e:	4619      	mov	r1, r3
 8006540:	f7ff fd52 	bl	8005fe8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006544:	e005      	b.n	8006552 <_HandleIncomingPacket+0xd6>
    }
  }
 8006546:	bf00      	nop
 8006548:	e004      	b.n	8006554 <_HandleIncomingPacket+0xd8>
      break;
 800654a:	bf00      	nop
 800654c:	e002      	b.n	8006554 <_HandleIncomingPacket+0xd8>
      break;
 800654e:	bf00      	nop
 8006550:	e000      	b.n	8006554 <_HandleIncomingPacket+0xd8>
      break;
 8006552:	bf00      	nop
}
 8006554:	bf00      	nop
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20014938 	.word	0x20014938

08006560 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006560:	b580      	push	{r7, lr}
 8006562:	b08c      	sub	sp, #48	; 0x30
 8006564:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006566:	2301      	movs	r3, #1
 8006568:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800656a:	1d3b      	adds	r3, r7, #4
 800656c:	3301      	adds	r3, #1
 800656e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006574:	4b31      	ldr	r3, [pc, #196]	; (800663c <_TrySendOverflowPacket+0xdc>)
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	62bb      	str	r3, [r7, #40]	; 0x28
 800657a:	e00b      	b.n	8006594 <_TrySendOverflowPacket+0x34>
 800657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657e:	b2da      	uxtb	r2, r3
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	1c59      	adds	r1, r3, #1
 8006584:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006586:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	09db      	lsrs	r3, r3, #7
 8006592:	62bb      	str	r3, [r7, #40]	; 0x28
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	2b7f      	cmp	r3, #127	; 0x7f
 8006598:	d8f0      	bhi.n	800657c <_TrySendOverflowPacket+0x1c>
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80065aa:	4b25      	ldr	r3, [pc, #148]	; (8006640 <_TrySendOverflowPacket+0xe0>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80065b0:	4b22      	ldr	r3, [pc, #136]	; (800663c <_TrySendOverflowPacket+0xdc>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	623b      	str	r3, [r7, #32]
 80065c2:	e00b      	b.n	80065dc <_TrySendOverflowPacket+0x7c>
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	1c59      	adds	r1, r3, #1
 80065cc:	6279      	str	r1, [r7, #36]	; 0x24
 80065ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	09db      	lsrs	r3, r3, #7
 80065da:	623b      	str	r3, [r7, #32]
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	2b7f      	cmp	r3, #127	; 0x7f
 80065e0:	d8f0      	bhi.n	80065c4 <_TrySendOverflowPacket+0x64>
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	627a      	str	r2, [r7, #36]	; 0x24
 80065e8:	6a3a      	ldr	r2, [r7, #32]
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80065f2:	4b12      	ldr	r3, [pc, #72]	; (800663c <_TrySendOverflowPacket+0xdc>)
 80065f4:	785b      	ldrb	r3, [r3, #1]
 80065f6:	4618      	mov	r0, r3
 80065f8:	1d3b      	adds	r3, r7, #4
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	461a      	mov	r2, r3
 8006600:	1d3b      	adds	r3, r7, #4
 8006602:	4619      	mov	r1, r3
 8006604:	f7f9 fe0c 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006608:	4603      	mov	r3, r0
 800660a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d009      	beq.n	8006626 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006612:	4a0a      	ldr	r2, [pc, #40]	; (800663c <_TrySendOverflowPacket+0xdc>)
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006618:	4b08      	ldr	r3, [pc, #32]	; (800663c <_TrySendOverflowPacket+0xdc>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	3b01      	subs	r3, #1
 800661e:	b2da      	uxtb	r2, r3
 8006620:	4b06      	ldr	r3, [pc, #24]	; (800663c <_TrySendOverflowPacket+0xdc>)
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	e004      	b.n	8006630 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006626:	4b05      	ldr	r3, [pc, #20]	; (800663c <_TrySendOverflowPacket+0xdc>)
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	3301      	adds	r3, #1
 800662c:	4a03      	ldr	r2, [pc, #12]	; (800663c <_TrySendOverflowPacket+0xdc>)
 800662e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006630:	693b      	ldr	r3, [r7, #16]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3730      	adds	r7, #48	; 0x30
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20014938 	.word	0x20014938
 8006640:	e0001004 	.word	0xe0001004

08006644 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006644:	b580      	push	{r7, lr}
 8006646:	b08a      	sub	sp, #40	; 0x28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006650:	4b6c      	ldr	r3, [pc, #432]	; (8006804 <_SendPacket+0x1c0>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d010      	beq.n	800667a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006658:	4b6a      	ldr	r3, [pc, #424]	; (8006804 <_SendPacket+0x1c0>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80a3 	beq.w	80067a8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006662:	4b68      	ldr	r3, [pc, #416]	; (8006804 <_SendPacket+0x1c0>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b02      	cmp	r3, #2
 8006668:	d109      	bne.n	800667e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800666a:	f7ff ff79 	bl	8006560 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800666e:	4b65      	ldr	r3, [pc, #404]	; (8006804 <_SendPacket+0x1c0>)
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b01      	cmp	r3, #1
 8006674:	f040 809a 	bne.w	80067ac <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8006678:	e001      	b.n	800667e <_SendPacket+0x3a>
    goto Send;
 800667a:	bf00      	nop
 800667c:	e000      	b.n	8006680 <_SendPacket+0x3c>
Send:
 800667e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b1f      	cmp	r3, #31
 8006684:	d809      	bhi.n	800669a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006686:	4b5f      	ldr	r3, [pc, #380]	; (8006804 <_SendPacket+0x1c0>)
 8006688:	69da      	ldr	r2, [r3, #28]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	fa22 f303 	lsr.w	r3, r2, r3
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	f040 808b 	bne.w	80067b0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b17      	cmp	r3, #23
 800669e:	d807      	bhi.n	80066b0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e03d      	b.n	800672c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	2b7f      	cmp	r3, #127	; 0x7f
 80066bc:	d912      	bls.n	80066e4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	09da      	lsrs	r2, r3, #7
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	b2d2      	uxtb	r2, r2
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	3a01      	subs	r2, #1
 80066d6:	60fa      	str	r2, [r7, #12]
 80066d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	e006      	b.n	80066f2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b7f      	cmp	r3, #127	; 0x7f
 80066f6:	d912      	bls.n	800671e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	09da      	lsrs	r2, r3, #7
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3b01      	subs	r3, #1
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	b2db      	uxtb	r3, r3
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	3a01      	subs	r2, #1
 8006710:	60fa      	str	r2, [r7, #12]
 8006712:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006716:	b2da      	uxtb	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	e006      	b.n	800672c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3b01      	subs	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	b2da      	uxtb	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800672c:	4b36      	ldr	r3, [pc, #216]	; (8006808 <_SendPacket+0x1c4>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006732:	4b34      	ldr	r3, [pc, #208]	; (8006804 <_SendPacket+0x1c0>)
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	623b      	str	r3, [r7, #32]
 8006744:	e00b      	b.n	800675e <_SendPacket+0x11a>
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	b2da      	uxtb	r2, r3
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	1c59      	adds	r1, r3, #1
 800674e:	6279      	str	r1, [r7, #36]	; 0x24
 8006750:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	701a      	strb	r2, [r3, #0]
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	09db      	lsrs	r3, r3, #7
 800675c:	623b      	str	r3, [r7, #32]
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	2b7f      	cmp	r3, #127	; 0x7f
 8006762:	d8f0      	bhi.n	8006746 <_SendPacket+0x102>
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	627a      	str	r2, [r7, #36]	; 0x24
 800676a:	6a3a      	ldr	r2, [r7, #32]
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006774:	4b23      	ldr	r3, [pc, #140]	; (8006804 <_SendPacket+0x1c0>)
 8006776:	785b      	ldrb	r3, [r3, #1]
 8006778:	4618      	mov	r0, r3
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	461a      	mov	r2, r3
 8006782:	68f9      	ldr	r1, [r7, #12]
 8006784:	f7f9 fd4c 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006788:	4603      	mov	r3, r0
 800678a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006792:	4a1c      	ldr	r2, [pc, #112]	; (8006804 <_SendPacket+0x1c0>)
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	60d3      	str	r3, [r2, #12]
 8006798:	e00b      	b.n	80067b2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800679a:	4b1a      	ldr	r3, [pc, #104]	; (8006804 <_SendPacket+0x1c0>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	3301      	adds	r3, #1
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	4b18      	ldr	r3, [pc, #96]	; (8006804 <_SendPacket+0x1c0>)
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	e004      	b.n	80067b2 <_SendPacket+0x16e>
    goto SendDone;
 80067a8:	bf00      	nop
 80067aa:	e002      	b.n	80067b2 <_SendPacket+0x16e>
      goto SendDone;
 80067ac:	bf00      	nop
 80067ae:	e000      	b.n	80067b2 <_SendPacket+0x16e>
      goto SendDone;
 80067b0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80067b2:	4b14      	ldr	r3, [pc, #80]	; (8006804 <_SendPacket+0x1c0>)
 80067b4:	7e1b      	ldrb	r3, [r3, #24]
 80067b6:	4619      	mov	r1, r3
 80067b8:	4a14      	ldr	r2, [pc, #80]	; (800680c <_SendPacket+0x1c8>)
 80067ba:	460b      	mov	r3, r1
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	440b      	add	r3, r1
 80067c0:	00db      	lsls	r3, r3, #3
 80067c2:	4413      	add	r3, r2
 80067c4:	336c      	adds	r3, #108	; 0x6c
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	4b0e      	ldr	r3, [pc, #56]	; (8006804 <_SendPacket+0x1c0>)
 80067ca:	7e1b      	ldrb	r3, [r3, #24]
 80067cc:	4618      	mov	r0, r3
 80067ce:	490f      	ldr	r1, [pc, #60]	; (800680c <_SendPacket+0x1c8>)
 80067d0:	4603      	mov	r3, r0
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	4403      	add	r3, r0
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	440b      	add	r3, r1
 80067da:	3370      	adds	r3, #112	; 0x70
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d00b      	beq.n	80067fa <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80067e2:	4b08      	ldr	r3, [pc, #32]	; (8006804 <_SendPacket+0x1c0>)
 80067e4:	789b      	ldrb	r3, [r3, #2]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d107      	bne.n	80067fa <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80067ea:	4b06      	ldr	r3, [pc, #24]	; (8006804 <_SendPacket+0x1c0>)
 80067ec:	2201      	movs	r2, #1
 80067ee:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80067f0:	f7ff fe44 	bl	800647c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80067f4:	4b03      	ldr	r3, [pc, #12]	; (8006804 <_SendPacket+0x1c0>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80067fa:	bf00      	nop
 80067fc:	3728      	adds	r7, #40	; 0x28
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20014938 	.word	0x20014938
 8006808:	e0001004 	.word	0xe0001004
 800680c:	20013478 	.word	0x20013478

08006810 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800681e:	2300      	movs	r3, #0
 8006820:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006824:	4917      	ldr	r1, [pc, #92]	; (8006884 <SEGGER_SYSVIEW_Init+0x74>)
 8006826:	4818      	ldr	r0, [pc, #96]	; (8006888 <SEGGER_SYSVIEW_Init+0x78>)
 8006828:	f7ff fcda 	bl	80061e0 <SEGGER_RTT_AllocUpBuffer>
 800682c:	4603      	mov	r3, r0
 800682e:	b2da      	uxtb	r2, r3
 8006830:	4b16      	ldr	r3, [pc, #88]	; (800688c <SEGGER_SYSVIEW_Init+0x7c>)
 8006832:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006834:	4b15      	ldr	r3, [pc, #84]	; (800688c <SEGGER_SYSVIEW_Init+0x7c>)
 8006836:	785a      	ldrb	r2, [r3, #1]
 8006838:	4b14      	ldr	r3, [pc, #80]	; (800688c <SEGGER_SYSVIEW_Init+0x7c>)
 800683a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800683c:	4b13      	ldr	r3, [pc, #76]	; (800688c <SEGGER_SYSVIEW_Init+0x7c>)
 800683e:	7e1b      	ldrb	r3, [r3, #24]
 8006840:	4618      	mov	r0, r3
 8006842:	2300      	movs	r3, #0
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	2308      	movs	r3, #8
 8006848:	4a11      	ldr	r2, [pc, #68]	; (8006890 <SEGGER_SYSVIEW_Init+0x80>)
 800684a:	490f      	ldr	r1, [pc, #60]	; (8006888 <SEGGER_SYSVIEW_Init+0x78>)
 800684c:	f7ff fd4c 	bl	80062e8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006850:	4b0e      	ldr	r3, [pc, #56]	; (800688c <SEGGER_SYSVIEW_Init+0x7c>)
 8006852:	2200      	movs	r2, #0
 8006854:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006856:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <SEGGER_SYSVIEW_Init+0x84>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a0c      	ldr	r2, [pc, #48]	; (800688c <SEGGER_SYSVIEW_Init+0x7c>)
 800685c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800685e:	4a0b      	ldr	r2, [pc, #44]	; (800688c <SEGGER_SYSVIEW_Init+0x7c>)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006864:	4a09      	ldr	r2, [pc, #36]	; (800688c <SEGGER_SYSVIEW_Init+0x7c>)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800686a:	4a08      	ldr	r2, [pc, #32]	; (800688c <SEGGER_SYSVIEW_Init+0x7c>)
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006870:	4a06      	ldr	r2, [pc, #24]	; (800688c <SEGGER_SYSVIEW_Init+0x7c>)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006876:	4b05      	ldr	r3, [pc, #20]	; (800688c <SEGGER_SYSVIEW_Init+0x7c>)
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800687c:	bf00      	nop
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	20013930 	.word	0x20013930
 8006888:	080082cc 	.word	0x080082cc
 800688c:	20014938 	.word	0x20014938
 8006890:	20014930 	.word	0x20014930
 8006894:	e0001004 	.word	0xe0001004

08006898 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80068a0:	4a04      	ldr	r2, [pc, #16]	; (80068b4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6113      	str	r3, [r2, #16]
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	20014938 	.word	0x20014938

080068b8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068c0:	f3ef 8311 	mrs	r3, BASEPRI
 80068c4:	f04f 0120 	mov.w	r1, #32
 80068c8:	f381 8811 	msr	BASEPRI, r1
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	4808      	ldr	r0, [pc, #32]	; (80068f0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80068d0:	f7ff fdc7 	bl	8006462 <_PreparePacket>
 80068d4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	68b8      	ldr	r0, [r7, #8]
 80068dc:	f7ff feb2 	bl	8006644 <_SendPacket>
  RECORD_END();
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f383 8811 	msr	BASEPRI, r3
}
 80068e6:	bf00      	nop
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20014968 	.word	0x20014968

080068f4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006902:	f04f 0120 	mov.w	r1, #32
 8006906:	f381 8811 	msr	BASEPRI, r1
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	4816      	ldr	r0, [pc, #88]	; (8006968 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800690e:	f7ff fda8 	bl	8006462 <_PreparePacket>
 8006912:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	61fb      	str	r3, [r7, #28]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	61bb      	str	r3, [r7, #24]
 8006920:	e00b      	b.n	800693a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	b2da      	uxtb	r2, r3
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	1c59      	adds	r1, r3, #1
 800692a:	61f9      	str	r1, [r7, #28]
 800692c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	701a      	strb	r2, [r3, #0]
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	09db      	lsrs	r3, r3, #7
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	2b7f      	cmp	r3, #127	; 0x7f
 800693e:	d8f0      	bhi.n	8006922 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	61fa      	str	r2, [r7, #28]
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	701a      	strb	r2, [r3, #0]
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	68f9      	ldr	r1, [r7, #12]
 8006954:	6938      	ldr	r0, [r7, #16]
 8006956:	f7ff fe75 	bl	8006644 <_SendPacket>
  RECORD_END();
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f383 8811 	msr	BASEPRI, r3
}
 8006960:	bf00      	nop
 8006962:	3720      	adds	r7, #32
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	20014968 	.word	0x20014968

0800696c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800696c:	b580      	push	{r7, lr}
 800696e:	b08c      	sub	sp, #48	; 0x30
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006978:	f3ef 8311 	mrs	r3, BASEPRI
 800697c:	f04f 0120 	mov.w	r1, #32
 8006980:	f381 8811 	msr	BASEPRI, r1
 8006984:	61fb      	str	r3, [r7, #28]
 8006986:	4825      	ldr	r0, [pc, #148]	; (8006a1c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006988:	f7ff fd6b 	bl	8006462 <_PreparePacket>
 800698c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	62bb      	str	r3, [r7, #40]	; 0x28
 800699a:	e00b      	b.n	80069b4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a2:	1c59      	adds	r1, r3, #1
 80069a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	701a      	strb	r2, [r3, #0]
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	09db      	lsrs	r3, r3, #7
 80069b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	2b7f      	cmp	r3, #127	; 0x7f
 80069b8:	d8f0      	bhi.n	800699c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80069ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	701a      	strb	r2, [r3, #0]
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	623b      	str	r3, [r7, #32]
 80069d2:	e00b      	b.n	80069ec <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	1c59      	adds	r1, r3, #1
 80069dc:	6279      	str	r1, [r7, #36]	; 0x24
 80069de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	09db      	lsrs	r3, r3, #7
 80069ea:	623b      	str	r3, [r7, #32]
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	2b7f      	cmp	r3, #127	; 0x7f
 80069f0:	d8f0      	bhi.n	80069d4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	627a      	str	r2, [r7, #36]	; 0x24
 80069f8:	6a3a      	ldr	r2, [r7, #32]
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	6979      	ldr	r1, [r7, #20]
 8006a06:	69b8      	ldr	r0, [r7, #24]
 8006a08:	f7ff fe1c 	bl	8006644 <_SendPacket>
  RECORD_END();
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	f383 8811 	msr	BASEPRI, r3
}
 8006a12:	bf00      	nop
 8006a14:	3730      	adds	r7, #48	; 0x30
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20014968 	.word	0x20014968

08006a20 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08e      	sub	sp, #56	; 0x38
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a2e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a32:	f04f 0120 	mov.w	r1, #32
 8006a36:	f381 8811 	msr	BASEPRI, r1
 8006a3a:	61fb      	str	r3, [r7, #28]
 8006a3c:	4832      	ldr	r0, [pc, #200]	; (8006b08 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006a3e:	f7ff fd10 	bl	8006462 <_PreparePacket>
 8006a42:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	633b      	str	r3, [r7, #48]	; 0x30
 8006a50:	e00b      	b.n	8006a6a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a58:	1c59      	adds	r1, r3, #1
 8006a5a:	6379      	str	r1, [r7, #52]	; 0x34
 8006a5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	09db      	lsrs	r3, r3, #7
 8006a68:	633b      	str	r3, [r7, #48]	; 0x30
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a6e:	d8f0      	bhi.n	8006a52 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	637a      	str	r2, [r7, #52]	; 0x34
 8006a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	701a      	strb	r2, [r3, #0]
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a88:	e00b      	b.n	8006aa2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	1c59      	adds	r1, r3, #1
 8006a92:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	09db      	lsrs	r3, r3, #7
 8006aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa4:	2b7f      	cmp	r3, #127	; 0x7f
 8006aa6:	d8f0      	bhi.n	8006a8a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ab0:	b2d2      	uxtb	r2, r2
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	623b      	str	r3, [r7, #32]
 8006ac0:	e00b      	b.n	8006ada <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	1c59      	adds	r1, r3, #1
 8006aca:	6279      	str	r1, [r7, #36]	; 0x24
 8006acc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	09db      	lsrs	r3, r3, #7
 8006ad8:	623b      	str	r3, [r7, #32]
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	2b7f      	cmp	r3, #127	; 0x7f
 8006ade:	d8f0      	bhi.n	8006ac2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	627a      	str	r2, [r7, #36]	; 0x24
 8006ae6:	6a3a      	ldr	r2, [r7, #32]
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	6979      	ldr	r1, [r7, #20]
 8006af4:	69b8      	ldr	r0, [r7, #24]
 8006af6:	f7ff fda5 	bl	8006644 <_SendPacket>
  RECORD_END();
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	f383 8811 	msr	BASEPRI, r3
}
 8006b00:	bf00      	nop
 8006b02:	3738      	adds	r7, #56	; 0x38
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	20014968 	.word	0x20014968

08006b0c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b090      	sub	sp, #64	; 0x40
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b1a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b1e:	f04f 0120 	mov.w	r1, #32
 8006b22:	f381 8811 	msr	BASEPRI, r1
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	4840      	ldr	r0, [pc, #256]	; (8006c2c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006b2a:	f7ff fc9a 	bl	8006462 <_PreparePacket>
 8006b2e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b3c:	e00b      	b.n	8006b56 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b44:	1c59      	adds	r1, r3, #1
 8006b46:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006b48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	701a      	strb	r2, [r3, #0]
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	09db      	lsrs	r3, r3, #7
 8006b54:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b58:	2b7f      	cmp	r3, #127	; 0x7f
 8006b5a:	d8f0      	bhi.n	8006b3e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	633b      	str	r3, [r7, #48]	; 0x30
 8006b74:	e00b      	b.n	8006b8e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7c:	1c59      	adds	r1, r3, #1
 8006b7e:	6379      	str	r1, [r7, #52]	; 0x34
 8006b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	09db      	lsrs	r3, r3, #7
 8006b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b90:	2b7f      	cmp	r3, #127	; 0x7f
 8006b92:	d8f0      	bhi.n	8006b76 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	637a      	str	r2, [r7, #52]	; 0x34
 8006b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bac:	e00b      	b.n	8006bc6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb4:	1c59      	adds	r1, r3, #1
 8006bb6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bbc:	b2d2      	uxtb	r2, r2
 8006bbe:	701a      	strb	r2, [r3, #0]
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	09db      	lsrs	r3, r3, #7
 8006bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8006bca:	d8f0      	bhi.n	8006bae <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bd4:	b2d2      	uxtb	r2, r2
 8006bd6:	701a      	strb	r2, [r3, #0]
 8006bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
 8006be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006be2:	623b      	str	r3, [r7, #32]
 8006be4:	e00b      	b.n	8006bfe <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	1c59      	adds	r1, r3, #1
 8006bee:	6279      	str	r1, [r7, #36]	; 0x24
 8006bf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bf4:	b2d2      	uxtb	r2, r2
 8006bf6:	701a      	strb	r2, [r3, #0]
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	09db      	lsrs	r3, r3, #7
 8006bfc:	623b      	str	r3, [r7, #32]
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	2b7f      	cmp	r3, #127	; 0x7f
 8006c02:	d8f0      	bhi.n	8006be6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	627a      	str	r2, [r7, #36]	; 0x24
 8006c0a:	6a3a      	ldr	r2, [r7, #32]
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	6979      	ldr	r1, [r7, #20]
 8006c18:	69b8      	ldr	r0, [r7, #24]
 8006c1a:	f7ff fd13 	bl	8006644 <_SendPacket>
  RECORD_END();
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	f383 8811 	msr	BASEPRI, r3
}
 8006c24:	bf00      	nop
 8006c26:	3740      	adds	r7, #64	; 0x40
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	20014968 	.word	0x20014968

08006c30 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08c      	sub	sp, #48	; 0x30
 8006c34:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006c36:	4b58      	ldr	r3, [pc, #352]	; (8006d98 <SEGGER_SYSVIEW_Start+0x168>)
 8006c38:	2201      	movs	r2, #1
 8006c3a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006c3c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c40:	f04f 0120 	mov.w	r1, #32
 8006c44:	f381 8811 	msr	BASEPRI, r1
 8006c48:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006c4a:	4b53      	ldr	r3, [pc, #332]	; (8006d98 <SEGGER_SYSVIEW_Start+0x168>)
 8006c4c:	785b      	ldrb	r3, [r3, #1]
 8006c4e:	220a      	movs	r2, #10
 8006c50:	4952      	ldr	r1, [pc, #328]	; (8006d9c <SEGGER_SYSVIEW_Start+0x16c>)
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7f9 fae4 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006c5e:	200a      	movs	r0, #10
 8006c60:	f7ff fe2a 	bl	80068b8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c64:	f3ef 8311 	mrs	r3, BASEPRI
 8006c68:	f04f 0120 	mov.w	r1, #32
 8006c6c:	f381 8811 	msr	BASEPRI, r1
 8006c70:	60bb      	str	r3, [r7, #8]
 8006c72:	484b      	ldr	r0, [pc, #300]	; (8006da0 <SEGGER_SYSVIEW_Start+0x170>)
 8006c74:	f7ff fbf5 	bl	8006462 <_PreparePacket>
 8006c78:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c82:	4b45      	ldr	r3, [pc, #276]	; (8006d98 <SEGGER_SYSVIEW_Start+0x168>)
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c88:	e00b      	b.n	8006ca2 <SEGGER_SYSVIEW_Start+0x72>
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	1c59      	adds	r1, r3, #1
 8006c92:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c98:	b2d2      	uxtb	r2, r2
 8006c9a:	701a      	strb	r2, [r3, #0]
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	09db      	lsrs	r3, r3, #7
 8006ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ca6:	d8f0      	bhi.n	8006c8a <SEGGER_SYSVIEW_Start+0x5a>
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	701a      	strb	r2, [r3, #0]
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
 8006cbc:	4b36      	ldr	r3, [pc, #216]	; (8006d98 <SEGGER_SYSVIEW_Start+0x168>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	623b      	str	r3, [r7, #32]
 8006cc2:	e00b      	b.n	8006cdc <SEGGER_SYSVIEW_Start+0xac>
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	1c59      	adds	r1, r3, #1
 8006ccc:	6279      	str	r1, [r7, #36]	; 0x24
 8006cce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cd2:	b2d2      	uxtb	r2, r2
 8006cd4:	701a      	strb	r2, [r3, #0]
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	09db      	lsrs	r3, r3, #7
 8006cda:	623b      	str	r3, [r7, #32]
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	2b7f      	cmp	r3, #127	; 0x7f
 8006ce0:	d8f0      	bhi.n	8006cc4 <SEGGER_SYSVIEW_Start+0x94>
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	627a      	str	r2, [r7, #36]	; 0x24
 8006ce8:	6a3a      	ldr	r2, [r7, #32]
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	4b28      	ldr	r3, [pc, #160]	; (8006d98 <SEGGER_SYSVIEW_Start+0x168>)
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	61bb      	str	r3, [r7, #24]
 8006cfc:	e00b      	b.n	8006d16 <SEGGER_SYSVIEW_Start+0xe6>
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	1c59      	adds	r1, r3, #1
 8006d06:	61f9      	str	r1, [r7, #28]
 8006d08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	701a      	strb	r2, [r3, #0]
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	09db      	lsrs	r3, r3, #7
 8006d14:	61bb      	str	r3, [r7, #24]
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	2b7f      	cmp	r3, #127	; 0x7f
 8006d1a:	d8f0      	bhi.n	8006cfe <SEGGER_SYSVIEW_Start+0xce>
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	61fa      	str	r2, [r7, #28]
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	2300      	movs	r3, #0
 8006d32:	613b      	str	r3, [r7, #16]
 8006d34:	e00b      	b.n	8006d4e <SEGGER_SYSVIEW_Start+0x11e>
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	1c59      	adds	r1, r3, #1
 8006d3e:	6179      	str	r1, [r7, #20]
 8006d40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	701a      	strb	r2, [r3, #0]
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	09db      	lsrs	r3, r3, #7
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	2b7f      	cmp	r3, #127	; 0x7f
 8006d52:	d8f0      	bhi.n	8006d36 <SEGGER_SYSVIEW_Start+0x106>
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	617a      	str	r2, [r7, #20]
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	701a      	strb	r2, [r3, #0]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006d64:	2218      	movs	r2, #24
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff fc6b 	bl	8006644 <_SendPacket>
      RECORD_END();
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006d74:	4b08      	ldr	r3, [pc, #32]	; (8006d98 <SEGGER_SYSVIEW_Start+0x168>)
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006d7c:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <SEGGER_SYSVIEW_Start+0x168>)
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006d82:	f000 f9eb 	bl	800715c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006d86:	f000 f9b1 	bl	80070ec <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006d8a:	f000 fc23 	bl	80075d4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006d8e:	bf00      	nop
 8006d90:	3730      	adds	r7, #48	; 0x30
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20014938 	.word	0x20014938
 8006d9c:	080082f4 	.word	0x080082f4
 8006da0:	20014968 	.word	0x20014968

08006da4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006daa:	f3ef 8311 	mrs	r3, BASEPRI
 8006dae:	f04f 0120 	mov.w	r1, #32
 8006db2:	f381 8811 	msr	BASEPRI, r1
 8006db6:	607b      	str	r3, [r7, #4]
 8006db8:	480b      	ldr	r0, [pc, #44]	; (8006de8 <SEGGER_SYSVIEW_Stop+0x44>)
 8006dba:	f7ff fb52 	bl	8006462 <_PreparePacket>
 8006dbe:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <SEGGER_SYSVIEW_Stop+0x48>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006dc8:	220b      	movs	r2, #11
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6838      	ldr	r0, [r7, #0]
 8006dce:	f7ff fc39 	bl	8006644 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006dd2:	4b06      	ldr	r3, [pc, #24]	; (8006dec <SEGGER_SYSVIEW_Stop+0x48>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f383 8811 	msr	BASEPRI, r3
}
 8006dde:	bf00      	nop
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20014968 	.word	0x20014968
 8006dec:	20014938 	.word	0x20014938

08006df0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b08c      	sub	sp, #48	; 0x30
 8006df4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006df6:	f3ef 8311 	mrs	r3, BASEPRI
 8006dfa:	f04f 0120 	mov.w	r1, #32
 8006dfe:	f381 8811 	msr	BASEPRI, r1
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	4845      	ldr	r0, [pc, #276]	; (8006f1c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006e06:	f7ff fb2c 	bl	8006462 <_PreparePacket>
 8006e0a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e14:	4b42      	ldr	r3, [pc, #264]	; (8006f20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e1a:	e00b      	b.n	8006e34 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e22:	1c59      	adds	r1, r3, #1
 8006e24:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	09db      	lsrs	r3, r3, #7
 8006e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e36:	2b7f      	cmp	r3, #127	; 0x7f
 8006e38:	d8f0      	bhi.n	8006e1c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e4e:	4b34      	ldr	r3, [pc, #208]	; (8006f20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	623b      	str	r3, [r7, #32]
 8006e54:	e00b      	b.n	8006e6e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006e56:	6a3b      	ldr	r3, [r7, #32]
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	1c59      	adds	r1, r3, #1
 8006e5e:	6279      	str	r1, [r7, #36]	; 0x24
 8006e60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	701a      	strb	r2, [r3, #0]
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	09db      	lsrs	r3, r3, #7
 8006e6c:	623b      	str	r3, [r7, #32]
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	2b7f      	cmp	r3, #127	; 0x7f
 8006e72:	d8f0      	bhi.n	8006e56 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	1c5a      	adds	r2, r3, #1
 8006e78:	627a      	str	r2, [r7, #36]	; 0x24
 8006e7a:	6a3a      	ldr	r2, [r7, #32]
 8006e7c:	b2d2      	uxtb	r2, r2
 8006e7e:	701a      	strb	r2, [r3, #0]
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	61fb      	str	r3, [r7, #28]
 8006e88:	4b25      	ldr	r3, [pc, #148]	; (8006f20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	61bb      	str	r3, [r7, #24]
 8006e8e:	e00b      	b.n	8006ea8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	1c59      	adds	r1, r3, #1
 8006e98:	61f9      	str	r1, [r7, #28]
 8006e9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e9e:	b2d2      	uxtb	r2, r2
 8006ea0:	701a      	strb	r2, [r3, #0]
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	09db      	lsrs	r3, r3, #7
 8006ea6:	61bb      	str	r3, [r7, #24]
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8006eac:	d8f0      	bhi.n	8006e90 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	61fa      	str	r2, [r7, #28]
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	613b      	str	r3, [r7, #16]
 8006ec6:	e00b      	b.n	8006ee0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	1c59      	adds	r1, r3, #1
 8006ed0:	6179      	str	r1, [r7, #20]
 8006ed2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	09db      	lsrs	r3, r3, #7
 8006ede:	613b      	str	r3, [r7, #16]
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ee4:	d8f0      	bhi.n	8006ec8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	617a      	str	r2, [r7, #20]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006ef6:	2218      	movs	r2, #24
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	68b8      	ldr	r0, [r7, #8]
 8006efc:	f7ff fba2 	bl	8006644 <_SendPacket>
  RECORD_END();
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006f06:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d002      	beq.n	8006f14 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006f0e:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	4798      	blx	r3
  }
}
 8006f14:	bf00      	nop
 8006f16:	3730      	adds	r7, #48	; 0x30
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20014968 	.word	0x20014968
 8006f20:	20014938 	.word	0x20014938

08006f24 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b092      	sub	sp, #72	; 0x48
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006f2c:	f3ef 8311 	mrs	r3, BASEPRI
 8006f30:	f04f 0120 	mov.w	r1, #32
 8006f34:	f381 8811 	msr	BASEPRI, r1
 8006f38:	617b      	str	r3, [r7, #20]
 8006f3a:	486a      	ldr	r0, [pc, #424]	; (80070e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006f3c:	f7ff fa91 	bl	8006462 <_PreparePacket>
 8006f40:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	647b      	str	r3, [r7, #68]	; 0x44
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	4b66      	ldr	r3, [pc, #408]	; (80070e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	643b      	str	r3, [r7, #64]	; 0x40
 8006f56:	e00b      	b.n	8006f70 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f5e:	1c59      	adds	r1, r3, #1
 8006f60:	6479      	str	r1, [r7, #68]	; 0x44
 8006f62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f66:	b2d2      	uxtb	r2, r2
 8006f68:	701a      	strb	r2, [r3, #0]
 8006f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f6c:	09db      	lsrs	r3, r3, #7
 8006f6e:	643b      	str	r3, [r7, #64]	; 0x40
 8006f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f72:	2b7f      	cmp	r3, #127	; 0x7f
 8006f74:	d8f0      	bhi.n	8006f58 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	647a      	str	r2, [r7, #68]	; 0x44
 8006f7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f90:	e00b      	b.n	8006faa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f98:	1c59      	adds	r1, r3, #1
 8006f9a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006f9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fa0:	b2d2      	uxtb	r2, r2
 8006fa2:	701a      	strb	r2, [r3, #0]
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa6:	09db      	lsrs	r3, r3, #7
 8006fa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	2b7f      	cmp	r3, #127	; 0x7f
 8006fae:	d8f0      	bhi.n	8006f92 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fb8:	b2d2      	uxtb	r2, r2
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fbe:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7ff f9fd 	bl	80063c8 <_EncodeStr>
 8006fce:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006fd0:	2209      	movs	r2, #9
 8006fd2:	68f9      	ldr	r1, [r7, #12]
 8006fd4:	6938      	ldr	r0, [r7, #16]
 8006fd6:	f7ff fb35 	bl	8006644 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	4b40      	ldr	r3, [pc, #256]	; (80070e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	633b      	str	r3, [r7, #48]	; 0x30
 8006fee:	e00b      	b.n	8007008 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff6:	1c59      	adds	r1, r3, #1
 8006ff8:	6379      	str	r1, [r7, #52]	; 0x34
 8006ffa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	09db      	lsrs	r3, r3, #7
 8007006:	633b      	str	r3, [r7, #48]	; 0x30
 8007008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700a:	2b7f      	cmp	r3, #127	; 0x7f
 800700c:	d8f0      	bhi.n	8006ff0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800700e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	637a      	str	r2, [r7, #52]	; 0x34
 8007014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	62bb      	str	r3, [r7, #40]	; 0x28
 8007028:	e00b      	b.n	8007042 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	b2da      	uxtb	r2, r3
 800702e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007030:	1c59      	adds	r1, r3, #1
 8007032:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007034:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007038:	b2d2      	uxtb	r2, r2
 800703a:	701a      	strb	r2, [r3, #0]
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	09db      	lsrs	r3, r3, #7
 8007040:	62bb      	str	r3, [r7, #40]	; 0x28
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	2b7f      	cmp	r3, #127	; 0x7f
 8007046:	d8f0      	bhi.n	800702a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800704e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	701a      	strb	r2, [r3, #0]
 8007054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007056:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	627b      	str	r3, [r7, #36]	; 0x24
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	623b      	str	r3, [r7, #32]
 8007062:	e00b      	b.n	800707c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	b2da      	uxtb	r2, r3
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	1c59      	adds	r1, r3, #1
 800706c:	6279      	str	r1, [r7, #36]	; 0x24
 800706e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	09db      	lsrs	r3, r3, #7
 800707a:	623b      	str	r3, [r7, #32]
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	2b7f      	cmp	r3, #127	; 0x7f
 8007080:	d8f0      	bhi.n	8007064 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	627a      	str	r2, [r7, #36]	; 0x24
 8007088:	6a3a      	ldr	r2, [r7, #32]
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	701a      	strb	r2, [r3, #0]
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	61fb      	str	r3, [r7, #28]
 8007096:	2300      	movs	r3, #0
 8007098:	61bb      	str	r3, [r7, #24]
 800709a:	e00b      	b.n	80070b4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	1c59      	adds	r1, r3, #1
 80070a4:	61f9      	str	r1, [r7, #28]
 80070a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	09db      	lsrs	r3, r3, #7
 80070b2:	61bb      	str	r3, [r7, #24]
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	2b7f      	cmp	r3, #127	; 0x7f
 80070b8:	d8f0      	bhi.n	800709c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	61fa      	str	r2, [r7, #28]
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	b2d2      	uxtb	r2, r2
 80070c4:	701a      	strb	r2, [r3, #0]
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80070ca:	2215      	movs	r2, #21
 80070cc:	68f9      	ldr	r1, [r7, #12]
 80070ce:	6938      	ldr	r0, [r7, #16]
 80070d0:	f7ff fab8 	bl	8006644 <_SendPacket>
  RECORD_END();
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f383 8811 	msr	BASEPRI, r3
}
 80070da:	bf00      	nop
 80070dc:	3748      	adds	r7, #72	; 0x48
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20014968 	.word	0x20014968
 80070e8:	20014938 	.word	0x20014938

080070ec <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80070f0:	4b07      	ldr	r3, [pc, #28]	; (8007110 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d008      	beq.n	800710a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80070f8:	4b05      	ldr	r3, [pc, #20]	; (8007110 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007102:	4b03      	ldr	r3, [pc, #12]	; (8007110 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	4798      	blx	r3
  }
}
 800710a:	bf00      	nop
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20014938 	.word	0x20014938

08007114 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800711c:	f3ef 8311 	mrs	r3, BASEPRI
 8007120:	f04f 0120 	mov.w	r1, #32
 8007124:	f381 8811 	msr	BASEPRI, r1
 8007128:	617b      	str	r3, [r7, #20]
 800712a:	480b      	ldr	r0, [pc, #44]	; (8007158 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800712c:	f7ff f999 	bl	8006462 <_PreparePacket>
 8007130:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007132:	2280      	movs	r2, #128	; 0x80
 8007134:	6879      	ldr	r1, [r7, #4]
 8007136:	6938      	ldr	r0, [r7, #16]
 8007138:	f7ff f946 	bl	80063c8 <_EncodeStr>
 800713c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800713e:	220e      	movs	r2, #14
 8007140:	68f9      	ldr	r1, [r7, #12]
 8007142:	6938      	ldr	r0, [r7, #16]
 8007144:	f7ff fa7e 	bl	8006644 <_SendPacket>
  RECORD_END();
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f383 8811 	msr	BASEPRI, r3
}
 800714e:	bf00      	nop
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	20014968 	.word	0x20014968

0800715c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800715c:	b590      	push	{r4, r7, lr}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007162:	4b15      	ldr	r3, [pc, #84]	; (80071b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d01a      	beq.n	80071a0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800716a:	4b13      	ldr	r3, [pc, #76]	; (80071b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d015      	beq.n	80071a0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007174:	4b10      	ldr	r3, [pc, #64]	; (80071b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4798      	blx	r3
 800717c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007180:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007182:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007186:	f04f 0200 	mov.w	r2, #0
 800718a:	f04f 0300 	mov.w	r3, #0
 800718e:	000a      	movs	r2, r1
 8007190:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007192:	4613      	mov	r3, r2
 8007194:	461a      	mov	r2, r3
 8007196:	4621      	mov	r1, r4
 8007198:	200d      	movs	r0, #13
 800719a:	f7ff fbe7 	bl	800696c <SEGGER_SYSVIEW_RecordU32x2>
 800719e:	e006      	b.n	80071ae <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80071a0:	4b06      	ldr	r3, [pc, #24]	; (80071bc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4619      	mov	r1, r3
 80071a6:	200c      	movs	r0, #12
 80071a8:	f7ff fba4 	bl	80068f4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80071ac:	bf00      	nop
 80071ae:	bf00      	nop
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd90      	pop	{r4, r7, pc}
 80071b6:	bf00      	nop
 80071b8:	20014938 	.word	0x20014938
 80071bc:	e0001004 	.word	0xe0001004

080071c0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071c6:	f3ef 8311 	mrs	r3, BASEPRI
 80071ca:	f04f 0120 	mov.w	r1, #32
 80071ce:	f381 8811 	msr	BASEPRI, r1
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	4819      	ldr	r0, [pc, #100]	; (800723c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80071d6:	f7ff f944 	bl	8006462 <_PreparePacket>
 80071da:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80071e0:	4b17      	ldr	r3, [pc, #92]	; (8007240 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	613b      	str	r3, [r7, #16]
 80071f2:	e00b      	b.n	800720c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	1c59      	adds	r1, r3, #1
 80071fc:	6179      	str	r1, [r7, #20]
 80071fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007202:	b2d2      	uxtb	r2, r2
 8007204:	701a      	strb	r2, [r3, #0]
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	09db      	lsrs	r3, r3, #7
 800720a:	613b      	str	r3, [r7, #16]
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	2b7f      	cmp	r3, #127	; 0x7f
 8007210:	d8f0      	bhi.n	80071f4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	617a      	str	r2, [r7, #20]
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	701a      	strb	r2, [r3, #0]
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007222:	2202      	movs	r2, #2
 8007224:	6879      	ldr	r1, [r7, #4]
 8007226:	68b8      	ldr	r0, [r7, #8]
 8007228:	f7ff fa0c 	bl	8006644 <_SendPacket>
  RECORD_END();
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f383 8811 	msr	BASEPRI, r3
}
 8007232:	bf00      	nop
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	20014968 	.word	0x20014968
 8007240:	e000ed04 	.word	0xe000ed04

08007244 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800724a:	f3ef 8311 	mrs	r3, BASEPRI
 800724e:	f04f 0120 	mov.w	r1, #32
 8007252:	f381 8811 	msr	BASEPRI, r1
 8007256:	607b      	str	r3, [r7, #4]
 8007258:	4807      	ldr	r0, [pc, #28]	; (8007278 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800725a:	f7ff f902 	bl	8006462 <_PreparePacket>
 800725e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007260:	2203      	movs	r2, #3
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6838      	ldr	r0, [r7, #0]
 8007266:	f7ff f9ed 	bl	8006644 <_SendPacket>
  RECORD_END();
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f383 8811 	msr	BASEPRI, r3
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	20014968 	.word	0x20014968

0800727c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007282:	f3ef 8311 	mrs	r3, BASEPRI
 8007286:	f04f 0120 	mov.w	r1, #32
 800728a:	f381 8811 	msr	BASEPRI, r1
 800728e:	607b      	str	r3, [r7, #4]
 8007290:	4807      	ldr	r0, [pc, #28]	; (80072b0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007292:	f7ff f8e6 	bl	8006462 <_PreparePacket>
 8007296:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007298:	2212      	movs	r2, #18
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6838      	ldr	r0, [r7, #0]
 800729e:	f7ff f9d1 	bl	8006644 <_SendPacket>
  RECORD_END();
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f383 8811 	msr	BASEPRI, r3
}
 80072a8:	bf00      	nop
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20014968 	.word	0x20014968

080072b4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80072ba:	f3ef 8311 	mrs	r3, BASEPRI
 80072be:	f04f 0120 	mov.w	r1, #32
 80072c2:	f381 8811 	msr	BASEPRI, r1
 80072c6:	607b      	str	r3, [r7, #4]
 80072c8:	4807      	ldr	r0, [pc, #28]	; (80072e8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80072ca:	f7ff f8ca 	bl	8006462 <_PreparePacket>
 80072ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80072d0:	2211      	movs	r2, #17
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6838      	ldr	r0, [r7, #0]
 80072d6:	f7ff f9b5 	bl	8006644 <_SendPacket>
  RECORD_END();
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f383 8811 	msr	BASEPRI, r3
}
 80072e0:	bf00      	nop
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	20014968 	.word	0x20014968

080072ec <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80072f4:	f3ef 8311 	mrs	r3, BASEPRI
 80072f8:	f04f 0120 	mov.w	r1, #32
 80072fc:	f381 8811 	msr	BASEPRI, r1
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	4819      	ldr	r0, [pc, #100]	; (8007368 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007304:	f7ff f8ad 	bl	8006462 <_PreparePacket>
 8007308:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800730e:	4b17      	ldr	r3, [pc, #92]	; (800736c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	61fb      	str	r3, [r7, #28]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	61bb      	str	r3, [r7, #24]
 8007320:	e00b      	b.n	800733a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	b2da      	uxtb	r2, r3
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	1c59      	adds	r1, r3, #1
 800732a:	61f9      	str	r1, [r7, #28]
 800732c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007330:	b2d2      	uxtb	r2, r2
 8007332:	701a      	strb	r2, [r3, #0]
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	09db      	lsrs	r3, r3, #7
 8007338:	61bb      	str	r3, [r7, #24]
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b7f      	cmp	r3, #127	; 0x7f
 800733e:	d8f0      	bhi.n	8007322 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	61fa      	str	r2, [r7, #28]
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	b2d2      	uxtb	r2, r2
 800734a:	701a      	strb	r2, [r3, #0]
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007350:	2208      	movs	r2, #8
 8007352:	68f9      	ldr	r1, [r7, #12]
 8007354:	6938      	ldr	r0, [r7, #16]
 8007356:	f7ff f975 	bl	8006644 <_SendPacket>
  RECORD_END();
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f383 8811 	msr	BASEPRI, r3
}
 8007360:	bf00      	nop
 8007362:	3720      	adds	r7, #32
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	20014968 	.word	0x20014968
 800736c:	20014938 	.word	0x20014938

08007370 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007378:	f3ef 8311 	mrs	r3, BASEPRI
 800737c:	f04f 0120 	mov.w	r1, #32
 8007380:	f381 8811 	msr	BASEPRI, r1
 8007384:	617b      	str	r3, [r7, #20]
 8007386:	4819      	ldr	r0, [pc, #100]	; (80073ec <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007388:	f7ff f86b 	bl	8006462 <_PreparePacket>
 800738c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007392:	4b17      	ldr	r3, [pc, #92]	; (80073f0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	61fb      	str	r3, [r7, #28]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	61bb      	str	r3, [r7, #24]
 80073a4:	e00b      	b.n	80073be <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	1c59      	adds	r1, r3, #1
 80073ae:	61f9      	str	r1, [r7, #28]
 80073b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073b4:	b2d2      	uxtb	r2, r2
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	09db      	lsrs	r3, r3, #7
 80073bc:	61bb      	str	r3, [r7, #24]
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b7f      	cmp	r3, #127	; 0x7f
 80073c2:	d8f0      	bhi.n	80073a6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	61fa      	str	r2, [r7, #28]
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	701a      	strb	r2, [r3, #0]
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80073d4:	2204      	movs	r2, #4
 80073d6:	68f9      	ldr	r1, [r7, #12]
 80073d8:	6938      	ldr	r0, [r7, #16]
 80073da:	f7ff f933 	bl	8006644 <_SendPacket>
  RECORD_END();
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f383 8811 	msr	BASEPRI, r3
}
 80073e4:	bf00      	nop
 80073e6:	3720      	adds	r7, #32
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20014968 	.word	0x20014968
 80073f0:	20014938 	.word	0x20014938

080073f4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80073fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007400:	f04f 0120 	mov.w	r1, #32
 8007404:	f381 8811 	msr	BASEPRI, r1
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	4819      	ldr	r0, [pc, #100]	; (8007470 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800740c:	f7ff f829 	bl	8006462 <_PreparePacket>
 8007410:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007416:	4b17      	ldr	r3, [pc, #92]	; (8007474 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	61fb      	str	r3, [r7, #28]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	61bb      	str	r3, [r7, #24]
 8007428:	e00b      	b.n	8007442 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	b2da      	uxtb	r2, r3
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	1c59      	adds	r1, r3, #1
 8007432:	61f9      	str	r1, [r7, #28]
 8007434:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007438:	b2d2      	uxtb	r2, r2
 800743a:	701a      	strb	r2, [r3, #0]
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	09db      	lsrs	r3, r3, #7
 8007440:	61bb      	str	r3, [r7, #24]
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b7f      	cmp	r3, #127	; 0x7f
 8007446:	d8f0      	bhi.n	800742a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	61fa      	str	r2, [r7, #28]
 800744e:	69ba      	ldr	r2, [r7, #24]
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	701a      	strb	r2, [r3, #0]
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007458:	2206      	movs	r2, #6
 800745a:	68f9      	ldr	r1, [r7, #12]
 800745c:	6938      	ldr	r0, [r7, #16]
 800745e:	f7ff f8f1 	bl	8006644 <_SendPacket>
  RECORD_END();
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f383 8811 	msr	BASEPRI, r3
}
 8007468:	bf00      	nop
 800746a:	3720      	adds	r7, #32
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	20014968 	.word	0x20014968
 8007474:	20014938 	.word	0x20014938

08007478 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007480:	4b04      	ldr	r3, [pc, #16]	; (8007494 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	1ad3      	subs	r3, r2, r3
}
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	20014938 	.word	0x20014938

08007498 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007498:	b580      	push	{r7, lr}
 800749a:	b08c      	sub	sp, #48	; 0x30
 800749c:	af00      	add	r7, sp, #0
 800749e:	4603      	mov	r3, r0
 80074a0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80074a2:	4b3b      	ldr	r3, [pc, #236]	; (8007590 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d06d      	beq.n	8007586 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80074aa:	4b39      	ldr	r3, [pc, #228]	; (8007590 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80074b0:	2300      	movs	r3, #0
 80074b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80074b4:	e008      	b.n	80074c8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80074b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d007      	beq.n	80074d2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	3301      	adds	r3, #1
 80074c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80074c8:	79fb      	ldrb	r3, [r7, #7]
 80074ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d3f2      	bcc.n	80074b6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80074d0:	e000      	b.n	80074d4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80074d2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80074d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d055      	beq.n	8007586 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074da:	f3ef 8311 	mrs	r3, BASEPRI
 80074de:	f04f 0120 	mov.w	r1, #32
 80074e2:	f381 8811 	msr	BASEPRI, r1
 80074e6:	617b      	str	r3, [r7, #20]
 80074e8:	482a      	ldr	r0, [pc, #168]	; (8007594 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80074ea:	f7fe ffba 	bl	8006462 <_PreparePacket>
 80074ee:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
 80074f8:	79fb      	ldrb	r3, [r7, #7]
 80074fa:	623b      	str	r3, [r7, #32]
 80074fc:	e00b      	b.n	8007516 <SEGGER_SYSVIEW_SendModule+0x7e>
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	b2da      	uxtb	r2, r3
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	1c59      	adds	r1, r3, #1
 8007506:	6279      	str	r1, [r7, #36]	; 0x24
 8007508:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800750c:	b2d2      	uxtb	r2, r2
 800750e:	701a      	strb	r2, [r3, #0]
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	09db      	lsrs	r3, r3, #7
 8007514:	623b      	str	r3, [r7, #32]
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	2b7f      	cmp	r3, #127	; 0x7f
 800751a:	d8f0      	bhi.n	80074fe <SEGGER_SYSVIEW_SendModule+0x66>
 800751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	627a      	str	r2, [r7, #36]	; 0x24
 8007522:	6a3a      	ldr	r2, [r7, #32]
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	701a      	strb	r2, [r3, #0]
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	61fb      	str	r3, [r7, #28]
 8007530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	61bb      	str	r3, [r7, #24]
 8007536:	e00b      	b.n	8007550 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	b2da      	uxtb	r2, r3
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	1c59      	adds	r1, r3, #1
 8007540:	61f9      	str	r1, [r7, #28]
 8007542:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007546:	b2d2      	uxtb	r2, r2
 8007548:	701a      	strb	r2, [r3, #0]
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	09db      	lsrs	r3, r3, #7
 800754e:	61bb      	str	r3, [r7, #24]
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	2b7f      	cmp	r3, #127	; 0x7f
 8007554:	d8f0      	bhi.n	8007538 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	61fa      	str	r2, [r7, #28]
 800755c:	69ba      	ldr	r2, [r7, #24]
 800755e:	b2d2      	uxtb	r2, r2
 8007560:	701a      	strb	r2, [r3, #0]
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2280      	movs	r2, #128	; 0x80
 800756c:	4619      	mov	r1, r3
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f7fe ff2a 	bl	80063c8 <_EncodeStr>
 8007574:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007576:	2216      	movs	r2, #22
 8007578:	68f9      	ldr	r1, [r7, #12]
 800757a:	6938      	ldr	r0, [r7, #16]
 800757c:	f7ff f862 	bl	8006644 <_SendPacket>
      RECORD_END();
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007586:	bf00      	nop
 8007588:	3730      	adds	r7, #48	; 0x30
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20014960 	.word	0x20014960
 8007594:	20014968 	.word	0x20014968

08007598 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800759e:	4b0c      	ldr	r3, [pc, #48]	; (80075d0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00f      	beq.n	80075c6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80075a6:	4b0a      	ldr	r3, [pc, #40]	; (80075d0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1f2      	bne.n	80075ac <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80075c6:	bf00      	nop
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20014960 	.word	0x20014960

080075d4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80075da:	f3ef 8311 	mrs	r3, BASEPRI
 80075de:	f04f 0120 	mov.w	r1, #32
 80075e2:	f381 8811 	msr	BASEPRI, r1
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	4817      	ldr	r0, [pc, #92]	; (8007648 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80075ea:	f7fe ff3a 	bl	8006462 <_PreparePacket>
 80075ee:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	617b      	str	r3, [r7, #20]
 80075f8:	4b14      	ldr	r3, [pc, #80]	; (800764c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	613b      	str	r3, [r7, #16]
 80075fe:	e00b      	b.n	8007618 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	b2da      	uxtb	r2, r3
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	1c59      	adds	r1, r3, #1
 8007608:	6179      	str	r1, [r7, #20]
 800760a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800760e:	b2d2      	uxtb	r2, r2
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	09db      	lsrs	r3, r3, #7
 8007616:	613b      	str	r3, [r7, #16]
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	2b7f      	cmp	r3, #127	; 0x7f
 800761c:	d8f0      	bhi.n	8007600 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	617a      	str	r2, [r7, #20]
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	b2d2      	uxtb	r2, r2
 8007628:	701a      	strb	r2, [r3, #0]
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800762e:	221b      	movs	r2, #27
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	68b8      	ldr	r0, [r7, #8]
 8007634:	f7ff f806 	bl	8006644 <_SendPacket>
  RECORD_END();
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f383 8811 	msr	BASEPRI, r3
}
 800763e:	bf00      	nop
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20014968 	.word	0x20014968
 800764c:	20014964 	.word	0x20014964

08007650 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007650:	b580      	push	{r7, lr}
 8007652:	b08a      	sub	sp, #40	; 0x28
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007658:	f3ef 8311 	mrs	r3, BASEPRI
 800765c:	f04f 0120 	mov.w	r1, #32
 8007660:	f381 8811 	msr	BASEPRI, r1
 8007664:	617b      	str	r3, [r7, #20]
 8007666:	4827      	ldr	r0, [pc, #156]	; (8007704 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007668:	f7fe fefb 	bl	8006462 <_PreparePacket>
 800766c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800766e:	2280      	movs	r2, #128	; 0x80
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	6938      	ldr	r0, [r7, #16]
 8007674:	f7fe fea8 	bl	80063c8 <_EncodeStr>
 8007678:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	627b      	str	r3, [r7, #36]	; 0x24
 800767e:	2301      	movs	r3, #1
 8007680:	623b      	str	r3, [r7, #32]
 8007682:	e00b      	b.n	800769c <SEGGER_SYSVIEW_Warn+0x4c>
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	b2da      	uxtb	r2, r3
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	1c59      	adds	r1, r3, #1
 800768c:	6279      	str	r1, [r7, #36]	; 0x24
 800768e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007692:	b2d2      	uxtb	r2, r2
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	09db      	lsrs	r3, r3, #7
 800769a:	623b      	str	r3, [r7, #32]
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	2b7f      	cmp	r3, #127	; 0x7f
 80076a0:	d8f0      	bhi.n	8007684 <SEGGER_SYSVIEW_Warn+0x34>
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	627a      	str	r2, [r7, #36]	; 0x24
 80076a8:	6a3a      	ldr	r2, [r7, #32]
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	61fb      	str	r3, [r7, #28]
 80076b6:	2300      	movs	r3, #0
 80076b8:	61bb      	str	r3, [r7, #24]
 80076ba:	e00b      	b.n	80076d4 <SEGGER_SYSVIEW_Warn+0x84>
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	1c59      	adds	r1, r3, #1
 80076c4:	61f9      	str	r1, [r7, #28]
 80076c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	09db      	lsrs	r3, r3, #7
 80076d2:	61bb      	str	r3, [r7, #24]
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b7f      	cmp	r3, #127	; 0x7f
 80076d8:	d8f0      	bhi.n	80076bc <SEGGER_SYSVIEW_Warn+0x6c>
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	61fa      	str	r2, [r7, #28]
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	b2d2      	uxtb	r2, r2
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80076ea:	221a      	movs	r2, #26
 80076ec:	68f9      	ldr	r1, [r7, #12]
 80076ee:	6938      	ldr	r0, [r7, #16]
 80076f0:	f7fe ffa8 	bl	8006644 <_SendPacket>
  RECORD_END();
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f383 8811 	msr	BASEPRI, r3
}
 80076fa:	bf00      	nop
 80076fc:	3728      	adds	r7, #40	; 0x28
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	20014968 	.word	0x20014968

08007708 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	2000      	movs	r0, #0
 800771c:	f7fe fd3a 	bl	8006194 <SEGGER_RTT_Write>
  return len;
 8007720:	683b      	ldr	r3, [r7, #0]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
	...

0800772c <__libc_init_array>:
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	4d0d      	ldr	r5, [pc, #52]	; (8007764 <__libc_init_array+0x38>)
 8007730:	4c0d      	ldr	r4, [pc, #52]	; (8007768 <__libc_init_array+0x3c>)
 8007732:	1b64      	subs	r4, r4, r5
 8007734:	10a4      	asrs	r4, r4, #2
 8007736:	2600      	movs	r6, #0
 8007738:	42a6      	cmp	r6, r4
 800773a:	d109      	bne.n	8007750 <__libc_init_array+0x24>
 800773c:	4d0b      	ldr	r5, [pc, #44]	; (800776c <__libc_init_array+0x40>)
 800773e:	4c0c      	ldr	r4, [pc, #48]	; (8007770 <__libc_init_array+0x44>)
 8007740:	f000 fd38 	bl	80081b4 <_init>
 8007744:	1b64      	subs	r4, r4, r5
 8007746:	10a4      	asrs	r4, r4, #2
 8007748:	2600      	movs	r6, #0
 800774a:	42a6      	cmp	r6, r4
 800774c:	d105      	bne.n	800775a <__libc_init_array+0x2e>
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	f855 3b04 	ldr.w	r3, [r5], #4
 8007754:	4798      	blx	r3
 8007756:	3601      	adds	r6, #1
 8007758:	e7ee      	b.n	8007738 <__libc_init_array+0xc>
 800775a:	f855 3b04 	ldr.w	r3, [r5], #4
 800775e:	4798      	blx	r3
 8007760:	3601      	adds	r6, #1
 8007762:	e7f2      	b.n	800774a <__libc_init_array+0x1e>
 8007764:	0800836c 	.word	0x0800836c
 8007768:	0800836c 	.word	0x0800836c
 800776c:	0800836c 	.word	0x0800836c
 8007770:	08008370 	.word	0x08008370

08007774 <memcmp>:
 8007774:	b510      	push	{r4, lr}
 8007776:	3901      	subs	r1, #1
 8007778:	4402      	add	r2, r0
 800777a:	4290      	cmp	r0, r2
 800777c:	d101      	bne.n	8007782 <memcmp+0xe>
 800777e:	2000      	movs	r0, #0
 8007780:	e005      	b.n	800778e <memcmp+0x1a>
 8007782:	7803      	ldrb	r3, [r0, #0]
 8007784:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007788:	42a3      	cmp	r3, r4
 800778a:	d001      	beq.n	8007790 <memcmp+0x1c>
 800778c:	1b18      	subs	r0, r3, r4
 800778e:	bd10      	pop	{r4, pc}
 8007790:	3001      	adds	r0, #1
 8007792:	e7f2      	b.n	800777a <memcmp+0x6>

08007794 <memcpy>:
 8007794:	440a      	add	r2, r1
 8007796:	4291      	cmp	r1, r2
 8007798:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800779c:	d100      	bne.n	80077a0 <memcpy+0xc>
 800779e:	4770      	bx	lr
 80077a0:	b510      	push	{r4, lr}
 80077a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077aa:	4291      	cmp	r1, r2
 80077ac:	d1f9      	bne.n	80077a2 <memcpy+0xe>
 80077ae:	bd10      	pop	{r4, pc}

080077b0 <memset>:
 80077b0:	4402      	add	r2, r0
 80077b2:	4603      	mov	r3, r0
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d100      	bne.n	80077ba <memset+0xa>
 80077b8:	4770      	bx	lr
 80077ba:	f803 1b01 	strb.w	r1, [r3], #1
 80077be:	e7f9      	b.n	80077b4 <memset+0x4>

080077c0 <_puts_r>:
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	460e      	mov	r6, r1
 80077c4:	4605      	mov	r5, r0
 80077c6:	b118      	cbz	r0, 80077d0 <_puts_r+0x10>
 80077c8:	6983      	ldr	r3, [r0, #24]
 80077ca:	b90b      	cbnz	r3, 80077d0 <_puts_r+0x10>
 80077cc:	f000 fa48 	bl	8007c60 <__sinit>
 80077d0:	69ab      	ldr	r3, [r5, #24]
 80077d2:	68ac      	ldr	r4, [r5, #8]
 80077d4:	b913      	cbnz	r3, 80077dc <_puts_r+0x1c>
 80077d6:	4628      	mov	r0, r5
 80077d8:	f000 fa42 	bl	8007c60 <__sinit>
 80077dc:	4b2c      	ldr	r3, [pc, #176]	; (8007890 <_puts_r+0xd0>)
 80077de:	429c      	cmp	r4, r3
 80077e0:	d120      	bne.n	8007824 <_puts_r+0x64>
 80077e2:	686c      	ldr	r4, [r5, #4]
 80077e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077e6:	07db      	lsls	r3, r3, #31
 80077e8:	d405      	bmi.n	80077f6 <_puts_r+0x36>
 80077ea:	89a3      	ldrh	r3, [r4, #12]
 80077ec:	0598      	lsls	r0, r3, #22
 80077ee:	d402      	bmi.n	80077f6 <_puts_r+0x36>
 80077f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077f2:	f000 fad3 	bl	8007d9c <__retarget_lock_acquire_recursive>
 80077f6:	89a3      	ldrh	r3, [r4, #12]
 80077f8:	0719      	lsls	r1, r3, #28
 80077fa:	d51d      	bpl.n	8007838 <_puts_r+0x78>
 80077fc:	6923      	ldr	r3, [r4, #16]
 80077fe:	b1db      	cbz	r3, 8007838 <_puts_r+0x78>
 8007800:	3e01      	subs	r6, #1
 8007802:	68a3      	ldr	r3, [r4, #8]
 8007804:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007808:	3b01      	subs	r3, #1
 800780a:	60a3      	str	r3, [r4, #8]
 800780c:	bb39      	cbnz	r1, 800785e <_puts_r+0x9e>
 800780e:	2b00      	cmp	r3, #0
 8007810:	da38      	bge.n	8007884 <_puts_r+0xc4>
 8007812:	4622      	mov	r2, r4
 8007814:	210a      	movs	r1, #10
 8007816:	4628      	mov	r0, r5
 8007818:	f000 f848 	bl	80078ac <__swbuf_r>
 800781c:	3001      	adds	r0, #1
 800781e:	d011      	beq.n	8007844 <_puts_r+0x84>
 8007820:	250a      	movs	r5, #10
 8007822:	e011      	b.n	8007848 <_puts_r+0x88>
 8007824:	4b1b      	ldr	r3, [pc, #108]	; (8007894 <_puts_r+0xd4>)
 8007826:	429c      	cmp	r4, r3
 8007828:	d101      	bne.n	800782e <_puts_r+0x6e>
 800782a:	68ac      	ldr	r4, [r5, #8]
 800782c:	e7da      	b.n	80077e4 <_puts_r+0x24>
 800782e:	4b1a      	ldr	r3, [pc, #104]	; (8007898 <_puts_r+0xd8>)
 8007830:	429c      	cmp	r4, r3
 8007832:	bf08      	it	eq
 8007834:	68ec      	ldreq	r4, [r5, #12]
 8007836:	e7d5      	b.n	80077e4 <_puts_r+0x24>
 8007838:	4621      	mov	r1, r4
 800783a:	4628      	mov	r0, r5
 800783c:	f000 f888 	bl	8007950 <__swsetup_r>
 8007840:	2800      	cmp	r0, #0
 8007842:	d0dd      	beq.n	8007800 <_puts_r+0x40>
 8007844:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007848:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800784a:	07da      	lsls	r2, r3, #31
 800784c:	d405      	bmi.n	800785a <_puts_r+0x9a>
 800784e:	89a3      	ldrh	r3, [r4, #12]
 8007850:	059b      	lsls	r3, r3, #22
 8007852:	d402      	bmi.n	800785a <_puts_r+0x9a>
 8007854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007856:	f000 faa2 	bl	8007d9e <__retarget_lock_release_recursive>
 800785a:	4628      	mov	r0, r5
 800785c:	bd70      	pop	{r4, r5, r6, pc}
 800785e:	2b00      	cmp	r3, #0
 8007860:	da04      	bge.n	800786c <_puts_r+0xac>
 8007862:	69a2      	ldr	r2, [r4, #24]
 8007864:	429a      	cmp	r2, r3
 8007866:	dc06      	bgt.n	8007876 <_puts_r+0xb6>
 8007868:	290a      	cmp	r1, #10
 800786a:	d004      	beq.n	8007876 <_puts_r+0xb6>
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	6022      	str	r2, [r4, #0]
 8007872:	7019      	strb	r1, [r3, #0]
 8007874:	e7c5      	b.n	8007802 <_puts_r+0x42>
 8007876:	4622      	mov	r2, r4
 8007878:	4628      	mov	r0, r5
 800787a:	f000 f817 	bl	80078ac <__swbuf_r>
 800787e:	3001      	adds	r0, #1
 8007880:	d1bf      	bne.n	8007802 <_puts_r+0x42>
 8007882:	e7df      	b.n	8007844 <_puts_r+0x84>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	250a      	movs	r5, #10
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	6022      	str	r2, [r4, #0]
 800788c:	701d      	strb	r5, [r3, #0]
 800788e:	e7db      	b.n	8007848 <_puts_r+0x88>
 8007890:	08008324 	.word	0x08008324
 8007894:	08008344 	.word	0x08008344
 8007898:	08008304 	.word	0x08008304

0800789c <puts>:
 800789c:	4b02      	ldr	r3, [pc, #8]	; (80078a8 <puts+0xc>)
 800789e:	4601      	mov	r1, r0
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	f7ff bf8d 	b.w	80077c0 <_puts_r>
 80078a6:	bf00      	nop
 80078a8:	20000014 	.word	0x20000014

080078ac <__swbuf_r>:
 80078ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ae:	460e      	mov	r6, r1
 80078b0:	4614      	mov	r4, r2
 80078b2:	4605      	mov	r5, r0
 80078b4:	b118      	cbz	r0, 80078be <__swbuf_r+0x12>
 80078b6:	6983      	ldr	r3, [r0, #24]
 80078b8:	b90b      	cbnz	r3, 80078be <__swbuf_r+0x12>
 80078ba:	f000 f9d1 	bl	8007c60 <__sinit>
 80078be:	4b21      	ldr	r3, [pc, #132]	; (8007944 <__swbuf_r+0x98>)
 80078c0:	429c      	cmp	r4, r3
 80078c2:	d12b      	bne.n	800791c <__swbuf_r+0x70>
 80078c4:	686c      	ldr	r4, [r5, #4]
 80078c6:	69a3      	ldr	r3, [r4, #24]
 80078c8:	60a3      	str	r3, [r4, #8]
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	071a      	lsls	r2, r3, #28
 80078ce:	d52f      	bpl.n	8007930 <__swbuf_r+0x84>
 80078d0:	6923      	ldr	r3, [r4, #16]
 80078d2:	b36b      	cbz	r3, 8007930 <__swbuf_r+0x84>
 80078d4:	6923      	ldr	r3, [r4, #16]
 80078d6:	6820      	ldr	r0, [r4, #0]
 80078d8:	1ac0      	subs	r0, r0, r3
 80078da:	6963      	ldr	r3, [r4, #20]
 80078dc:	b2f6      	uxtb	r6, r6
 80078de:	4283      	cmp	r3, r0
 80078e0:	4637      	mov	r7, r6
 80078e2:	dc04      	bgt.n	80078ee <__swbuf_r+0x42>
 80078e4:	4621      	mov	r1, r4
 80078e6:	4628      	mov	r0, r5
 80078e8:	f000 f926 	bl	8007b38 <_fflush_r>
 80078ec:	bb30      	cbnz	r0, 800793c <__swbuf_r+0x90>
 80078ee:	68a3      	ldr	r3, [r4, #8]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	60a3      	str	r3, [r4, #8]
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	6022      	str	r2, [r4, #0]
 80078fa:	701e      	strb	r6, [r3, #0]
 80078fc:	6963      	ldr	r3, [r4, #20]
 80078fe:	3001      	adds	r0, #1
 8007900:	4283      	cmp	r3, r0
 8007902:	d004      	beq.n	800790e <__swbuf_r+0x62>
 8007904:	89a3      	ldrh	r3, [r4, #12]
 8007906:	07db      	lsls	r3, r3, #31
 8007908:	d506      	bpl.n	8007918 <__swbuf_r+0x6c>
 800790a:	2e0a      	cmp	r6, #10
 800790c:	d104      	bne.n	8007918 <__swbuf_r+0x6c>
 800790e:	4621      	mov	r1, r4
 8007910:	4628      	mov	r0, r5
 8007912:	f000 f911 	bl	8007b38 <_fflush_r>
 8007916:	b988      	cbnz	r0, 800793c <__swbuf_r+0x90>
 8007918:	4638      	mov	r0, r7
 800791a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800791c:	4b0a      	ldr	r3, [pc, #40]	; (8007948 <__swbuf_r+0x9c>)
 800791e:	429c      	cmp	r4, r3
 8007920:	d101      	bne.n	8007926 <__swbuf_r+0x7a>
 8007922:	68ac      	ldr	r4, [r5, #8]
 8007924:	e7cf      	b.n	80078c6 <__swbuf_r+0x1a>
 8007926:	4b09      	ldr	r3, [pc, #36]	; (800794c <__swbuf_r+0xa0>)
 8007928:	429c      	cmp	r4, r3
 800792a:	bf08      	it	eq
 800792c:	68ec      	ldreq	r4, [r5, #12]
 800792e:	e7ca      	b.n	80078c6 <__swbuf_r+0x1a>
 8007930:	4621      	mov	r1, r4
 8007932:	4628      	mov	r0, r5
 8007934:	f000 f80c 	bl	8007950 <__swsetup_r>
 8007938:	2800      	cmp	r0, #0
 800793a:	d0cb      	beq.n	80078d4 <__swbuf_r+0x28>
 800793c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007940:	e7ea      	b.n	8007918 <__swbuf_r+0x6c>
 8007942:	bf00      	nop
 8007944:	08008324 	.word	0x08008324
 8007948:	08008344 	.word	0x08008344
 800794c:	08008304 	.word	0x08008304

08007950 <__swsetup_r>:
 8007950:	4b32      	ldr	r3, [pc, #200]	; (8007a1c <__swsetup_r+0xcc>)
 8007952:	b570      	push	{r4, r5, r6, lr}
 8007954:	681d      	ldr	r5, [r3, #0]
 8007956:	4606      	mov	r6, r0
 8007958:	460c      	mov	r4, r1
 800795a:	b125      	cbz	r5, 8007966 <__swsetup_r+0x16>
 800795c:	69ab      	ldr	r3, [r5, #24]
 800795e:	b913      	cbnz	r3, 8007966 <__swsetup_r+0x16>
 8007960:	4628      	mov	r0, r5
 8007962:	f000 f97d 	bl	8007c60 <__sinit>
 8007966:	4b2e      	ldr	r3, [pc, #184]	; (8007a20 <__swsetup_r+0xd0>)
 8007968:	429c      	cmp	r4, r3
 800796a:	d10f      	bne.n	800798c <__swsetup_r+0x3c>
 800796c:	686c      	ldr	r4, [r5, #4]
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007974:	0719      	lsls	r1, r3, #28
 8007976:	d42c      	bmi.n	80079d2 <__swsetup_r+0x82>
 8007978:	06dd      	lsls	r5, r3, #27
 800797a:	d411      	bmi.n	80079a0 <__swsetup_r+0x50>
 800797c:	2309      	movs	r3, #9
 800797e:	6033      	str	r3, [r6, #0]
 8007980:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007984:	81a3      	strh	r3, [r4, #12]
 8007986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800798a:	e03e      	b.n	8007a0a <__swsetup_r+0xba>
 800798c:	4b25      	ldr	r3, [pc, #148]	; (8007a24 <__swsetup_r+0xd4>)
 800798e:	429c      	cmp	r4, r3
 8007990:	d101      	bne.n	8007996 <__swsetup_r+0x46>
 8007992:	68ac      	ldr	r4, [r5, #8]
 8007994:	e7eb      	b.n	800796e <__swsetup_r+0x1e>
 8007996:	4b24      	ldr	r3, [pc, #144]	; (8007a28 <__swsetup_r+0xd8>)
 8007998:	429c      	cmp	r4, r3
 800799a:	bf08      	it	eq
 800799c:	68ec      	ldreq	r4, [r5, #12]
 800799e:	e7e6      	b.n	800796e <__swsetup_r+0x1e>
 80079a0:	0758      	lsls	r0, r3, #29
 80079a2:	d512      	bpl.n	80079ca <__swsetup_r+0x7a>
 80079a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079a6:	b141      	cbz	r1, 80079ba <__swsetup_r+0x6a>
 80079a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079ac:	4299      	cmp	r1, r3
 80079ae:	d002      	beq.n	80079b6 <__swsetup_r+0x66>
 80079b0:	4630      	mov	r0, r6
 80079b2:	f000 fa5b 	bl	8007e6c <_free_r>
 80079b6:	2300      	movs	r3, #0
 80079b8:	6363      	str	r3, [r4, #52]	; 0x34
 80079ba:	89a3      	ldrh	r3, [r4, #12]
 80079bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079c0:	81a3      	strh	r3, [r4, #12]
 80079c2:	2300      	movs	r3, #0
 80079c4:	6063      	str	r3, [r4, #4]
 80079c6:	6923      	ldr	r3, [r4, #16]
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	f043 0308 	orr.w	r3, r3, #8
 80079d0:	81a3      	strh	r3, [r4, #12]
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	b94b      	cbnz	r3, 80079ea <__swsetup_r+0x9a>
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079e0:	d003      	beq.n	80079ea <__swsetup_r+0x9a>
 80079e2:	4621      	mov	r1, r4
 80079e4:	4630      	mov	r0, r6
 80079e6:	f000 fa01 	bl	8007dec <__smakebuf_r>
 80079ea:	89a0      	ldrh	r0, [r4, #12]
 80079ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079f0:	f010 0301 	ands.w	r3, r0, #1
 80079f4:	d00a      	beq.n	8007a0c <__swsetup_r+0xbc>
 80079f6:	2300      	movs	r3, #0
 80079f8:	60a3      	str	r3, [r4, #8]
 80079fa:	6963      	ldr	r3, [r4, #20]
 80079fc:	425b      	negs	r3, r3
 80079fe:	61a3      	str	r3, [r4, #24]
 8007a00:	6923      	ldr	r3, [r4, #16]
 8007a02:	b943      	cbnz	r3, 8007a16 <__swsetup_r+0xc6>
 8007a04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a08:	d1ba      	bne.n	8007980 <__swsetup_r+0x30>
 8007a0a:	bd70      	pop	{r4, r5, r6, pc}
 8007a0c:	0781      	lsls	r1, r0, #30
 8007a0e:	bf58      	it	pl
 8007a10:	6963      	ldrpl	r3, [r4, #20]
 8007a12:	60a3      	str	r3, [r4, #8]
 8007a14:	e7f4      	b.n	8007a00 <__swsetup_r+0xb0>
 8007a16:	2000      	movs	r0, #0
 8007a18:	e7f7      	b.n	8007a0a <__swsetup_r+0xba>
 8007a1a:	bf00      	nop
 8007a1c:	20000014 	.word	0x20000014
 8007a20:	08008324 	.word	0x08008324
 8007a24:	08008344 	.word	0x08008344
 8007a28:	08008304 	.word	0x08008304

08007a2c <__sflush_r>:
 8007a2c:	898a      	ldrh	r2, [r1, #12]
 8007a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a32:	4605      	mov	r5, r0
 8007a34:	0710      	lsls	r0, r2, #28
 8007a36:	460c      	mov	r4, r1
 8007a38:	d458      	bmi.n	8007aec <__sflush_r+0xc0>
 8007a3a:	684b      	ldr	r3, [r1, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	dc05      	bgt.n	8007a4c <__sflush_r+0x20>
 8007a40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	dc02      	bgt.n	8007a4c <__sflush_r+0x20>
 8007a46:	2000      	movs	r0, #0
 8007a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a4e:	2e00      	cmp	r6, #0
 8007a50:	d0f9      	beq.n	8007a46 <__sflush_r+0x1a>
 8007a52:	2300      	movs	r3, #0
 8007a54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a58:	682f      	ldr	r7, [r5, #0]
 8007a5a:	602b      	str	r3, [r5, #0]
 8007a5c:	d032      	beq.n	8007ac4 <__sflush_r+0x98>
 8007a5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a60:	89a3      	ldrh	r3, [r4, #12]
 8007a62:	075a      	lsls	r2, r3, #29
 8007a64:	d505      	bpl.n	8007a72 <__sflush_r+0x46>
 8007a66:	6863      	ldr	r3, [r4, #4]
 8007a68:	1ac0      	subs	r0, r0, r3
 8007a6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a6c:	b10b      	cbz	r3, 8007a72 <__sflush_r+0x46>
 8007a6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a70:	1ac0      	subs	r0, r0, r3
 8007a72:	2300      	movs	r3, #0
 8007a74:	4602      	mov	r2, r0
 8007a76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a78:	6a21      	ldr	r1, [r4, #32]
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	47b0      	blx	r6
 8007a7e:	1c43      	adds	r3, r0, #1
 8007a80:	89a3      	ldrh	r3, [r4, #12]
 8007a82:	d106      	bne.n	8007a92 <__sflush_r+0x66>
 8007a84:	6829      	ldr	r1, [r5, #0]
 8007a86:	291d      	cmp	r1, #29
 8007a88:	d82c      	bhi.n	8007ae4 <__sflush_r+0xb8>
 8007a8a:	4a2a      	ldr	r2, [pc, #168]	; (8007b34 <__sflush_r+0x108>)
 8007a8c:	40ca      	lsrs	r2, r1
 8007a8e:	07d6      	lsls	r6, r2, #31
 8007a90:	d528      	bpl.n	8007ae4 <__sflush_r+0xb8>
 8007a92:	2200      	movs	r2, #0
 8007a94:	6062      	str	r2, [r4, #4]
 8007a96:	04d9      	lsls	r1, r3, #19
 8007a98:	6922      	ldr	r2, [r4, #16]
 8007a9a:	6022      	str	r2, [r4, #0]
 8007a9c:	d504      	bpl.n	8007aa8 <__sflush_r+0x7c>
 8007a9e:	1c42      	adds	r2, r0, #1
 8007aa0:	d101      	bne.n	8007aa6 <__sflush_r+0x7a>
 8007aa2:	682b      	ldr	r3, [r5, #0]
 8007aa4:	b903      	cbnz	r3, 8007aa8 <__sflush_r+0x7c>
 8007aa6:	6560      	str	r0, [r4, #84]	; 0x54
 8007aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aaa:	602f      	str	r7, [r5, #0]
 8007aac:	2900      	cmp	r1, #0
 8007aae:	d0ca      	beq.n	8007a46 <__sflush_r+0x1a>
 8007ab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ab4:	4299      	cmp	r1, r3
 8007ab6:	d002      	beq.n	8007abe <__sflush_r+0x92>
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f000 f9d7 	bl	8007e6c <_free_r>
 8007abe:	2000      	movs	r0, #0
 8007ac0:	6360      	str	r0, [r4, #52]	; 0x34
 8007ac2:	e7c1      	b.n	8007a48 <__sflush_r+0x1c>
 8007ac4:	6a21      	ldr	r1, [r4, #32]
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	4628      	mov	r0, r5
 8007aca:	47b0      	blx	r6
 8007acc:	1c41      	adds	r1, r0, #1
 8007ace:	d1c7      	bne.n	8007a60 <__sflush_r+0x34>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0c4      	beq.n	8007a60 <__sflush_r+0x34>
 8007ad6:	2b1d      	cmp	r3, #29
 8007ad8:	d001      	beq.n	8007ade <__sflush_r+0xb2>
 8007ada:	2b16      	cmp	r3, #22
 8007adc:	d101      	bne.n	8007ae2 <__sflush_r+0xb6>
 8007ade:	602f      	str	r7, [r5, #0]
 8007ae0:	e7b1      	b.n	8007a46 <__sflush_r+0x1a>
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae8:	81a3      	strh	r3, [r4, #12]
 8007aea:	e7ad      	b.n	8007a48 <__sflush_r+0x1c>
 8007aec:	690f      	ldr	r7, [r1, #16]
 8007aee:	2f00      	cmp	r7, #0
 8007af0:	d0a9      	beq.n	8007a46 <__sflush_r+0x1a>
 8007af2:	0793      	lsls	r3, r2, #30
 8007af4:	680e      	ldr	r6, [r1, #0]
 8007af6:	bf08      	it	eq
 8007af8:	694b      	ldreq	r3, [r1, #20]
 8007afa:	600f      	str	r7, [r1, #0]
 8007afc:	bf18      	it	ne
 8007afe:	2300      	movne	r3, #0
 8007b00:	eba6 0807 	sub.w	r8, r6, r7
 8007b04:	608b      	str	r3, [r1, #8]
 8007b06:	f1b8 0f00 	cmp.w	r8, #0
 8007b0a:	dd9c      	ble.n	8007a46 <__sflush_r+0x1a>
 8007b0c:	6a21      	ldr	r1, [r4, #32]
 8007b0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b10:	4643      	mov	r3, r8
 8007b12:	463a      	mov	r2, r7
 8007b14:	4628      	mov	r0, r5
 8007b16:	47b0      	blx	r6
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	dc06      	bgt.n	8007b2a <__sflush_r+0xfe>
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b22:	81a3      	strh	r3, [r4, #12]
 8007b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b28:	e78e      	b.n	8007a48 <__sflush_r+0x1c>
 8007b2a:	4407      	add	r7, r0
 8007b2c:	eba8 0800 	sub.w	r8, r8, r0
 8007b30:	e7e9      	b.n	8007b06 <__sflush_r+0xda>
 8007b32:	bf00      	nop
 8007b34:	20400001 	.word	0x20400001

08007b38 <_fflush_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	690b      	ldr	r3, [r1, #16]
 8007b3c:	4605      	mov	r5, r0
 8007b3e:	460c      	mov	r4, r1
 8007b40:	b913      	cbnz	r3, 8007b48 <_fflush_r+0x10>
 8007b42:	2500      	movs	r5, #0
 8007b44:	4628      	mov	r0, r5
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	b118      	cbz	r0, 8007b52 <_fflush_r+0x1a>
 8007b4a:	6983      	ldr	r3, [r0, #24]
 8007b4c:	b90b      	cbnz	r3, 8007b52 <_fflush_r+0x1a>
 8007b4e:	f000 f887 	bl	8007c60 <__sinit>
 8007b52:	4b14      	ldr	r3, [pc, #80]	; (8007ba4 <_fflush_r+0x6c>)
 8007b54:	429c      	cmp	r4, r3
 8007b56:	d11b      	bne.n	8007b90 <_fflush_r+0x58>
 8007b58:	686c      	ldr	r4, [r5, #4]
 8007b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d0ef      	beq.n	8007b42 <_fflush_r+0xa>
 8007b62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b64:	07d0      	lsls	r0, r2, #31
 8007b66:	d404      	bmi.n	8007b72 <_fflush_r+0x3a>
 8007b68:	0599      	lsls	r1, r3, #22
 8007b6a:	d402      	bmi.n	8007b72 <_fflush_r+0x3a>
 8007b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b6e:	f000 f915 	bl	8007d9c <__retarget_lock_acquire_recursive>
 8007b72:	4628      	mov	r0, r5
 8007b74:	4621      	mov	r1, r4
 8007b76:	f7ff ff59 	bl	8007a2c <__sflush_r>
 8007b7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b7c:	07da      	lsls	r2, r3, #31
 8007b7e:	4605      	mov	r5, r0
 8007b80:	d4e0      	bmi.n	8007b44 <_fflush_r+0xc>
 8007b82:	89a3      	ldrh	r3, [r4, #12]
 8007b84:	059b      	lsls	r3, r3, #22
 8007b86:	d4dd      	bmi.n	8007b44 <_fflush_r+0xc>
 8007b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b8a:	f000 f908 	bl	8007d9e <__retarget_lock_release_recursive>
 8007b8e:	e7d9      	b.n	8007b44 <_fflush_r+0xc>
 8007b90:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <_fflush_r+0x70>)
 8007b92:	429c      	cmp	r4, r3
 8007b94:	d101      	bne.n	8007b9a <_fflush_r+0x62>
 8007b96:	68ac      	ldr	r4, [r5, #8]
 8007b98:	e7df      	b.n	8007b5a <_fflush_r+0x22>
 8007b9a:	4b04      	ldr	r3, [pc, #16]	; (8007bac <_fflush_r+0x74>)
 8007b9c:	429c      	cmp	r4, r3
 8007b9e:	bf08      	it	eq
 8007ba0:	68ec      	ldreq	r4, [r5, #12]
 8007ba2:	e7da      	b.n	8007b5a <_fflush_r+0x22>
 8007ba4:	08008324 	.word	0x08008324
 8007ba8:	08008344 	.word	0x08008344
 8007bac:	08008304 	.word	0x08008304

08007bb0 <std>:
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	b510      	push	{r4, lr}
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	e9c0 3300 	strd	r3, r3, [r0]
 8007bba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bbe:	6083      	str	r3, [r0, #8]
 8007bc0:	8181      	strh	r1, [r0, #12]
 8007bc2:	6643      	str	r3, [r0, #100]	; 0x64
 8007bc4:	81c2      	strh	r2, [r0, #14]
 8007bc6:	6183      	str	r3, [r0, #24]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	2208      	movs	r2, #8
 8007bcc:	305c      	adds	r0, #92	; 0x5c
 8007bce:	f7ff fdef 	bl	80077b0 <memset>
 8007bd2:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <std+0x38>)
 8007bd4:	6263      	str	r3, [r4, #36]	; 0x24
 8007bd6:	4b05      	ldr	r3, [pc, #20]	; (8007bec <std+0x3c>)
 8007bd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bda:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <std+0x40>)
 8007bdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bde:	4b05      	ldr	r3, [pc, #20]	; (8007bf4 <std+0x44>)
 8007be0:	6224      	str	r4, [r4, #32]
 8007be2:	6323      	str	r3, [r4, #48]	; 0x30
 8007be4:	bd10      	pop	{r4, pc}
 8007be6:	bf00      	nop
 8007be8:	0800804d 	.word	0x0800804d
 8007bec:	0800806f 	.word	0x0800806f
 8007bf0:	080080a7 	.word	0x080080a7
 8007bf4:	080080cb 	.word	0x080080cb

08007bf8 <_cleanup_r>:
 8007bf8:	4901      	ldr	r1, [pc, #4]	; (8007c00 <_cleanup_r+0x8>)
 8007bfa:	f000 b8af 	b.w	8007d5c <_fwalk_reent>
 8007bfe:	bf00      	nop
 8007c00:	08007b39 	.word	0x08007b39

08007c04 <__sfmoreglue>:
 8007c04:	b570      	push	{r4, r5, r6, lr}
 8007c06:	2268      	movs	r2, #104	; 0x68
 8007c08:	1e4d      	subs	r5, r1, #1
 8007c0a:	4355      	muls	r5, r2
 8007c0c:	460e      	mov	r6, r1
 8007c0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c12:	f000 f997 	bl	8007f44 <_malloc_r>
 8007c16:	4604      	mov	r4, r0
 8007c18:	b140      	cbz	r0, 8007c2c <__sfmoreglue+0x28>
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	e9c0 1600 	strd	r1, r6, [r0]
 8007c20:	300c      	adds	r0, #12
 8007c22:	60a0      	str	r0, [r4, #8]
 8007c24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c28:	f7ff fdc2 	bl	80077b0 <memset>
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}

08007c30 <__sfp_lock_acquire>:
 8007c30:	4801      	ldr	r0, [pc, #4]	; (8007c38 <__sfp_lock_acquire+0x8>)
 8007c32:	f000 b8b3 	b.w	8007d9c <__retarget_lock_acquire_recursive>
 8007c36:	bf00      	nop
 8007c38:	20014a4c 	.word	0x20014a4c

08007c3c <__sfp_lock_release>:
 8007c3c:	4801      	ldr	r0, [pc, #4]	; (8007c44 <__sfp_lock_release+0x8>)
 8007c3e:	f000 b8ae 	b.w	8007d9e <__retarget_lock_release_recursive>
 8007c42:	bf00      	nop
 8007c44:	20014a4c 	.word	0x20014a4c

08007c48 <__sinit_lock_acquire>:
 8007c48:	4801      	ldr	r0, [pc, #4]	; (8007c50 <__sinit_lock_acquire+0x8>)
 8007c4a:	f000 b8a7 	b.w	8007d9c <__retarget_lock_acquire_recursive>
 8007c4e:	bf00      	nop
 8007c50:	20014a4d 	.word	0x20014a4d

08007c54 <__sinit_lock_release>:
 8007c54:	4801      	ldr	r0, [pc, #4]	; (8007c5c <__sinit_lock_release+0x8>)
 8007c56:	f000 b8a2 	b.w	8007d9e <__retarget_lock_release_recursive>
 8007c5a:	bf00      	nop
 8007c5c:	20014a4d 	.word	0x20014a4d

08007c60 <__sinit>:
 8007c60:	b510      	push	{r4, lr}
 8007c62:	4604      	mov	r4, r0
 8007c64:	f7ff fff0 	bl	8007c48 <__sinit_lock_acquire>
 8007c68:	69a3      	ldr	r3, [r4, #24]
 8007c6a:	b11b      	cbz	r3, 8007c74 <__sinit+0x14>
 8007c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c70:	f7ff bff0 	b.w	8007c54 <__sinit_lock_release>
 8007c74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c78:	6523      	str	r3, [r4, #80]	; 0x50
 8007c7a:	4b13      	ldr	r3, [pc, #76]	; (8007cc8 <__sinit+0x68>)
 8007c7c:	4a13      	ldr	r2, [pc, #76]	; (8007ccc <__sinit+0x6c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c82:	42a3      	cmp	r3, r4
 8007c84:	bf04      	itt	eq
 8007c86:	2301      	moveq	r3, #1
 8007c88:	61a3      	streq	r3, [r4, #24]
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f000 f820 	bl	8007cd0 <__sfp>
 8007c90:	6060      	str	r0, [r4, #4]
 8007c92:	4620      	mov	r0, r4
 8007c94:	f000 f81c 	bl	8007cd0 <__sfp>
 8007c98:	60a0      	str	r0, [r4, #8]
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f000 f818 	bl	8007cd0 <__sfp>
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	60e0      	str	r0, [r4, #12]
 8007ca4:	2104      	movs	r1, #4
 8007ca6:	6860      	ldr	r0, [r4, #4]
 8007ca8:	f7ff ff82 	bl	8007bb0 <std>
 8007cac:	68a0      	ldr	r0, [r4, #8]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	2109      	movs	r1, #9
 8007cb2:	f7ff ff7d 	bl	8007bb0 <std>
 8007cb6:	68e0      	ldr	r0, [r4, #12]
 8007cb8:	2202      	movs	r2, #2
 8007cba:	2112      	movs	r1, #18
 8007cbc:	f7ff ff78 	bl	8007bb0 <std>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	61a3      	str	r3, [r4, #24]
 8007cc4:	e7d2      	b.n	8007c6c <__sinit+0xc>
 8007cc6:	bf00      	nop
 8007cc8:	08008300 	.word	0x08008300
 8007ccc:	08007bf9 	.word	0x08007bf9

08007cd0 <__sfp>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	4607      	mov	r7, r0
 8007cd4:	f7ff ffac 	bl	8007c30 <__sfp_lock_acquire>
 8007cd8:	4b1e      	ldr	r3, [pc, #120]	; (8007d54 <__sfp+0x84>)
 8007cda:	681e      	ldr	r6, [r3, #0]
 8007cdc:	69b3      	ldr	r3, [r6, #24]
 8007cde:	b913      	cbnz	r3, 8007ce6 <__sfp+0x16>
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f7ff ffbd 	bl	8007c60 <__sinit>
 8007ce6:	3648      	adds	r6, #72	; 0x48
 8007ce8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007cec:	3b01      	subs	r3, #1
 8007cee:	d503      	bpl.n	8007cf8 <__sfp+0x28>
 8007cf0:	6833      	ldr	r3, [r6, #0]
 8007cf2:	b30b      	cbz	r3, 8007d38 <__sfp+0x68>
 8007cf4:	6836      	ldr	r6, [r6, #0]
 8007cf6:	e7f7      	b.n	8007ce8 <__sfp+0x18>
 8007cf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cfc:	b9d5      	cbnz	r5, 8007d34 <__sfp+0x64>
 8007cfe:	4b16      	ldr	r3, [pc, #88]	; (8007d58 <__sfp+0x88>)
 8007d00:	60e3      	str	r3, [r4, #12]
 8007d02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d06:	6665      	str	r5, [r4, #100]	; 0x64
 8007d08:	f000 f847 	bl	8007d9a <__retarget_lock_init_recursive>
 8007d0c:	f7ff ff96 	bl	8007c3c <__sfp_lock_release>
 8007d10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d18:	6025      	str	r5, [r4, #0]
 8007d1a:	61a5      	str	r5, [r4, #24]
 8007d1c:	2208      	movs	r2, #8
 8007d1e:	4629      	mov	r1, r5
 8007d20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d24:	f7ff fd44 	bl	80077b0 <memset>
 8007d28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d30:	4620      	mov	r0, r4
 8007d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d34:	3468      	adds	r4, #104	; 0x68
 8007d36:	e7d9      	b.n	8007cec <__sfp+0x1c>
 8007d38:	2104      	movs	r1, #4
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	f7ff ff62 	bl	8007c04 <__sfmoreglue>
 8007d40:	4604      	mov	r4, r0
 8007d42:	6030      	str	r0, [r6, #0]
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d1d5      	bne.n	8007cf4 <__sfp+0x24>
 8007d48:	f7ff ff78 	bl	8007c3c <__sfp_lock_release>
 8007d4c:	230c      	movs	r3, #12
 8007d4e:	603b      	str	r3, [r7, #0]
 8007d50:	e7ee      	b.n	8007d30 <__sfp+0x60>
 8007d52:	bf00      	nop
 8007d54:	08008300 	.word	0x08008300
 8007d58:	ffff0001 	.word	0xffff0001

08007d5c <_fwalk_reent>:
 8007d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d60:	4606      	mov	r6, r0
 8007d62:	4688      	mov	r8, r1
 8007d64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d68:	2700      	movs	r7, #0
 8007d6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d6e:	f1b9 0901 	subs.w	r9, r9, #1
 8007d72:	d505      	bpl.n	8007d80 <_fwalk_reent+0x24>
 8007d74:	6824      	ldr	r4, [r4, #0]
 8007d76:	2c00      	cmp	r4, #0
 8007d78:	d1f7      	bne.n	8007d6a <_fwalk_reent+0xe>
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d80:	89ab      	ldrh	r3, [r5, #12]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d907      	bls.n	8007d96 <_fwalk_reent+0x3a>
 8007d86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	d003      	beq.n	8007d96 <_fwalk_reent+0x3a>
 8007d8e:	4629      	mov	r1, r5
 8007d90:	4630      	mov	r0, r6
 8007d92:	47c0      	blx	r8
 8007d94:	4307      	orrs	r7, r0
 8007d96:	3568      	adds	r5, #104	; 0x68
 8007d98:	e7e9      	b.n	8007d6e <_fwalk_reent+0x12>

08007d9a <__retarget_lock_init_recursive>:
 8007d9a:	4770      	bx	lr

08007d9c <__retarget_lock_acquire_recursive>:
 8007d9c:	4770      	bx	lr

08007d9e <__retarget_lock_release_recursive>:
 8007d9e:	4770      	bx	lr

08007da0 <__swhatbuf_r>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	460e      	mov	r6, r1
 8007da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da8:	2900      	cmp	r1, #0
 8007daa:	b096      	sub	sp, #88	; 0x58
 8007dac:	4614      	mov	r4, r2
 8007dae:	461d      	mov	r5, r3
 8007db0:	da08      	bge.n	8007dc4 <__swhatbuf_r+0x24>
 8007db2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	602a      	str	r2, [r5, #0]
 8007dba:	061a      	lsls	r2, r3, #24
 8007dbc:	d410      	bmi.n	8007de0 <__swhatbuf_r+0x40>
 8007dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dc2:	e00e      	b.n	8007de2 <__swhatbuf_r+0x42>
 8007dc4:	466a      	mov	r2, sp
 8007dc6:	f000 f995 	bl	80080f4 <_fstat_r>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	dbf1      	blt.n	8007db2 <__swhatbuf_r+0x12>
 8007dce:	9a01      	ldr	r2, [sp, #4]
 8007dd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007dd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007dd8:	425a      	negs	r2, r3
 8007dda:	415a      	adcs	r2, r3
 8007ddc:	602a      	str	r2, [r5, #0]
 8007dde:	e7ee      	b.n	8007dbe <__swhatbuf_r+0x1e>
 8007de0:	2340      	movs	r3, #64	; 0x40
 8007de2:	2000      	movs	r0, #0
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	b016      	add	sp, #88	; 0x58
 8007de8:	bd70      	pop	{r4, r5, r6, pc}
	...

08007dec <__smakebuf_r>:
 8007dec:	898b      	ldrh	r3, [r1, #12]
 8007dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007df0:	079d      	lsls	r5, r3, #30
 8007df2:	4606      	mov	r6, r0
 8007df4:	460c      	mov	r4, r1
 8007df6:	d507      	bpl.n	8007e08 <__smakebuf_r+0x1c>
 8007df8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	6123      	str	r3, [r4, #16]
 8007e00:	2301      	movs	r3, #1
 8007e02:	6163      	str	r3, [r4, #20]
 8007e04:	b002      	add	sp, #8
 8007e06:	bd70      	pop	{r4, r5, r6, pc}
 8007e08:	ab01      	add	r3, sp, #4
 8007e0a:	466a      	mov	r2, sp
 8007e0c:	f7ff ffc8 	bl	8007da0 <__swhatbuf_r>
 8007e10:	9900      	ldr	r1, [sp, #0]
 8007e12:	4605      	mov	r5, r0
 8007e14:	4630      	mov	r0, r6
 8007e16:	f000 f895 	bl	8007f44 <_malloc_r>
 8007e1a:	b948      	cbnz	r0, 8007e30 <__smakebuf_r+0x44>
 8007e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e20:	059a      	lsls	r2, r3, #22
 8007e22:	d4ef      	bmi.n	8007e04 <__smakebuf_r+0x18>
 8007e24:	f023 0303 	bic.w	r3, r3, #3
 8007e28:	f043 0302 	orr.w	r3, r3, #2
 8007e2c:	81a3      	strh	r3, [r4, #12]
 8007e2e:	e7e3      	b.n	8007df8 <__smakebuf_r+0xc>
 8007e30:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <__smakebuf_r+0x7c>)
 8007e32:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	6020      	str	r0, [r4, #0]
 8007e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e3c:	81a3      	strh	r3, [r4, #12]
 8007e3e:	9b00      	ldr	r3, [sp, #0]
 8007e40:	6163      	str	r3, [r4, #20]
 8007e42:	9b01      	ldr	r3, [sp, #4]
 8007e44:	6120      	str	r0, [r4, #16]
 8007e46:	b15b      	cbz	r3, 8007e60 <__smakebuf_r+0x74>
 8007e48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	f000 f963 	bl	8008118 <_isatty_r>
 8007e52:	b128      	cbz	r0, 8007e60 <__smakebuf_r+0x74>
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	f023 0303 	bic.w	r3, r3, #3
 8007e5a:	f043 0301 	orr.w	r3, r3, #1
 8007e5e:	81a3      	strh	r3, [r4, #12]
 8007e60:	89a0      	ldrh	r0, [r4, #12]
 8007e62:	4305      	orrs	r5, r0
 8007e64:	81a5      	strh	r5, [r4, #12]
 8007e66:	e7cd      	b.n	8007e04 <__smakebuf_r+0x18>
 8007e68:	08007bf9 	.word	0x08007bf9

08007e6c <_free_r>:
 8007e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e6e:	2900      	cmp	r1, #0
 8007e70:	d044      	beq.n	8007efc <_free_r+0x90>
 8007e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e76:	9001      	str	r0, [sp, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8007e7e:	bfb8      	it	lt
 8007e80:	18e4      	addlt	r4, r4, r3
 8007e82:	f000 f96b 	bl	800815c <__malloc_lock>
 8007e86:	4a1e      	ldr	r2, [pc, #120]	; (8007f00 <_free_r+0x94>)
 8007e88:	9801      	ldr	r0, [sp, #4]
 8007e8a:	6813      	ldr	r3, [r2, #0]
 8007e8c:	b933      	cbnz	r3, 8007e9c <_free_r+0x30>
 8007e8e:	6063      	str	r3, [r4, #4]
 8007e90:	6014      	str	r4, [r2, #0]
 8007e92:	b003      	add	sp, #12
 8007e94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e98:	f000 b966 	b.w	8008168 <__malloc_unlock>
 8007e9c:	42a3      	cmp	r3, r4
 8007e9e:	d908      	bls.n	8007eb2 <_free_r+0x46>
 8007ea0:	6825      	ldr	r5, [r4, #0]
 8007ea2:	1961      	adds	r1, r4, r5
 8007ea4:	428b      	cmp	r3, r1
 8007ea6:	bf01      	itttt	eq
 8007ea8:	6819      	ldreq	r1, [r3, #0]
 8007eaa:	685b      	ldreq	r3, [r3, #4]
 8007eac:	1949      	addeq	r1, r1, r5
 8007eae:	6021      	streq	r1, [r4, #0]
 8007eb0:	e7ed      	b.n	8007e8e <_free_r+0x22>
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	b10b      	cbz	r3, 8007ebc <_free_r+0x50>
 8007eb8:	42a3      	cmp	r3, r4
 8007eba:	d9fa      	bls.n	8007eb2 <_free_r+0x46>
 8007ebc:	6811      	ldr	r1, [r2, #0]
 8007ebe:	1855      	adds	r5, r2, r1
 8007ec0:	42a5      	cmp	r5, r4
 8007ec2:	d10b      	bne.n	8007edc <_free_r+0x70>
 8007ec4:	6824      	ldr	r4, [r4, #0]
 8007ec6:	4421      	add	r1, r4
 8007ec8:	1854      	adds	r4, r2, r1
 8007eca:	42a3      	cmp	r3, r4
 8007ecc:	6011      	str	r1, [r2, #0]
 8007ece:	d1e0      	bne.n	8007e92 <_free_r+0x26>
 8007ed0:	681c      	ldr	r4, [r3, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	6053      	str	r3, [r2, #4]
 8007ed6:	4421      	add	r1, r4
 8007ed8:	6011      	str	r1, [r2, #0]
 8007eda:	e7da      	b.n	8007e92 <_free_r+0x26>
 8007edc:	d902      	bls.n	8007ee4 <_free_r+0x78>
 8007ede:	230c      	movs	r3, #12
 8007ee0:	6003      	str	r3, [r0, #0]
 8007ee2:	e7d6      	b.n	8007e92 <_free_r+0x26>
 8007ee4:	6825      	ldr	r5, [r4, #0]
 8007ee6:	1961      	adds	r1, r4, r5
 8007ee8:	428b      	cmp	r3, r1
 8007eea:	bf04      	itt	eq
 8007eec:	6819      	ldreq	r1, [r3, #0]
 8007eee:	685b      	ldreq	r3, [r3, #4]
 8007ef0:	6063      	str	r3, [r4, #4]
 8007ef2:	bf04      	itt	eq
 8007ef4:	1949      	addeq	r1, r1, r5
 8007ef6:	6021      	streq	r1, [r4, #0]
 8007ef8:	6054      	str	r4, [r2, #4]
 8007efa:	e7ca      	b.n	8007e92 <_free_r+0x26>
 8007efc:	b003      	add	sp, #12
 8007efe:	bd30      	pop	{r4, r5, pc}
 8007f00:	20014a50 	.word	0x20014a50

08007f04 <sbrk_aligned>:
 8007f04:	b570      	push	{r4, r5, r6, lr}
 8007f06:	4e0e      	ldr	r6, [pc, #56]	; (8007f40 <sbrk_aligned+0x3c>)
 8007f08:	460c      	mov	r4, r1
 8007f0a:	6831      	ldr	r1, [r6, #0]
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	b911      	cbnz	r1, 8007f16 <sbrk_aligned+0x12>
 8007f10:	f000 f88c 	bl	800802c <_sbrk_r>
 8007f14:	6030      	str	r0, [r6, #0]
 8007f16:	4621      	mov	r1, r4
 8007f18:	4628      	mov	r0, r5
 8007f1a:	f000 f887 	bl	800802c <_sbrk_r>
 8007f1e:	1c43      	adds	r3, r0, #1
 8007f20:	d00a      	beq.n	8007f38 <sbrk_aligned+0x34>
 8007f22:	1cc4      	adds	r4, r0, #3
 8007f24:	f024 0403 	bic.w	r4, r4, #3
 8007f28:	42a0      	cmp	r0, r4
 8007f2a:	d007      	beq.n	8007f3c <sbrk_aligned+0x38>
 8007f2c:	1a21      	subs	r1, r4, r0
 8007f2e:	4628      	mov	r0, r5
 8007f30:	f000 f87c 	bl	800802c <_sbrk_r>
 8007f34:	3001      	adds	r0, #1
 8007f36:	d101      	bne.n	8007f3c <sbrk_aligned+0x38>
 8007f38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	bd70      	pop	{r4, r5, r6, pc}
 8007f40:	20014a54 	.word	0x20014a54

08007f44 <_malloc_r>:
 8007f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f48:	1ccd      	adds	r5, r1, #3
 8007f4a:	f025 0503 	bic.w	r5, r5, #3
 8007f4e:	3508      	adds	r5, #8
 8007f50:	2d0c      	cmp	r5, #12
 8007f52:	bf38      	it	cc
 8007f54:	250c      	movcc	r5, #12
 8007f56:	2d00      	cmp	r5, #0
 8007f58:	4607      	mov	r7, r0
 8007f5a:	db01      	blt.n	8007f60 <_malloc_r+0x1c>
 8007f5c:	42a9      	cmp	r1, r5
 8007f5e:	d905      	bls.n	8007f6c <_malloc_r+0x28>
 8007f60:	230c      	movs	r3, #12
 8007f62:	603b      	str	r3, [r7, #0]
 8007f64:	2600      	movs	r6, #0
 8007f66:	4630      	mov	r0, r6
 8007f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f6c:	4e2e      	ldr	r6, [pc, #184]	; (8008028 <_malloc_r+0xe4>)
 8007f6e:	f000 f8f5 	bl	800815c <__malloc_lock>
 8007f72:	6833      	ldr	r3, [r6, #0]
 8007f74:	461c      	mov	r4, r3
 8007f76:	bb34      	cbnz	r4, 8007fc6 <_malloc_r+0x82>
 8007f78:	4629      	mov	r1, r5
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	f7ff ffc2 	bl	8007f04 <sbrk_aligned>
 8007f80:	1c43      	adds	r3, r0, #1
 8007f82:	4604      	mov	r4, r0
 8007f84:	d14d      	bne.n	8008022 <_malloc_r+0xde>
 8007f86:	6834      	ldr	r4, [r6, #0]
 8007f88:	4626      	mov	r6, r4
 8007f8a:	2e00      	cmp	r6, #0
 8007f8c:	d140      	bne.n	8008010 <_malloc_r+0xcc>
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	4631      	mov	r1, r6
 8007f92:	4638      	mov	r0, r7
 8007f94:	eb04 0803 	add.w	r8, r4, r3
 8007f98:	f000 f848 	bl	800802c <_sbrk_r>
 8007f9c:	4580      	cmp	r8, r0
 8007f9e:	d13a      	bne.n	8008016 <_malloc_r+0xd2>
 8007fa0:	6821      	ldr	r1, [r4, #0]
 8007fa2:	3503      	adds	r5, #3
 8007fa4:	1a6d      	subs	r5, r5, r1
 8007fa6:	f025 0503 	bic.w	r5, r5, #3
 8007faa:	3508      	adds	r5, #8
 8007fac:	2d0c      	cmp	r5, #12
 8007fae:	bf38      	it	cc
 8007fb0:	250c      	movcc	r5, #12
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	f7ff ffa5 	bl	8007f04 <sbrk_aligned>
 8007fba:	3001      	adds	r0, #1
 8007fbc:	d02b      	beq.n	8008016 <_malloc_r+0xd2>
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	442b      	add	r3, r5
 8007fc2:	6023      	str	r3, [r4, #0]
 8007fc4:	e00e      	b.n	8007fe4 <_malloc_r+0xa0>
 8007fc6:	6822      	ldr	r2, [r4, #0]
 8007fc8:	1b52      	subs	r2, r2, r5
 8007fca:	d41e      	bmi.n	800800a <_malloc_r+0xc6>
 8007fcc:	2a0b      	cmp	r2, #11
 8007fce:	d916      	bls.n	8007ffe <_malloc_r+0xba>
 8007fd0:	1961      	adds	r1, r4, r5
 8007fd2:	42a3      	cmp	r3, r4
 8007fd4:	6025      	str	r5, [r4, #0]
 8007fd6:	bf18      	it	ne
 8007fd8:	6059      	strne	r1, [r3, #4]
 8007fda:	6863      	ldr	r3, [r4, #4]
 8007fdc:	bf08      	it	eq
 8007fde:	6031      	streq	r1, [r6, #0]
 8007fe0:	5162      	str	r2, [r4, r5]
 8007fe2:	604b      	str	r3, [r1, #4]
 8007fe4:	4638      	mov	r0, r7
 8007fe6:	f104 060b 	add.w	r6, r4, #11
 8007fea:	f000 f8bd 	bl	8008168 <__malloc_unlock>
 8007fee:	f026 0607 	bic.w	r6, r6, #7
 8007ff2:	1d23      	adds	r3, r4, #4
 8007ff4:	1af2      	subs	r2, r6, r3
 8007ff6:	d0b6      	beq.n	8007f66 <_malloc_r+0x22>
 8007ff8:	1b9b      	subs	r3, r3, r6
 8007ffa:	50a3      	str	r3, [r4, r2]
 8007ffc:	e7b3      	b.n	8007f66 <_malloc_r+0x22>
 8007ffe:	6862      	ldr	r2, [r4, #4]
 8008000:	42a3      	cmp	r3, r4
 8008002:	bf0c      	ite	eq
 8008004:	6032      	streq	r2, [r6, #0]
 8008006:	605a      	strne	r2, [r3, #4]
 8008008:	e7ec      	b.n	8007fe4 <_malloc_r+0xa0>
 800800a:	4623      	mov	r3, r4
 800800c:	6864      	ldr	r4, [r4, #4]
 800800e:	e7b2      	b.n	8007f76 <_malloc_r+0x32>
 8008010:	4634      	mov	r4, r6
 8008012:	6876      	ldr	r6, [r6, #4]
 8008014:	e7b9      	b.n	8007f8a <_malloc_r+0x46>
 8008016:	230c      	movs	r3, #12
 8008018:	603b      	str	r3, [r7, #0]
 800801a:	4638      	mov	r0, r7
 800801c:	f000 f8a4 	bl	8008168 <__malloc_unlock>
 8008020:	e7a1      	b.n	8007f66 <_malloc_r+0x22>
 8008022:	6025      	str	r5, [r4, #0]
 8008024:	e7de      	b.n	8007fe4 <_malloc_r+0xa0>
 8008026:	bf00      	nop
 8008028:	20014a50 	.word	0x20014a50

0800802c <_sbrk_r>:
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	4d06      	ldr	r5, [pc, #24]	; (8008048 <_sbrk_r+0x1c>)
 8008030:	2300      	movs	r3, #0
 8008032:	4604      	mov	r4, r0
 8008034:	4608      	mov	r0, r1
 8008036:	602b      	str	r3, [r5, #0]
 8008038:	f000 f8ae 	bl	8008198 <_sbrk>
 800803c:	1c43      	adds	r3, r0, #1
 800803e:	d102      	bne.n	8008046 <_sbrk_r+0x1a>
 8008040:	682b      	ldr	r3, [r5, #0]
 8008042:	b103      	cbz	r3, 8008046 <_sbrk_r+0x1a>
 8008044:	6023      	str	r3, [r4, #0]
 8008046:	bd38      	pop	{r3, r4, r5, pc}
 8008048:	20014a58 	.word	0x20014a58

0800804c <__sread>:
 800804c:	b510      	push	{r4, lr}
 800804e:	460c      	mov	r4, r1
 8008050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008054:	f000 f88e 	bl	8008174 <_read_r>
 8008058:	2800      	cmp	r0, #0
 800805a:	bfab      	itete	ge
 800805c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800805e:	89a3      	ldrhlt	r3, [r4, #12]
 8008060:	181b      	addge	r3, r3, r0
 8008062:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008066:	bfac      	ite	ge
 8008068:	6563      	strge	r3, [r4, #84]	; 0x54
 800806a:	81a3      	strhlt	r3, [r4, #12]
 800806c:	bd10      	pop	{r4, pc}

0800806e <__swrite>:
 800806e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008072:	461f      	mov	r7, r3
 8008074:	898b      	ldrh	r3, [r1, #12]
 8008076:	05db      	lsls	r3, r3, #23
 8008078:	4605      	mov	r5, r0
 800807a:	460c      	mov	r4, r1
 800807c:	4616      	mov	r6, r2
 800807e:	d505      	bpl.n	800808c <__swrite+0x1e>
 8008080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008084:	2302      	movs	r3, #2
 8008086:	2200      	movs	r2, #0
 8008088:	f000 f856 	bl	8008138 <_lseek_r>
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008096:	81a3      	strh	r3, [r4, #12]
 8008098:	4632      	mov	r2, r6
 800809a:	463b      	mov	r3, r7
 800809c:	4628      	mov	r0, r5
 800809e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080a2:	f7ff bb31 	b.w	8007708 <_write_r>

080080a6 <__sseek>:
 80080a6:	b510      	push	{r4, lr}
 80080a8:	460c      	mov	r4, r1
 80080aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ae:	f000 f843 	bl	8008138 <_lseek_r>
 80080b2:	1c43      	adds	r3, r0, #1
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	bf15      	itete	ne
 80080b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80080ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080c2:	81a3      	strheq	r3, [r4, #12]
 80080c4:	bf18      	it	ne
 80080c6:	81a3      	strhne	r3, [r4, #12]
 80080c8:	bd10      	pop	{r4, pc}

080080ca <__sclose>:
 80080ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ce:	f000 b801 	b.w	80080d4 <_close_r>
	...

080080d4 <_close_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4d06      	ldr	r5, [pc, #24]	; (80080f0 <_close_r+0x1c>)
 80080d8:	2300      	movs	r3, #0
 80080da:	4604      	mov	r4, r0
 80080dc:	4608      	mov	r0, r1
 80080de:	602b      	str	r3, [r5, #0]
 80080e0:	f7f8 fdfb 	bl	8000cda <_close>
 80080e4:	1c43      	adds	r3, r0, #1
 80080e6:	d102      	bne.n	80080ee <_close_r+0x1a>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b103      	cbz	r3, 80080ee <_close_r+0x1a>
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	20014a58 	.word	0x20014a58

080080f4 <_fstat_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4d07      	ldr	r5, [pc, #28]	; (8008114 <_fstat_r+0x20>)
 80080f8:	2300      	movs	r3, #0
 80080fa:	4604      	mov	r4, r0
 80080fc:	4608      	mov	r0, r1
 80080fe:	4611      	mov	r1, r2
 8008100:	602b      	str	r3, [r5, #0]
 8008102:	f7f8 fdf6 	bl	8000cf2 <_fstat>
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	d102      	bne.n	8008110 <_fstat_r+0x1c>
 800810a:	682b      	ldr	r3, [r5, #0]
 800810c:	b103      	cbz	r3, 8008110 <_fstat_r+0x1c>
 800810e:	6023      	str	r3, [r4, #0]
 8008110:	bd38      	pop	{r3, r4, r5, pc}
 8008112:	bf00      	nop
 8008114:	20014a58 	.word	0x20014a58

08008118 <_isatty_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4d06      	ldr	r5, [pc, #24]	; (8008134 <_isatty_r+0x1c>)
 800811c:	2300      	movs	r3, #0
 800811e:	4604      	mov	r4, r0
 8008120:	4608      	mov	r0, r1
 8008122:	602b      	str	r3, [r5, #0]
 8008124:	f7f8 fdf5 	bl	8000d12 <_isatty>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d102      	bne.n	8008132 <_isatty_r+0x1a>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	b103      	cbz	r3, 8008132 <_isatty_r+0x1a>
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	20014a58 	.word	0x20014a58

08008138 <_lseek_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4d07      	ldr	r5, [pc, #28]	; (8008158 <_lseek_r+0x20>)
 800813c:	4604      	mov	r4, r0
 800813e:	4608      	mov	r0, r1
 8008140:	4611      	mov	r1, r2
 8008142:	2200      	movs	r2, #0
 8008144:	602a      	str	r2, [r5, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	f7f8 fdee 	bl	8000d28 <_lseek>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_lseek_r+0x1e>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_lseek_r+0x1e>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	20014a58 	.word	0x20014a58

0800815c <__malloc_lock>:
 800815c:	4801      	ldr	r0, [pc, #4]	; (8008164 <__malloc_lock+0x8>)
 800815e:	f7ff be1d 	b.w	8007d9c <__retarget_lock_acquire_recursive>
 8008162:	bf00      	nop
 8008164:	20014a4b 	.word	0x20014a4b

08008168 <__malloc_unlock>:
 8008168:	4801      	ldr	r0, [pc, #4]	; (8008170 <__malloc_unlock+0x8>)
 800816a:	f7ff be18 	b.w	8007d9e <__retarget_lock_release_recursive>
 800816e:	bf00      	nop
 8008170:	20014a4b 	.word	0x20014a4b

08008174 <_read_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4d07      	ldr	r5, [pc, #28]	; (8008194 <_read_r+0x20>)
 8008178:	4604      	mov	r4, r0
 800817a:	4608      	mov	r0, r1
 800817c:	4611      	mov	r1, r2
 800817e:	2200      	movs	r2, #0
 8008180:	602a      	str	r2, [r5, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	f7f8 fd8c 	bl	8000ca0 <_read>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	d102      	bne.n	8008192 <_read_r+0x1e>
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	b103      	cbz	r3, 8008192 <_read_r+0x1e>
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	bd38      	pop	{r3, r4, r5, pc}
 8008194:	20014a58 	.word	0x20014a58

08008198 <_sbrk>:
 8008198:	4a04      	ldr	r2, [pc, #16]	; (80081ac <_sbrk+0x14>)
 800819a:	6811      	ldr	r1, [r2, #0]
 800819c:	4603      	mov	r3, r0
 800819e:	b909      	cbnz	r1, 80081a4 <_sbrk+0xc>
 80081a0:	4903      	ldr	r1, [pc, #12]	; (80081b0 <_sbrk+0x18>)
 80081a2:	6011      	str	r1, [r2, #0]
 80081a4:	6810      	ldr	r0, [r2, #0]
 80081a6:	4403      	add	r3, r0
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	4770      	bx	lr
 80081ac:	20014a5c 	.word	0x20014a5c
 80081b0:	20014a60 	.word	0x20014a60

080081b4 <_init>:
 80081b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b6:	bf00      	nop
 80081b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ba:	bc08      	pop	{r3}
 80081bc:	469e      	mov	lr, r3
 80081be:	4770      	bx	lr

080081c0 <_fini>:
 80081c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c2:	bf00      	nop
 80081c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c6:	bc08      	pop	{r3}
 80081c8:	469e      	mov	lr, r3
 80081ca:	4770      	bx	lr
